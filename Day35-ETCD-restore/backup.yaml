apiVersion: v1
items:
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-09-03T08:40:29Z"
    generateName: example-argocd-application-controller-
    labels:
      app.kubernetes.io/name: example-argocd-application-controller
      apps.kubernetes.io/pod-index: "0"
      controller-revision-hash: example-argocd-application-controller-7bb76fd49b
      image.upgraded: 09032024-084024-UTC
      statefulset.kubernetes.io/pod-name: example-argocd-application-controller-0
    name: example-argocd-application-controller-0
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: example-argocd-application-controller
      uid: 735acf5e-2855-48f3-ae0a-48bfd385b5bd
    resourceVersion: "1502459"
    uid: 78eed08e-a476-4798-b6ef-59f2928a6a88
  spec:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/name: example-argocd-argocd-application-controller
            topologyKey: kubernetes.io/hostname
          weight: 100
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/part-of: argocd
            topologyKey: kubernetes.io/hostname
          weight: 5
    containers:
    - command:
      - argocd-application-controller
      - --operation-processors
      - "10"
      - --redis
      - example-argocd-redis.default.svc.cluster.local:6379
      - --repo-server
      - example-argocd-repo-server.default.svc.cluster.local:8081
      - --status-processors
      - "20"
      - --kubectl-parallelism-limit
      - "10"
      - --loglevel
      - info
      - --logformat
      - text
      env:
      - name: HOME
        value: /home/argocd
      - name: REDIS_PASSWORD
        valueFrom:
          secretKeyRef:
            key: admin.password
            name: example-argocd-redis-initial-password
      image: quay.io/argoproj/argocd@sha256:a0ebfa7d419a1c78babc80fc77de093751d8a5fabffcaf3f7e81a4d55a23cc0d
      imagePullPolicy: Always
      name: argocd-application-controller
      ports:
      - containerPort: 8082
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 8082
          scheme: HTTP
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        runAsNonRoot: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /app/config/controller/tls
        name: argocd-repo-server-tls
      - mountPath: /app/config/controller/tls/redis
        name: argocd-operator-redis-tls
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-j4sbn
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostname: example-argocd-application-controller-0
    nodeName: cluster2-worker
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: example-argocd-argocd-application-controller
    serviceAccountName: example-argocd-argocd-application-controller
    subdomain: example-argocd-application-controller
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: argocd-repo-server-tls
      secret:
        defaultMode: 420
        optional: true
        secretName: argocd-repo-server-tls
    - name: argocd-operator-redis-tls
      secret:
        defaultMode: 420
        optional: true
        secretName: argocd-operator-redis-tls
    - name: kube-api-access-j4sbn
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:36:00Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-09-03T08:40:29Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:36:14Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:36:14Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-09-03T08:40:29Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://6e375a7ae7680e767e92b9ca8c5bca07d3787e2820b45a3188bb2cdbcf519428
      image: sha256:c02afb94df602c1619c27c166c4fc5149c87717398745a8afdd58a1dcd1e9f4b
      imageID: quay.io/argoproj/argocd@sha256:a0ebfa7d419a1c78babc80fc77de093751d8a5fabffcaf3f7e81a4d55a23cc0d
      lastState:
        terminated:
          containerID: containerd://792bc5d7d83d36ff5c050281b537ff29b8eec4c76b8ad2df7208bfded496e68b
          exitCode: 255
          finishedAt: "2024-09-06T03:35:44Z"
          reason: Unknown
          startedAt: "2024-09-03T08:41:09Z"
      name: argocd-application-controller
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2024-09-06T03:36:00Z"
    hostIP: 172.18.0.4
    hostIPs:
    - ip: 172.18.0.4
    phase: Running
    podIP: 10.244.2.2
    podIPs:
    - ip: 10.244.2.2
    qosClass: BestEffort
    startTime: "2024-09-03T08:40:29Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-08-09T10:57:58Z"
    generateName: example-argocd-redis-56f6446c6d-
    labels:
      app.kubernetes.io/name: example-argocd-redis
      pod-template-hash: 56f6446c6d
    name: example-argocd-redis-56f6446c6d-ttstk
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: example-argocd-redis-56f6446c6d
      uid: 8a7abc53-3c66-4d0c-8ce6-084c6c89ae2c
    resourceVersion: "1502821"
    uid: f4de51d4-118d-43f7-a7d3-685dc49aa077
  spec:
    containers:
    - args:
      - --save
      - ""
      - --appendonly
      - "no"
      - --requirepass $(REDIS_PASSWORD)
      env:
      - name: REDIS_PASSWORD
        valueFrom:
          secretKeyRef:
            key: admin.password
            name: example-argocd-redis-initial-password
      image: redis@sha256:8061ca607db2a0c80010aeb5fc9bed0253448bc68711eaa14253a392f6c48280
      imagePullPolicy: Always
      name: redis
      ports:
      - containerPort: 6379
        protocol: TCP
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        runAsNonRoot: true
        runAsUser: 999
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /app/config/redis/tls
        name: argocd-operator-redis-tls
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-twqmc
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: cluster2-worker3
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: example-argocd-argocd-redis
    serviceAccountName: example-argocd-argocd-redis
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: argocd-operator-redis-tls
      secret:
        defaultMode: 420
        optional: true
        secretName: argocd-operator-redis-tls
    - name: kube-api-access-twqmc
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:37:08Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-08-09T10:57:58Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:37:08Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:37:08Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-08-09T10:57:58Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://1c335a37857c7a64a74b2fe2ba3633819ff5874c578fec9539f74c25bd3783ea
      image: sha256:500703a12fa42704f1901f244f3cb4feb74fb1ca550b2eff4bb22e765eb10971
      imageID: docker.io/library/redis@sha256:8061ca607db2a0c80010aeb5fc9bed0253448bc68711eaa14253a392f6c48280
      lastState:
        terminated:
          containerID: containerd://a262775df9c7201263a8c477f1d2832bad9d7574ba16c28c9fc668df0f9ce8cf
          exitCode: 255
          finishedAt: "2024-09-06T03:35:44Z"
          reason: Unknown
          startedAt: "2024-09-03T06:55:25Z"
      name: redis
      ready: true
      restartCount: 20
      started: true
      state:
        running:
          startedAt: "2024-09-06T03:37:08Z"
    hostIP: 172.18.0.5
    hostIPs:
    - ip: 172.18.0.5
    phase: Running
    podIP: 10.244.1.5
    podIPs:
    - ip: 10.244.1.5
    qosClass: BestEffort
    startTime: "2024-08-09T10:57:58Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-09-03T08:40:29Z"
    generateName: example-argocd-repo-server-7cfbcc9c4f-
    labels:
      app.kubernetes.io/name: example-argocd-repo-server
      image.upgraded: 09032024-084024-UTC
      pod-template-hash: 7cfbcc9c4f
    name: example-argocd-repo-server-7cfbcc9c4f-gzf5r
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: example-argocd-repo-server-7cfbcc9c4f
      uid: 54dfc63e-c402-404f-975b-33faa4e0768c
    resourceVersion: "1502858"
    uid: 3d5da372-fc75-45b6-8ce5-2c5458f3a9f6
  spec:
    automountServiceAccountToken: false
    containers:
    - command:
      - uid_entrypoint.sh
      - argocd-repo-server
      - --redis
      - example-argocd-redis.default.svc.cluster.local:6379
      - --loglevel
      - info
      - --logformat
      - text
      env:
      - name: REDIS_PASSWORD
        valueFrom:
          secretKeyRef:
            key: admin.password
            name: example-argocd-redis-initial-password
      image: quay.io/argoproj/argocd@sha256:a0ebfa7d419a1c78babc80fc77de093751d8a5fabffcaf3f7e81a4d55a23cc0d
      imagePullPolicy: Always
      livenessProbe:
        failureThreshold: 3
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        tcpSocket:
          port: 8081
        timeoutSeconds: 1
      name: argocd-repo-server
      ports:
      - containerPort: 8081
        name: server
        protocol: TCP
      - containerPort: 8084
        name: metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        tcpSocket:
          port: 8081
        timeoutSeconds: 1
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /app/config/ssh
        name: ssh-known-hosts
      - mountPath: /app/config/tls
        name: tls-certs
      - mountPath: /app/config/gpg/source
        name: gpg-keys
      - mountPath: /app/config/gpg/keys
        name: gpg-keyring
      - mountPath: /app/config/reposerver/tls
        name: argocd-repo-server-tls
      - mountPath: /app/config/reposerver/tls/redis
        name: argocd-operator-redis-tls
      - mountPath: /home/argocd/cmp-server/plugins
        name: plugins
      - mountPath: /tmp
        name: tmp
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    initContainers:
    - command:
      - cp
      - -n
      - /usr/local/bin/argocd
      - /var/run/argocd/argocd-cmp-server
      image: quay.io/argoproj/argocd@sha256:a0ebfa7d419a1c78babc80fc77de093751d8a5fabffcaf3f7e81a4d55a23cc0d
      imagePullPolicy: Always
      name: copyutil
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/argocd
        name: var-files
    nodeName: cluster2-worker2
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        name: argocd-ssh-known-hosts-cm
      name: ssh-known-hosts
    - configMap:
        defaultMode: 420
        name: argocd-tls-certs-cm
      name: tls-certs
    - configMap:
        defaultMode: 420
        name: argocd-gpg-keys-cm
      name: gpg-keys
    - emptyDir: {}
      name: gpg-keyring
    - name: argocd-repo-server-tls
      secret:
        defaultMode: 420
        optional: true
        secretName: argocd-repo-server-tls
    - name: argocd-operator-redis-tls
      secret:
        defaultMode: 420
        optional: true
        secretName: argocd-operator-redis-tls
    - emptyDir: {}
      name: var-files
    - emptyDir: {}
      name: plugins
    - emptyDir: {}
      name: tmp
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:37:06Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-09-03T08:41:08Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:37:21Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:37:21Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-09-03T08:40:29Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://cff6fc49dcd1795bab0200e3b10383dfb0f7b65f1bc3e168d6a83f852bbc96c6
      image: sha256:c02afb94df602c1619c27c166c4fc5149c87717398745a8afdd58a1dcd1e9f4b
      imageID: quay.io/argoproj/argocd@sha256:a0ebfa7d419a1c78babc80fc77de093751d8a5fabffcaf3f7e81a4d55a23cc0d
      lastState:
        terminated:
          containerID: containerd://6d15734a14f9632c58cd70a531a730be896d9d2b1435ad2816e5792c3d81a427
          exitCode: 255
          finishedAt: "2024-09-06T03:35:44Z"
          reason: Unknown
          startedAt: "2024-09-03T08:41:09Z"
      name: argocd-repo-server
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2024-09-06T03:37:08Z"
    hostIP: 172.18.0.2
    hostIPs:
    - ip: 172.18.0.2
    initContainerStatuses:
    - containerID: containerd://1547bea6ae27414a5257af8c0aeec076a0d491a5d5957768958939cf6caf5606
      image: sha256:c02afb94df602c1619c27c166c4fc5149c87717398745a8afdd58a1dcd1e9f4b
      imageID: quay.io/argoproj/argocd@sha256:a0ebfa7d419a1c78babc80fc77de093751d8a5fabffcaf3f7e81a4d55a23cc0d
      lastState: {}
      name: copyutil
      ready: true
      restartCount: 1
      started: false
      state:
        terminated:
          containerID: containerd://1547bea6ae27414a5257af8c0aeec076a0d491a5d5957768958939cf6caf5606
          exitCode: 0
          finishedAt: "2024-09-06T03:37:05Z"
          reason: Completed
          startedAt: "2024-09-06T03:37:05Z"
    phase: Running
    podIP: 10.244.3.7
    podIPs:
    - ip: 10.244.3.7
    qosClass: BestEffort
    startTime: "2024-09-03T08:40:29Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-09-03T08:40:29Z"
    generateName: example-argocd-server-67b4b4667f-
    labels:
      app.kubernetes.io/name: example-argocd-server
      image.upgraded: 09032024-084024-UTC
      pod-template-hash: 67b4b4667f
    name: example-argocd-server-67b4b4667f-ckn6l
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: example-argocd-server-67b4b4667f
      uid: 521d75a5-6b2a-4df3-a429-2e1b8cadd9af
    resourceVersion: "1502573"
    uid: ac5a3c7e-85e0-46c3-99a7-c9978465c573
  spec:
    containers:
    - command:
      - argocd-server
      - --staticassets
      - /shared/app
      - --dex-server
      - https://example-argocd-dex-server.default.svc.cluster.local:5556
      - --repo-server
      - example-argocd-repo-server.default.svc.cluster.local:8081
      - --redis
      - example-argocd-redis.default.svc.cluster.local:6379
      - --loglevel
      - info
      - --logformat
      - text
      env:
      - name: REDIS_PASSWORD
        valueFrom:
          secretKeyRef:
            key: admin.password
            name: example-argocd-redis-initial-password
      image: quay.io/argoproj/argocd@sha256:a0ebfa7d419a1c78babc80fc77de093751d8a5fabffcaf3f7e81a4d55a23cc0d
      imagePullPolicy: Always
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 8080
          scheme: HTTP
        initialDelaySeconds: 3
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 1
      name: argocd-server
      ports:
      - containerPort: 8080
        protocol: TCP
      - containerPort: 8083
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 8080
          scheme: HTTP
        initialDelaySeconds: 3
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /app/config/ssh
        name: ssh-known-hosts
      - mountPath: /app/config/tls
        name: tls-certs
      - mountPath: /app/config/server/tls
        name: argocd-repo-server-tls
      - mountPath: /app/config/server/tls/redis
        name: argocd-operator-redis-tls
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-h7886
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: cluster2-worker
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: example-argocd-argocd-server
    serviceAccountName: example-argocd-argocd-server
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        name: argocd-ssh-known-hosts-cm
      name: ssh-known-hosts
    - configMap:
        defaultMode: 420
        name: argocd-tls-certs-cm
      name: tls-certs
    - name: argocd-repo-server-tls
      secret:
        defaultMode: 420
        optional: true
        secretName: argocd-repo-server-tls
    - name: argocd-operator-redis-tls
      secret:
        defaultMode: 420
        optional: true
        secretName: argocd-operator-redis-tls
    - name: kube-api-access-h7886
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:35:59Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-09-03T08:40:29Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:36:30Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:36:30Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-09-03T08:40:29Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://ff5ae60a5283196fd2adc845d0a34764efbe6decb71ec44195f05849bb3059b2
      image: sha256:c02afb94df602c1619c27c166c4fc5149c87717398745a8afdd58a1dcd1e9f4b
      imageID: quay.io/argoproj/argocd@sha256:a0ebfa7d419a1c78babc80fc77de093751d8a5fabffcaf3f7e81a4d55a23cc0d
      lastState:
        terminated:
          containerID: containerd://b098137ba77f92f3e24d8aa6f8f9a4c2cc35f240393228acd81a3d2b0e546f89
          exitCode: 255
          finishedAt: "2024-09-06T03:35:44Z"
          reason: Unknown
          startedAt: "2024-09-03T08:41:08Z"
      name: argocd-server
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2024-09-06T03:35:59Z"
    hostIP: 172.18.0.4
    hostIPs:
    - ip: 172.18.0.4
    phase: Running
    podIP: 10.244.2.4
    podIPs:
    - ip: 10.244.2.4
    qosClass: BestEffort
    startTime: "2024-09-03T08:40:29Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-08-25T14:51:51Z"
    generateName: ingress-7fff9b5bd7-
    labels:
      app: flask
      pod-template-hash: 7fff9b5bd7
    name: ingress-7fff9b5bd7-m72hh
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: ingress-7fff9b5bd7
      uid: df721070-d1d0-4b2a-9a32-85e3591cc873
    resourceVersion: "1502373"
    uid: ce367f24-c90c-4ec2-833c-00989b4e7cb8
  spec:
    containers:
    - image: palaymoundekar/flask:v1
      imagePullPolicy: IfNotPresent
      name: ingress
      ports:
      - containerPort: 80
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-d9bkv
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: cluster2-worker2
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-d9bkv
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:35:58Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-08-25T14:51:51Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:35:58Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:35:58Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-08-25T14:51:51Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://6cfc5ac0e425e50ac899cd5524069f5e269c4b06b86e85c10f7697049619a4b1
      image: docker.io/palaymoundekar/flask:v1
      imageID: docker.io/palaymoundekar/flask@sha256:0f0a36ef6d1d126c92cbe8c22705046a1ace8d3231000f3cacea1038ee7a3455
      lastState:
        terminated:
          containerID: containerd://85b386c50eba09738256f69c70c49e79e759e1187b3f17143c6cd65fcbe6235b
          exitCode: 255
          finishedAt: "2024-09-06T03:35:44Z"
          reason: Unknown
          startedAt: "2024-09-03T06:55:21Z"
      name: ingress
      ready: true
      restartCount: 13
      started: true
      state:
        running:
          startedAt: "2024-09-06T03:35:58Z"
    hostIP: 172.18.0.2
    hostIPs:
    - ip: 172.18.0.2
    phase: Running
    podIP: 10.244.3.4
    podIPs:
    - ip: 10.244.3.4
    qosClass: BestEffort
    startTime: "2024-08-25T14:51:51Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-09-02T11:36:41Z"
    generateName: nginx-deploy-6754bf4584-
    labels:
      env: demo
      name: nginx-deploy
      pod-template-hash: 6754bf4584
    name: nginx-deploy-6754bf4584-zdtp5
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: nginx-deploy-6754bf4584
      uid: cc57824c-1016-428e-9a7b-c0f8f0e8edaf
    resourceVersion: "1502800"
    uid: 99cb1ed2-5dab-453d-8c9f-8369f5e9abe5
  spec:
    containers:
    - image: nginx
      imagePullPolicy: Always
      name: nginx-deploy
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-6729j
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: cluster2-worker3
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-6729j
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:37:06Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-09-02T11:36:41Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:37:06Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:37:06Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-09-02T11:36:41Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://df359adad7fb90bc1851aaf267ddeed8332bd353935970fea6e0683d068124ba
      image: docker.io/library/nginx:latest
      imageID: docker.io/library/nginx@sha256:04ba374043ccd2fc5c593885c0eacddebabd5ca375f9323666f28dfd5a9710e3
      lastState:
        terminated:
          containerID: containerd://1ef5dec828e0e1415d356fd495384829e322d37073e5330bfbced3ba95e58061
          exitCode: 255
          finishedAt: "2024-09-06T03:35:44Z"
          reason: Unknown
          startedAt: "2024-09-03T06:55:23Z"
      name: nginx-deploy
      ready: true
      restartCount: 7
      started: true
      state:
        running:
          startedAt: "2024-09-06T03:37:06Z"
    hostIP: 172.18.0.5
    hostIPs:
    - ip: 172.18.0.5
    phase: Running
    podIP: 10.244.1.4
    podIPs:
    - ip: 10.244.1.4
    qosClass: BestEffort
    startTime: "2024-09-02T11:36:41Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-08-14T05:52:53Z"
    generateName: nginx-deployment-6cfb64b7c5-
    labels:
      app: nginx
      pod-template-hash: 6cfb64b7c5
    name: nginx-deployment-6cfb64b7c5-xlglg
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: nginx-deployment-6cfb64b7c5
      uid: 994510ff-d293-47b9-ab8a-9bdacf911b37
    resourceVersion: "1502661"
    uid: 0f8eb5d0-e52e-4114-ba70-15bf11294283
  spec:
    containers:
    - image: nginx
      imagePullPolicy: Always
      name: nginx
      ports:
      - containerPort: 80
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-bwqdw
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: cluster2-worker
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-bwqdw
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:36:46Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-08-14T05:52:53Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:36:46Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:36:46Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-08-14T05:52:53Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://6b9c69fa851af6460bebb74df140bfe5feac2cb7004aef59ba837e6fc8caba27
      image: docker.io/library/nginx:latest
      imageID: docker.io/library/nginx@sha256:04ba374043ccd2fc5c593885c0eacddebabd5ca375f9323666f28dfd5a9710e3
      lastState:
        terminated:
          containerID: containerd://b69ea101daad49b7750a82e8ee70838b0036f5b8356b9e2c7f7ad2a56584ac55
          exitCode: 255
          finishedAt: "2024-09-06T03:35:44Z"
          reason: Unknown
          startedAt: "2024-09-03T06:55:26Z"
      name: nginx
      ready: true
      restartCount: 17
      started: true
      state:
        running:
          startedAt: "2024-09-06T03:36:46Z"
    hostIP: 172.18.0.4
    hostIPs:
    - ip: 172.18.0.4
    phase: Running
    podIP: 10.244.2.7
    podIPs:
    - ip: 10.244.2.7
    qosClass: BestEffort
    startTime: "2024-08-14T05:52:53Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-08-14T05:54:14Z"
    generateName: nginx-deployment1-6cfb64b7c5-
    labels:
      app: nginx
      pod-template-hash: 6cfb64b7c5
    name: nginx-deployment1-6cfb64b7c5-ngzqh
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: nginx-deployment1-6cfb64b7c5
      uid: 318b7969-9dcb-43e5-91e9-86ed2081aab0
    resourceVersion: "1502766"
    uid: ff2045e3-19f8-4b3a-961c-485b59ed0664
  spec:
    containers:
    - image: nginx
      imagePullPolicy: Always
      name: nginx
      ports:
      - containerPort: 80
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-7lctz
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: cluster2-worker2
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-7lctz
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:37:03Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-08-14T05:54:14Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:37:03Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:37:03Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-08-14T05:54:14Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://10f5c3702dc3f56c80f44bf65dbd944ff73e98fa5b9449b206379874c393ed6f
      image: docker.io/library/nginx:latest
      imageID: docker.io/library/nginx@sha256:04ba374043ccd2fc5c593885c0eacddebabd5ca375f9323666f28dfd5a9710e3
      lastState:
        terminated:
          containerID: containerd://10c1bd333103691591f950fd4213599b33e5e6ca2a90eb987d601b8827206b85
          exitCode: 255
          finishedAt: "2024-09-06T03:35:44Z"
          reason: Unknown
          startedAt: "2024-09-03T06:55:23Z"
      name: nginx
      ready: true
      restartCount: 17
      started: true
      state:
        running:
          startedAt: "2024-09-06T03:37:02Z"
    hostIP: 172.18.0.2
    hostIPs:
    - ip: 172.18.0.2
    phase: Running
    podIP: 10.244.3.2
    podIPs:
    - ip: 10.244.3.2
    qosClass: BestEffort
    startTime: "2024-08-14T05:54:14Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-08-09T11:31:41Z"
    generateName: spring-boot-app-7689fc7b54-
    labels:
      app: spring-boot-app
      pod-template-hash: 7689fc7b54
    name: spring-boot-app-7689fc7b54-464zp
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: spring-boot-app-7689fc7b54
      uid: 42b0e09f-cc06-4209-ad97-0d540484b238
    resourceVersion: "1502364"
    uid: 7b6ee0ae-1cb7-47b0-9c25-01d617502a5b
  spec:
    containers:
    - image: moundekarpalay/ultimate-cicd:48
      imagePullPolicy: IfNotPresent
      name: spring-boot-app
      ports:
      - containerPort: 8080
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-8qhkr
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: cluster2-worker
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-8qhkr
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:35:58Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-08-09T11:31:41Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:35:58Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:35:58Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-08-09T11:31:41Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://652cf59b52ebb9a6a0f4374e564447d1478bddad30da88709180e62b29e60a92
      image: docker.io/moundekarpalay/ultimate-cicd:48
      imageID: docker.io/moundekarpalay/ultimate-cicd@sha256:374dd0083f9008fb3d79dbace7231af74825745b97a925f1919e38ef8df77665
      lastState:
        terminated:
          containerID: containerd://bb5f18a5a9302652945f94d96177451b78510aa48fb49d988d9cd57d4cdcce11
          exitCode: 255
          finishedAt: "2024-09-06T03:35:44Z"
          reason: Unknown
          startedAt: "2024-09-03T06:55:21Z"
      name: spring-boot-app
      ready: true
      restartCount: 22
      started: true
      state:
        running:
          startedAt: "2024-09-06T03:35:58Z"
    hostIP: 172.18.0.4
    hostIPs:
    - ip: 172.18.0.4
    phase: Running
    podIP: 10.244.2.3
    podIPs:
    - ip: 10.244.2.3
    qosClass: BestEffort
    startTime: "2024-08-09T11:31:41Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-08-09T12:55:41Z"
    generateName: spring-boot-app-7689fc7b54-
    labels:
      app: spring-boot-app
      pod-template-hash: 7689fc7b54
    name: spring-boot-app-7689fc7b54-dgpjx
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: spring-boot-app-7689fc7b54
      uid: 42b0e09f-cc06-4209-ad97-0d540484b238
    resourceVersion: "1502393"
    uid: eba48a9c-8071-4a4a-880a-9077b3f18dab
  spec:
    containers:
    - image: moundekarpalay/ultimate-cicd:48
      imagePullPolicy: IfNotPresent
      name: spring-boot-app
      ports:
      - containerPort: 8080
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-clgpl
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: cluster2-worker3
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-clgpl
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:35:59Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-08-09T12:55:41Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:35:59Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:35:59Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-08-09T12:55:41Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://cd4c01551a019fb57b9adc3c42692fcd7fefe1a2d417d75cf539d7365012c71b
      image: docker.io/moundekarpalay/ultimate-cicd:48
      imageID: docker.io/moundekarpalay/ultimate-cicd@sha256:374dd0083f9008fb3d79dbace7231af74825745b97a925f1919e38ef8df77665
      lastState:
        terminated:
          containerID: containerd://ad141c9d2f7e1864e45258eed6878709eaf5386d815e35e1e540014ee6114377
          exitCode: 255
          finishedAt: "2024-09-06T03:35:44Z"
          reason: Unknown
          startedAt: "2024-09-03T06:55:21Z"
      name: spring-boot-app
      ready: true
      restartCount: 21
      started: true
      state:
        running:
          startedAt: "2024-09-06T03:35:58Z"
    hostIP: 172.18.0.5
    hostIPs:
    - ip: 172.18.0.5
    phase: Running
    podIP: 10.244.1.2
    podIPs:
    - ip: 10.244.1.2
    qosClass: BestEffort
    startTime: "2024-08-09T12:55:41Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-08-09T12:37:37Z"
    generateName: spring-boot-app-7689fc7b54-
    labels:
      app: spring-boot-app
      pod-template-hash: 7689fc7b54
    name: spring-boot-app-7689fc7b54-l64gn
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: spring-boot-app-7689fc7b54
      uid: 42b0e09f-cc06-4209-ad97-0d540484b238
    resourceVersion: "1502374"
    uid: f5a6970a-8046-4306-8cd0-331340d10a54
  spec:
    containers:
    - image: moundekarpalay/ultimate-cicd:48
      imagePullPolicy: IfNotPresent
      name: spring-boot-app
      ports:
      - containerPort: 8080
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-hpkmh
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: cluster2-worker2
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-hpkmh
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:35:58Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-08-09T12:37:37Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:35:58Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:35:58Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-08-09T12:37:37Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://1c8b1e0c60a1e0abe3c512797b0cb501ebbf91a2b31f78548dd77c8d46806ce9
      image: docker.io/moundekarpalay/ultimate-cicd:48
      imageID: docker.io/moundekarpalay/ultimate-cicd@sha256:374dd0083f9008fb3d79dbace7231af74825745b97a925f1919e38ef8df77665
      lastState:
        terminated:
          containerID: containerd://803bfbb7d795f662576dc40b458411ba843a469faea53fc60965788ee32b7ed0
          exitCode: 255
          finishedAt: "2024-09-06T03:35:44Z"
          reason: Unknown
          startedAt: "2024-09-03T06:55:21Z"
      name: spring-boot-app
      ready: true
      restartCount: 21
      started: true
      state:
        running:
          startedAt: "2024-09-06T03:35:58Z"
    hostIP: 172.18.0.2
    hostIPs:
    - ip: 172.18.0.2
    phase: Running
    podIP: 10.244.3.3
    podIPs:
    - ip: 10.244.3.3
    qosClass: BestEffort
    startTime: "2024-08-09T12:37:37Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-09-02T11:45:20Z"
    generateName: verdaccio-deploy-568cd4d66c-
    labels:
      env: dev
      name: verdaccio-deploy
      pod-template-hash: 568cd4d66c
    name: verdaccio-deploy-568cd4d66c-psmdf
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: verdaccio-deploy-568cd4d66c
      uid: 83228910-c50a-4643-b1c1-8ea35acc5e8e
    resourceVersion: "1502420"
    uid: 0a5d8381-2f92-4105-9837-84d6cfc70bdd
  spec:
    containers:
    - image: verdaccio/verdaccio
      imagePullPolicy: Always
      name: verdaccio-deploy
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-nrc2c
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: cluster2-worker
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-nrc2c
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:36:02Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-09-02T11:45:20Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:36:02Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:36:02Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-09-02T11:45:20Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://fb892473b7e9d511d584cae2c3ebbda6d80a5f84e07e70bad3d1c6a60b2e90e5
      image: docker.io/verdaccio/verdaccio:latest
      imageID: docker.io/verdaccio/verdaccio@sha256:d145250ed5b50fa25d9e7e358d969e6b2ed484e7aede2882eb7ece65b458c0d4
      lastState:
        terminated:
          containerID: containerd://8ab9ad38422bd52a7fb887494b1408e0bb7bd42304355a2bf6cb9f524f25663b
          exitCode: 255
          finishedAt: "2024-09-06T03:35:44Z"
          reason: Unknown
          startedAt: "2024-09-03T06:55:23Z"
      name: verdaccio-deploy
      ready: true
      restartCount: 7
      started: true
      state:
        running:
          startedAt: "2024-09-06T03:36:02Z"
    hostIP: 172.18.0.4
    hostIPs:
    - ip: 172.18.0.4
    phase: Running
    podIP: 10.244.2.5
    podIPs:
    - ip: 10.244.2.5
    qosClass: BestEffort
    startTime: "2024-09-02T11:45:20Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-08-25T15:02:21Z"
    generateName: ingress-nginx-admission-create-
    labels:
      app.kubernetes.io/component: admission-webhook
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.11.2
      batch.kubernetes.io/controller-uid: ee65e813-3811-4656-9be3-b065ebd40c24
      batch.kubernetes.io/job-name: ingress-nginx-admission-create
      controller-uid: ee65e813-3811-4656-9be3-b065ebd40c24
      job-name: ingress-nginx-admission-create
    name: ingress-nginx-admission-create-kb7sh
    namespace: ingress-nginx
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: ingress-nginx-admission-create
      uid: ee65e813-3811-4656-9be3-b065ebd40c24
    resourceVersion: "1502257"
    uid: 437391ea-13b3-4209-8c02-160fe4bd2cb1
  spec:
    containers:
    - args:
      - create
      - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
      - --namespace=$(POD_NAMESPACE)
      - --secret-name=ingress-nginx-admission
      env:
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: registry.k8s.io/ingress-nginx/kube-webhook-certgen:v1.4.3@sha256:a320a50cc91bd15fd2d6fa6de58bd98c1bd64b9a6f926ce23a600d87043455a3
      imagePullPolicy: IfNotPresent
      name: create
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        runAsUser: 65532
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-w2lzg
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: cluster2-worker3
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: OnFailure
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: ingress-nginx-admission
    serviceAccountName: ingress-nginx-admission
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-w2lzg
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-08-25T15:02:59Z"
      status: "False"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-08-25T15:02:21Z"
      reason: PodCompleted
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-08-25T15:02:21Z"
      reason: PodCompleted
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-08-25T15:02:21Z"
      reason: PodCompleted
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-08-25T15:02:21Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://650586cd10747cd0160589730db592bfa274dfc8215ba47700015036596edd25
      image: sha256:ce263a8653f9cdabdabaf36ae064b3e52b5240e6fac90663ad3b8f3a9bcef242
      imageID: registry.k8s.io/ingress-nginx/kube-webhook-certgen@sha256:a320a50cc91bd15fd2d6fa6de58bd98c1bd64b9a6f926ce23a600d87043455a3
      lastState: {}
      name: create
      ready: false
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://650586cd10747cd0160589730db592bfa274dfc8215ba47700015036596edd25
          exitCode: 0
          finishedAt: "2024-08-25T15:02:57Z"
          reason: Completed
          startedAt: "2024-08-25T15:02:57Z"
    hostIP: 172.18.0.5
    hostIPs:
    - ip: 172.18.0.5
    phase: Succeeded
    qosClass: BestEffort
    startTime: "2024-08-25T15:02:21Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-08-25T15:02:21Z"
    generateName: ingress-nginx-admission-patch-
    labels:
      app.kubernetes.io/component: admission-webhook
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.11.2
      batch.kubernetes.io/controller-uid: 604fc6d0-77ca-48d2-9d86-dbbd4cabbb05
      batch.kubernetes.io/job-name: ingress-nginx-admission-patch
      controller-uid: 604fc6d0-77ca-48d2-9d86-dbbd4cabbb05
      job-name: ingress-nginx-admission-patch
    name: ingress-nginx-admission-patch-b2tf7
    namespace: ingress-nginx
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: ingress-nginx-admission-patch
      uid: 604fc6d0-77ca-48d2-9d86-dbbd4cabbb05
    resourceVersion: "1502243"
    uid: e221060a-1cd7-448b-a95b-10436e07ab48
  spec:
    containers:
    - args:
      - patch
      - --webhook-name=ingress-nginx-admission
      - --namespace=$(POD_NAMESPACE)
      - --patch-mutating=false
      - --secret-name=ingress-nginx-admission
      - --patch-failure-policy=Fail
      env:
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: registry.k8s.io/ingress-nginx/kube-webhook-certgen:v1.4.3@sha256:a320a50cc91bd15fd2d6fa6de58bd98c1bd64b9a6f926ce23a600d87043455a3
      imagePullPolicy: IfNotPresent
      name: patch
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        runAsUser: 65532
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-cbvlr
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: cluster2-worker
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: OnFailure
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: ingress-nginx-admission
    serviceAccountName: ingress-nginx-admission
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-cbvlr
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-08-25T15:03:01Z"
      status: "False"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-08-25T15:02:21Z"
      reason: PodCompleted
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-08-25T15:02:21Z"
      reason: PodCompleted
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-08-25T15:02:21Z"
      reason: PodCompleted
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-08-25T15:02:21Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://e0745c9872ed3684bad2a26727d944b5080a0eb4980d5acf9e629bffdab26a62
      image: sha256:ce263a8653f9cdabdabaf36ae064b3e52b5240e6fac90663ad3b8f3a9bcef242
      imageID: registry.k8s.io/ingress-nginx/kube-webhook-certgen@sha256:a320a50cc91bd15fd2d6fa6de58bd98c1bd64b9a6f926ce23a600d87043455a3
      lastState: {}
      name: patch
      ready: false
      restartCount: 2
      started: false
      state:
        terminated:
          containerID: containerd://e0745c9872ed3684bad2a26727d944b5080a0eb4980d5acf9e629bffdab26a62
          exitCode: 0
          finishedAt: "2024-08-25T15:02:59Z"
          reason: Completed
          startedAt: "2024-08-25T15:02:59Z"
    hostIP: 172.18.0.4
    hostIPs:
    - ip: 172.18.0.4
    phase: Succeeded
    qosClass: BestEffort
    startTime: "2024-08-25T15:02:21Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-08-25T15:02:21Z"
    generateName: ingress-nginx-controller-7d4db76476-
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.11.2
      pod-template-hash: 7d4db76476
    name: ingress-nginx-controller-7d4db76476-s2tg8
    namespace: ingress-nginx
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: ingress-nginx-controller-7d4db76476
      uid: e7adcf1a-2ea5-48b5-be9a-5b5e8c3516ab
    resourceVersion: "1502608"
    uid: 4dd5350d-372a-4a3b-94e9-17fd132f4efd
  spec:
    containers:
    - args:
      - /nginx-ingress-controller
      - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
      - --election-id=ingress-nginx-leader
      - --controller-class=k8s.io/ingress-nginx
      - --ingress-class=nginx
      - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
      - --validating-webhook=:8443
      - --validating-webhook-certificate=/usr/local/certificates/cert
      - --validating-webhook-key=/usr/local/certificates/key
      - --enable-metrics=false
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: LD_PRELOAD
        value: /usr/local/lib/libmimalloc.so
      image: registry.k8s.io/ingress-nginx/controller:v1.11.2@sha256:d5f8217feeac4887cb1ed21f27c2674e58be06bd8f5184cacea2a69abaf78dce
      imagePullPolicy: IfNotPresent
      lifecycle:
        preStop:
          exec:
            command:
            - /wait-shutdown
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: controller
      ports:
      - containerPort: 80
        name: http
        protocol: TCP
      - containerPort: 443
        name: https
        protocol: TCP
      - containerPort: 8443
        name: webhook
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        requests:
          cpu: 100m
          memory: 90Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - ALL
        readOnlyRootFilesystem: false
        runAsNonRoot: true
        runAsUser: 101
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /usr/local/certificates/
        name: webhook-cert
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-484s7
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: cluster2-worker3
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: ingress-nginx
    serviceAccountName: ingress-nginx
    terminationGracePeriodSeconds: 300
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: webhook-cert
      secret:
        defaultMode: 420
        secretName: ingress-nginx-admission
    - name: kube-api-access-484s7
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:35:58Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-08-25T15:02:21Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:36:37Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:36:37Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-08-25T15:02:21Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://f095e6af60f672a94998ba719f0e0fcd55be974e1d4d227c1f90c5d2000dd4cf
      image: sha256:a80c8fd6e52292d38d4e58453f310d612da59d802a3b62f4b88a21c50178f7ab
      imageID: registry.k8s.io/ingress-nginx/controller@sha256:d5f8217feeac4887cb1ed21f27c2674e58be06bd8f5184cacea2a69abaf78dce
      lastState:
        terminated:
          containerID: containerd://dfe2eaeb4ee5bf73753e866337b7666df53b90c193121a9c9ff91e9194254a2d
          exitCode: 255
          finishedAt: "2024-09-06T03:35:44Z"
          reason: Unknown
          startedAt: "2024-09-03T06:55:21Z"
      name: controller
      ready: true
      restartCount: 13
      started: true
      state:
        running:
          startedAt: "2024-09-06T03:35:58Z"
    hostIP: 172.18.0.5
    hostIPs:
    - ip: 172.18.0.5
    phase: Running
    podIP: 10.244.1.3
    podIPs:
    - ip: 10.244.1.3
    qosClass: Burstable
    startTime: "2024-08-25T15:02:21Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-08-09T10:45:50Z"
    generateName: coredns-7db6d8ff4d-
    labels:
      k8s-app: kube-dns
      pod-template-hash: 7db6d8ff4d
    name: coredns-7db6d8ff4d-dphfg
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: coredns-7db6d8ff4d
      uid: 5970ae22-4704-4a5e-9d78-d1cf8dbc39b7
    resourceVersion: "1502602"
    uid: 59769898-2548-4e36-8ed6-5e60df8b93df
  spec:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: k8s-app
                operator: In
                values:
                - kube-dns
            topologyKey: kubernetes.io/hostname
          weight: 100
    containers:
    - args:
      - -conf
      - /etc/coredns/Corefile
      image: registry.k8s.io/coredns/coredns:v1.11.1
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /health
          port: 8080
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: coredns
      ports:
      - containerPort: 53
        name: dns
        protocol: UDP
      - containerPort: 53
        name: dns-tcp
        protocol: TCP
      - containerPort: 9153
        name: metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /ready
          port: 8181
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          memory: 170Mi
        requests:
          cpu: 100m
          memory: 70Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - ALL
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/coredns
        name: config-volume
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-6wtn6
        readOnly: true
    dnsPolicy: Default
    enableServiceLinks: true
    nodeName: cluster2-control-plane
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: coredns
    serviceAccountName: coredns
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoSchedule
      key: node-role.kubernetes.io/control-plane
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        items:
        - key: Corefile
          path: Corefile
        name: coredns
      name: config-volume
    - name: kube-api-access-6wtn6
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:35:57Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-08-09T10:45:53Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:36:36Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:36:36Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-08-09T10:45:53Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://91697a9b15a8df4db8eec755e6314d6e9fc26e26b3e52aace2bc225e3ad8a519
      image: registry.k8s.io/coredns/coredns:v1.11.1
      imageID: sha256:cbb01a7bd410dc08ba382018ab909a674fb0e48687f0c00797ed5bc34fcc6bb4
      lastState:
        terminated:
          containerID: containerd://09c482f00475317541294d683209fc20961f394d0e12329b4ed9146a3b42fdf5
          exitCode: 255
          finishedAt: "2024-09-06T03:35:45Z"
          reason: Unknown
          startedAt: "2024-09-03T06:55:21Z"
      name: coredns
      ready: true
      restartCount: 22
      started: true
      state:
        running:
          startedAt: "2024-09-06T03:35:56Z"
    hostIP: 172.18.0.3
    hostIPs:
    - ip: 172.18.0.3
    phase: Running
    podIP: 10.244.0.2
    podIPs:
    - ip: 10.244.0.2
    qosClass: Burstable
    startTime: "2024-08-09T10:45:53Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-08-09T10:45:50Z"
    generateName: coredns-7db6d8ff4d-
    labels:
      k8s-app: kube-dns
      pod-template-hash: 7db6d8ff4d
    name: coredns-7db6d8ff4d-q4jn9
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: coredns-7db6d8ff4d
      uid: 5970ae22-4704-4a5e-9d78-d1cf8dbc39b7
    resourceVersion: "1502568"
    uid: edaef7cd-1bfa-4309-b2f9-950cb6115a36
  spec:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: k8s-app
                operator: In
                values:
                - kube-dns
            topologyKey: kubernetes.io/hostname
          weight: 100
    containers:
    - args:
      - -conf
      - /etc/coredns/Corefile
      image: registry.k8s.io/coredns/coredns:v1.11.1
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /health
          port: 8080
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: coredns
      ports:
      - containerPort: 53
        name: dns
        protocol: UDP
      - containerPort: 53
        name: dns-tcp
        protocol: TCP
      - containerPort: 9153
        name: metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /ready
          port: 8181
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          memory: 170Mi
        requests:
          cpu: 100m
          memory: 70Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - ALL
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/coredns
        name: config-volume
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-5mqb2
        readOnly: true
    dnsPolicy: Default
    enableServiceLinks: true
    nodeName: cluster2-control-plane
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: coredns
    serviceAccountName: coredns
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoSchedule
      key: node-role.kubernetes.io/control-plane
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        items:
        - key: Corefile
          path: Corefile
        name: coredns
      name: config-volume
    - name: kube-api-access-5mqb2
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:35:58Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-08-09T10:45:53Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:36:30Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:36:30Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-08-09T10:45:53Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://35197380f032c7cc5ae8e0956b5a0408561222ae1e26cf448593755269d19e40
      image: registry.k8s.io/coredns/coredns:v1.11.1
      imageID: sha256:cbb01a7bd410dc08ba382018ab909a674fb0e48687f0c00797ed5bc34fcc6bb4
      lastState:
        terminated:
          containerID: containerd://72c4e757a405cdfaebc04e20a132a6e272335c2a7b31a75b47092bdcff8af559
          exitCode: 255
          finishedAt: "2024-09-06T03:35:45Z"
          reason: Unknown
          startedAt: "2024-09-03T06:55:21Z"
      name: coredns
      ready: true
      restartCount: 22
      started: true
      state:
        running:
          startedAt: "2024-09-06T03:35:57Z"
    hostIP: 172.18.0.3
    hostIPs:
    - ip: 172.18.0.3
    phase: Running
    podIP: 10.244.0.3
    podIPs:
    - ip: 10.244.0.3
    qosClass: Burstable
    startTime: "2024-08-09T10:45:53Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubeadm.kubernetes.io/etcd.advertise-client-urls: https://172.18.0.3:2379
      kubernetes.io/config.hash: ed8d421874726deb7c5b0d63709a79b1
      kubernetes.io/config.mirror: ed8d421874726deb7c5b0d63709a79b1
      kubernetes.io/config.seen: "2024-09-06T03:35:47.744539964Z"
      kubernetes.io/config.source: file
    creationTimestamp: "2024-09-06T03:35:54Z"
    labels:
      component: etcd
      tier: control-plane
    name: etcd-cluster2-control-plane
    namespace: kube-system
    ownerReferences:
    - apiVersion: v1
      controller: true
      kind: Node
      name: cluster2-control-plane
      uid: ed6403d9-aab5-4814-83a4-9e5ddc3155ec
    resourceVersion: "1502422"
    uid: b4ed03a9-0416-4727-a885-68e180c67ccf
  spec:
    containers:
    - command:
      - etcd
      - --advertise-client-urls=https://172.18.0.3:2379
      - --cert-file=/etc/kubernetes/pki/etcd/server.crt
      - --client-cert-auth=true
      - --data-dir=/var/lib/etcd
      - --experimental-initial-corrupt-check=true
      - --experimental-watch-progress-notify-interval=5s
      - --initial-advertise-peer-urls=https://172.18.0.3:2380
      - --initial-cluster=cluster2-control-plane=https://172.18.0.3:2380
      - --key-file=/etc/kubernetes/pki/etcd/server.key
      - --listen-client-urls=https://127.0.0.1:2379,https://172.18.0.3:2379
      - --listen-metrics-urls=http://127.0.0.1:2381
      - --listen-peer-urls=https://172.18.0.3:2380
      - --name=cluster2-control-plane
      - --peer-cert-file=/etc/kubernetes/pki/etcd/peer.crt
      - --peer-client-cert-auth=true
      - --peer-key-file=/etc/kubernetes/pki/etcd/peer.key
      - --peer-trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt
      - --snapshot-count=10000
      - --trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt
      image: registry.k8s.io/etcd:3.5.12-0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 8
        httpGet:
          host: 127.0.0.1
          path: /health?exclude=NOSPACE&serializable=true
          port: 2381
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      name: etcd
      resources:
        requests:
          cpu: 100m
          memory: 100Mi
      startupProbe:
        failureThreshold: 24
        httpGet:
          host: 127.0.0.1
          path: /health?serializable=false
          port: 2381
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/etcd
        name: etcd-data
      - mountPath: /etc/kubernetes/pki/etcd
        name: etcd-certs
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: cluster2-control-plane
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      seccompProfile:
        type: RuntimeDefault
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    volumes:
    - hostPath:
        path: /etc/kubernetes/pki/etcd
        type: DirectoryOrCreate
      name: etcd-certs
    - hostPath:
        path: /var/lib/etcd
        type: DirectoryOrCreate
      name: etcd-data
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:35:49Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:35:47Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:36:04Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:36:04Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:35:47Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://5d37c38d0658ffcdb22d56de5834f01d7dfa4696fe7439ec315799ee4b8838c8
      image: registry.k8s.io/etcd:3.5.12-0
      imageID: sha256:3861cfcd7c04ccac1f062788eca39487248527ef0c0cfd477a83d7691a75a899
      lastState: {}
      name: etcd
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-09-06T03:35:48Z"
    hostIP: 172.18.0.3
    hostIPs:
    - ip: 172.18.0.3
    phase: Running
    podIP: 172.18.0.3
    podIPs:
    - ip: 172.18.0.3
    qosClass: Burstable
    startTime: "2024-09-06T03:35:47Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-08-09T10:45:54Z"
    generateName: kindnet-
    labels:
      app: kindnet
      controller-revision-hash: 67c57c48f5
      k8s-app: kindnet
      pod-template-generation: "1"
      tier: node
    name: kindnet-j27vq
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: kindnet
      uid: 97ae595e-be70-4845-810a-a625dd57df4b
    resourceVersion: "1502395"
    uid: 2b97b409-ce0c-4021-8c76-a5e0f736fc30
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - cluster2-worker3
    containers:
    - env:
      - name: HOST_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.hostIP
      - name: POD_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.podIP
      - name: POD_SUBNET
        value: 10.244.0.0/16
      - name: CONTROL_PLANE_ENDPOINT
        value: cluster2-control-plane:6443
      image: docker.io/kindest/kindnetd:v20240202-8f1494ea
      imagePullPolicy: IfNotPresent
      name: kindnet-cni
      resources:
        limits:
          cpu: 100m
          memory: 50Mi
        requests:
          cpu: 100m
          memory: 50Mi
      securityContext:
        capabilities:
          add:
          - NET_RAW
          - NET_ADMIN
        privileged: false
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/cni/net.d
        name: cni-cfg
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-ntfl2
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: cluster2-worker3
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kindnet
    serviceAccountName: kindnet
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /etc/cni/net.d
        type: ""
      name: cni-cfg
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - name: kube-api-access-ntfl2
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:35:59Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-08-09T10:45:56Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:35:59Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:35:59Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-08-09T10:45:54Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://4f4ab5e91be0c07e27263da058e7953c340db4d4dfb81d781962781dc500ff2c
      image: docker.io/kindest/kindnetd:v20240202-8f1494ea
      imageID: sha256:4950bb10b3f87e8d4a8f772a0d8934625cac4ccfa3675fea34cad0dab83fd5a5
      lastState:
        terminated:
          containerID: containerd://7c4e835e0ca6ec2488ccd49c715f518cc469eed79e109c93376055dd185dd375
          exitCode: 255
          finishedAt: "2024-09-06T03:35:44Z"
          reason: Unknown
          startedAt: "2024-09-03T06:55:22Z"
      name: kindnet-cni
      ready: true
      restartCount: 22
      started: true
      state:
        running:
          startedAt: "2024-09-06T03:35:59Z"
    hostIP: 172.18.0.5
    hostIPs:
    - ip: 172.18.0.5
    phase: Running
    podIP: 172.18.0.5
    podIPs:
    - ip: 172.18.0.5
    qosClass: Guaranteed
    startTime: "2024-08-09T10:45:56Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-08-09T10:45:55Z"
    generateName: kindnet-
    labels:
      app: kindnet
      controller-revision-hash: 67c57c48f5
      k8s-app: kindnet
      pod-template-generation: "1"
      tier: node
    name: kindnet-ppj4m
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: kindnet
      uid: 97ae595e-be70-4845-810a-a625dd57df4b
    resourceVersion: "1502394"
    uid: ef0fe719-44d4-4da1-b112-efb570840447
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - cluster2-worker
    containers:
    - env:
      - name: HOST_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.hostIP
      - name: POD_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.podIP
      - name: POD_SUBNET
        value: 10.244.0.0/16
      - name: CONTROL_PLANE_ENDPOINT
        value: cluster2-control-plane:6443
      image: docker.io/kindest/kindnetd:v20240202-8f1494ea
      imagePullPolicy: IfNotPresent
      name: kindnet-cni
      resources:
        limits:
          cpu: 100m
          memory: 50Mi
        requests:
          cpu: 100m
          memory: 50Mi
      securityContext:
        capabilities:
          add:
          - NET_RAW
          - NET_ADMIN
        privileged: false
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/cni/net.d
        name: cni-cfg
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-jcxf7
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: cluster2-worker
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kindnet
    serviceAccountName: kindnet
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /etc/cni/net.d
        type: ""
      name: cni-cfg
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - name: kube-api-access-jcxf7
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:35:59Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-08-09T10:45:56Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:35:59Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:35:59Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-08-09T10:45:55Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://43cf06c20af0456bd0e2169a410604e0359f37426ee8c3caad0b6eaabf1c2d6d
      image: docker.io/kindest/kindnetd:v20240202-8f1494ea
      imageID: sha256:4950bb10b3f87e8d4a8f772a0d8934625cac4ccfa3675fea34cad0dab83fd5a5
      lastState:
        terminated:
          containerID: containerd://ddc2c17fdfb2950f7727133a3be09cb2558bcbcb1529adfd02a3f039f63f7985
          exitCode: 255
          finishedAt: "2024-09-06T03:35:44Z"
          reason: Unknown
          startedAt: "2024-09-03T06:55:22Z"
      name: kindnet-cni
      ready: true
      restartCount: 22
      started: true
      state:
        running:
          startedAt: "2024-09-06T03:35:59Z"
    hostIP: 172.18.0.4
    hostIPs:
    - ip: 172.18.0.4
    phase: Running
    podIP: 172.18.0.4
    podIPs:
    - ip: 172.18.0.4
    qosClass: Guaranteed
    startTime: "2024-08-09T10:45:56Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-08-09T10:45:56Z"
    generateName: kindnet-
    labels:
      app: kindnet
      controller-revision-hash: 67c57c48f5
      k8s-app: kindnet
      pod-template-generation: "1"
      tier: node
    name: kindnet-xgbzd
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: kindnet
      uid: 97ae595e-be70-4845-810a-a625dd57df4b
    resourceVersion: "1502399"
    uid: 19fb7745-141a-4992-b4e3-e1a3affe5c0f
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - cluster2-worker2
    containers:
    - env:
      - name: HOST_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.hostIP
      - name: POD_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.podIP
      - name: POD_SUBNET
        value: 10.244.0.0/16
      - name: CONTROL_PLANE_ENDPOINT
        value: cluster2-control-plane:6443
      image: docker.io/kindest/kindnetd:v20240202-8f1494ea
      imagePullPolicy: IfNotPresent
      name: kindnet-cni
      resources:
        limits:
          cpu: 100m
          memory: 50Mi
        requests:
          cpu: 100m
          memory: 50Mi
      securityContext:
        capabilities:
          add:
          - NET_RAW
          - NET_ADMIN
        privileged: false
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/cni/net.d
        name: cni-cfg
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-wtkb2
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: cluster2-worker2
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kindnet
    serviceAccountName: kindnet
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /etc/cni/net.d
        type: ""
      name: cni-cfg
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - name: kube-api-access-wtkb2
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:36:00Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-08-09T10:45:57Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:36:00Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:36:00Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-08-09T10:45:56Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://557b3126bc0ea291c1d2a11a2cc4f723f7ad8cab903ecb737731564ec4a95bf6
      image: docker.io/kindest/kindnetd:v20240202-8f1494ea
      imageID: sha256:4950bb10b3f87e8d4a8f772a0d8934625cac4ccfa3675fea34cad0dab83fd5a5
      lastState:
        terminated:
          containerID: containerd://0f8d33573b531ae909c70acf5498b72575817f5597a6c8bb60a08801a32575ec
          exitCode: 255
          finishedAt: "2024-09-06T03:35:44Z"
          reason: Unknown
          startedAt: "2024-09-03T06:55:22Z"
      name: kindnet-cni
      ready: true
      restartCount: 22
      started: true
      state:
        running:
          startedAt: "2024-09-06T03:35:59Z"
    hostIP: 172.18.0.2
    hostIPs:
    - ip: 172.18.0.2
    phase: Running
    podIP: 172.18.0.2
    podIPs:
    - ip: 172.18.0.2
    qosClass: Guaranteed
    startTime: "2024-08-09T10:45:57Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-08-09T10:45:50Z"
    generateName: kindnet-
    labels:
      app: kindnet
      controller-revision-hash: 67c57c48f5
      k8s-app: kindnet
      pod-template-generation: "1"
      tier: node
    name: kindnet-z8cs4
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: kindnet
      uid: 97ae595e-be70-4845-810a-a625dd57df4b
    resourceVersion: "1502383"
    uid: 3594f58a-182d-44ef-9753-a1e20430711c
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - cluster2-control-plane
    containers:
    - env:
      - name: HOST_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.hostIP
      - name: POD_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.podIP
      - name: POD_SUBNET
        value: 10.244.0.0/16
      - name: CONTROL_PLANE_ENDPOINT
        value: cluster2-control-plane:6443
      image: docker.io/kindest/kindnetd:v20240202-8f1494ea
      imagePullPolicy: IfNotPresent
      name: kindnet-cni
      resources:
        limits:
          cpu: 100m
          memory: 50Mi
        requests:
          cpu: 100m
          memory: 50Mi
      securityContext:
        capabilities:
          add:
          - NET_RAW
          - NET_ADMIN
        privileged: false
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/cni/net.d
        name: cni-cfg
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-zdfp2
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: cluster2-control-plane
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kindnet
    serviceAccountName: kindnet
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /etc/cni/net.d
        type: ""
      name: cni-cfg
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - name: kube-api-access-zdfp2
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:35:59Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-08-09T10:45:50Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:35:59Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:35:59Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-08-09T10:45:50Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://2610f6d165e6e6cabe561c4c7ecdbda757f6cb0a9cfb7e7b46cdcc69d29986e7
      image: docker.io/kindest/kindnetd:v20240202-8f1494ea
      imageID: sha256:4950bb10b3f87e8d4a8f772a0d8934625cac4ccfa3675fea34cad0dab83fd5a5
      lastState:
        terminated:
          containerID: containerd://4cb973381f7faf67addbb0e3b75661b47ca7e4979db5ace39b36ce95f6779a88
          exitCode: 255
          finishedAt: "2024-09-06T03:35:45Z"
          reason: Unknown
          startedAt: "2024-09-03T06:55:22Z"
      name: kindnet-cni
      ready: true
      restartCount: 22
      started: true
      state:
        running:
          startedAt: "2024-09-06T03:35:58Z"
    hostIP: 172.18.0.3
    hostIPs:
    - ip: 172.18.0.3
    phase: Running
    podIP: 172.18.0.3
    podIPs:
    - ip: 172.18.0.3
    qosClass: Guaranteed
    startTime: "2024-08-09T10:45:50Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubeadm.kubernetes.io/kube-apiserver.advertise-address.endpoint: 172.18.0.3:6443
      kubernetes.io/config.hash: 4217eb9a0f36ce5b8e88897afc18c83c
      kubernetes.io/config.mirror: 4217eb9a0f36ce5b8e88897afc18c83c
      kubernetes.io/config.seen: "2024-09-06T03:35:47.744541697Z"
      kubernetes.io/config.source: file
    creationTimestamp: "2024-09-06T03:35:54Z"
    labels:
      component: kube-apiserver
      tier: control-plane
    name: kube-apiserver-cluster2-control-plane
    namespace: kube-system
    ownerReferences:
    - apiVersion: v1
      controller: true
      kind: Node
      name: cluster2-control-plane
      uid: ed6403d9-aab5-4814-83a4-9e5ddc3155ec
    resourceVersion: "1502432"
    uid: 823cb5d6-4d14-429b-b83d-ef6359f6b25c
  spec:
    containers:
    - command:
      - kube-apiserver
      - --advertise-address=172.18.0.3
      - --allow-privileged=true
      - --authorization-mode=Node,RBAC
      - --client-ca-file=/etc/kubernetes/pki/ca.crt
      - --enable-admission-plugins=NodeRestriction
      - --enable-bootstrap-token-auth=true
      - --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt
      - --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt
      - --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key
      - --etcd-servers=https://127.0.0.1:2379
      - --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt
      - --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key
      - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
      - --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt
      - --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key
      - --requestheader-allowed-names=front-proxy-client
      - --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt
      - --requestheader-extra-headers-prefix=X-Remote-Extra-
      - --requestheader-group-headers=X-Remote-Group
      - --requestheader-username-headers=X-Remote-User
      - --runtime-config=
      - --secure-port=6443
      - --service-account-issuer=https://kubernetes.default.svc.cluster.local
      - --service-account-key-file=/etc/kubernetes/pki/sa.pub
      - --service-account-signing-key-file=/etc/kubernetes/pki/sa.key
      - --service-cluster-ip-range=10.96.0.0/16
      - --tls-cert-file=/etc/kubernetes/pki/apiserver.crt
      - --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
      image: registry.k8s.io/kube-apiserver:v1.30.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 8
        httpGet:
          host: 172.18.0.3
          path: /livez
          port: 6443
          scheme: HTTPS
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      name: kube-apiserver
      readinessProbe:
        failureThreshold: 3
        httpGet:
          host: 172.18.0.3
          path: /readyz
          port: 6443
          scheme: HTTPS
        periodSeconds: 1
        successThreshold: 1
        timeoutSeconds: 15
      resources:
        requests:
          cpu: 250m
      startupProbe:
        failureThreshold: 24
        httpGet:
          host: 172.18.0.3
          path: /livez
          port: 6443
          scheme: HTTPS
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/ssl/certs
        name: ca-certs
        readOnly: true
      - mountPath: /etc/ca-certificates
        name: etc-ca-certificates
        readOnly: true
      - mountPath: /etc/kubernetes/pki
        name: k8s-certs
        readOnly: true
      - mountPath: /usr/local/share/ca-certificates
        name: usr-local-share-ca-certificates
        readOnly: true
      - mountPath: /usr/share/ca-certificates
        name: usr-share-ca-certificates
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: cluster2-control-plane
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      seccompProfile:
        type: RuntimeDefault
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    volumes:
    - hostPath:
        path: /etc/ssl/certs
        type: DirectoryOrCreate
      name: ca-certs
    - hostPath:
        path: /etc/ca-certificates
        type: DirectoryOrCreate
      name: etc-ca-certificates
    - hostPath:
        path: /etc/kubernetes/pki
        type: DirectoryOrCreate
      name: k8s-certs
    - hostPath:
        path: /usr/local/share/ca-certificates
        type: DirectoryOrCreate
      name: usr-local-share-ca-certificates
    - hostPath:
        path: /usr/share/ca-certificates
        type: DirectoryOrCreate
      name: usr-share-ca-certificates
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:35:49Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:35:47Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:36:05Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:36:05Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:35:47Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://1ee84454b8e606364ad6e7698accbdf564097aa074abd3716a08825474d656da
      image: registry.k8s.io/kube-apiserver-amd64:v1.30.0
      imageID: docker.io/library/import-2024-05-13@sha256:d147453847b7c5b8c33045e54d6e0301edea08b5ae152e84b9b5cab377e20321
      lastState: {}
      name: kube-apiserver
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2024-09-06T03:35:48Z"
    hostIP: 172.18.0.3
    hostIPs:
    - ip: 172.18.0.3
    phase: Running
    podIP: 172.18.0.3
    podIPs:
    - ip: 172.18.0.3
    qosClass: Burstable
    startTime: "2024-09-06T03:35:47Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/config.hash: 85715ea95605628d20f3b24e1953d60c
      kubernetes.io/config.mirror: 85715ea95605628d20f3b24e1953d60c
      kubernetes.io/config.seen: "2024-08-09T10:45:36.614149344Z"
      kubernetes.io/config.source: file
    creationTimestamp: "2024-08-09T10:45:36Z"
    labels:
      component: kube-controller-manager
      tier: control-plane
    name: kube-controller-manager-cluster2-control-plane
    namespace: kube-system
    ownerReferences:
    - apiVersion: v1
      controller: true
      kind: Node
      name: cluster2-control-plane
      uid: ed6403d9-aab5-4814-83a4-9e5ddc3155ec
    resourceVersion: "1502421"
    uid: 472d5bc9-98ec-43cb-b313-9d5c466c3b3a
  spec:
    containers:
    - command:
      - kube-controller-manager
      - --allocate-node-cidrs=true
      - --authentication-kubeconfig=/etc/kubernetes/controller-manager.conf
      - --authorization-kubeconfig=/etc/kubernetes/controller-manager.conf
      - --bind-address=127.0.0.1
      - --client-ca-file=/etc/kubernetes/pki/ca.crt
      - --cluster-cidr=10.244.0.0/16
      - --cluster-name=cluster2
      - --cluster-signing-cert-file=/etc/kubernetes/pki/ca.crt
      - --cluster-signing-key-file=/etc/kubernetes/pki/ca.key
      - --controllers=*,bootstrapsigner,tokencleaner
      - --enable-hostpath-provisioner=true
      - --kubeconfig=/etc/kubernetes/controller-manager.conf
      - --leader-elect=true
      - --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt
      - --root-ca-file=/etc/kubernetes/pki/ca.crt
      - --service-account-private-key-file=/etc/kubernetes/pki/sa.key
      - --service-cluster-ip-range=10.96.0.0/16
      - --use-service-account-credentials=true
      image: registry.k8s.io/kube-controller-manager:v1.30.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 8
        httpGet:
          host: 127.0.0.1
          path: /healthz
          port: 10257
          scheme: HTTPS
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      name: kube-controller-manager
      resources:
        requests:
          cpu: 200m
      startupProbe:
        failureThreshold: 24
        httpGet:
          host: 127.0.0.1
          path: /healthz
          port: 10257
          scheme: HTTPS
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/ssl/certs
        name: ca-certs
        readOnly: true
      - mountPath: /etc/ca-certificates
        name: etc-ca-certificates
        readOnly: true
      - mountPath: /usr/libexec/kubernetes/kubelet-plugins/volume/exec
        name: flexvolume-dir
      - mountPath: /etc/kubernetes/pki
        name: k8s-certs
        readOnly: true
      - mountPath: /etc/kubernetes/controller-manager.conf
        name: kubeconfig
        readOnly: true
      - mountPath: /usr/local/share/ca-certificates
        name: usr-local-share-ca-certificates
        readOnly: true
      - mountPath: /usr/share/ca-certificates
        name: usr-share-ca-certificates
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: cluster2-control-plane
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      seccompProfile:
        type: RuntimeDefault
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    volumes:
    - hostPath:
        path: /etc/ssl/certs
        type: DirectoryOrCreate
      name: ca-certs
    - hostPath:
        path: /etc/ca-certificates
        type: DirectoryOrCreate
      name: etc-ca-certificates
    - hostPath:
        path: /usr/libexec/kubernetes/kubelet-plugins/volume/exec
        type: DirectoryOrCreate
      name: flexvolume-dir
    - hostPath:
        path: /etc/kubernetes/pki
        type: DirectoryOrCreate
      name: k8s-certs
    - hostPath:
        path: /etc/kubernetes/controller-manager.conf
        type: FileOrCreate
      name: kubeconfig
    - hostPath:
        path: /usr/local/share/ca-certificates
        type: DirectoryOrCreate
      name: usr-local-share-ca-certificates
    - hostPath:
        path: /usr/share/ca-certificates
        type: DirectoryOrCreate
      name: usr-share-ca-certificates
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:35:49Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:35:47Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:36:02Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:36:02Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:35:47Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://d8e4a530899897be3a79d13f09fcc8007dd091bc5eda67a1a86de608cf53413f
      image: registry.k8s.io/kube-controller-manager-amd64:v1.30.0
      imageID: docker.io/library/import-2024-05-13@sha256:9615dec64d132ce44d42c15d071da7477499ab2aa9a44ff073b8d85944949023
      lastState:
        terminated:
          containerID: containerd://fcff80a9e8bf3bf3a160d1f1df93b642afab318ecac556b61d085188650f9b6c
          exitCode: 255
          finishedAt: "2024-09-06T03:35:45Z"
          reason: Unknown
          startedAt: "2024-09-03T06:55:15Z"
      name: kube-controller-manager
      ready: true
      restartCount: 38
      started: true
      state:
        running:
          startedAt: "2024-09-06T03:35:48Z"
    hostIP: 172.18.0.3
    hostIPs:
    - ip: 172.18.0.3
    phase: Running
    podIP: 172.18.0.3
    podIPs:
    - ip: 172.18.0.3
    qosClass: Burstable
    startTime: "2024-09-06T03:35:47Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-08-09T10:45:56Z"
    generateName: kube-proxy-
    labels:
      controller-revision-hash: 79cf874c65
      k8s-app: kube-proxy
      pod-template-generation: "1"
    name: kube-proxy-5k5jk
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: kube-proxy
      uid: c80c6efb-359f-413c-954b-fa6b6c6273c0
    resourceVersion: "1661958"
    uid: 7a40ebca-511b-4d3d-bff5-7f8d578e5210
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - cluster2-worker2
    containers:
    - command:
      - /usr/local/bin/kube-proxy
      - --config=/var/lib/kube-proxy/config.conf
      - --hostname-override=$(NODE_NAME)
      env:
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: registry.k8s.io/kube-proxy:v1.30.0
      imagePullPolicy: IfNotPresent
      name: kube-proxy
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/kube-proxy
        name: kube-proxy
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-7tcsf
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: cluster2-worker2
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kube-proxy
    serviceAccountName: kube-proxy
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - configMap:
        defaultMode: 420
        name: kube-proxy
      name: kube-proxy
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - name: kube-api-access-7tcsf
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:35:59Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-08-09T10:45:57Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-12T05:38:28Z"
      message: 'containers with unready status: [kube-proxy]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-12T05:38:28Z"
      message: 'containers with unready status: [kube-proxy]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-08-09T10:45:56Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://5ade87fb99303aa395cc7d2e042f84cc002b6db6dd5b23cdea09a4891b14703f
      image: registry.k8s.io/kube-proxy-amd64:v1.30.0
      imageID: docker.io/library/import-2024-05-13@sha256:98e54aaf0614547ead5c0bd7df946f6eb58f0abf0386240df20565d9dd2a2e8d
      lastState:
        terminated:
          containerID: containerd://5ade87fb99303aa395cc7d2e042f84cc002b6db6dd5b23cdea09a4891b14703f
          exitCode: 1
          finishedAt: "2024-09-12T05:53:49Z"
          reason: Error
          startedAt: "2024-09-12T05:53:49Z"
      name: kube-proxy
      ready: false
      restartCount: 319
      started: false
      state:
        waiting:
          message: back-off 5m0s restarting failed container=kube-proxy pod=kube-proxy-5k5jk_kube-system(7a40ebca-511b-4d3d-bff5-7f8d578e5210)
          reason: CrashLoopBackOff
    hostIP: 172.18.0.2
    hostIPs:
    - ip: 172.18.0.2
    phase: Running
    podIP: 172.18.0.2
    podIPs:
    - ip: 172.18.0.2
    qosClass: BestEffort
    startTime: "2024-08-09T10:45:57Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-08-09T10:45:55Z"
    generateName: kube-proxy-
    labels:
      controller-revision-hash: 79cf874c65
      k8s-app: kube-proxy
      pod-template-generation: "1"
    name: kube-proxy-7bbtt
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: kube-proxy
      uid: c80c6efb-359f-413c-954b-fa6b6c6273c0
    resourceVersion: "1502366"
    uid: c41c554b-a637-466f-a862-5954dfddf6c3
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - cluster2-worker
    containers:
    - command:
      - /usr/local/bin/kube-proxy
      - --config=/var/lib/kube-proxy/config.conf
      - --hostname-override=$(NODE_NAME)
      env:
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: registry.k8s.io/kube-proxy:v1.30.0
      imagePullPolicy: IfNotPresent
      name: kube-proxy
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/kube-proxy
        name: kube-proxy
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-srfdm
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: cluster2-worker
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kube-proxy
    serviceAccountName: kube-proxy
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - configMap:
        defaultMode: 420
        name: kube-proxy
      name: kube-proxy
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - name: kube-api-access-srfdm
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:35:58Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-08-09T10:45:56Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:35:58Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:35:58Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-08-09T10:45:55Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://fee6dcf3dc2f9a760665eb539e290651c87bf7b49dbeae290c246bb47bf9d7e0
      image: registry.k8s.io/kube-proxy-amd64:v1.30.0
      imageID: docker.io/library/import-2024-05-13@sha256:98e54aaf0614547ead5c0bd7df946f6eb58f0abf0386240df20565d9dd2a2e8d
      lastState:
        terminated:
          containerID: containerd://5ddd543250fd63d52d1f0f84a93da059ce64a049ef9aebde04130ef3c4148e01
          exitCode: 255
          finishedAt: "2024-09-06T03:35:44Z"
          reason: Unknown
          startedAt: "2024-09-03T06:55:21Z"
      name: kube-proxy
      ready: true
      restartCount: 31
      started: true
      state:
        running:
          startedAt: "2024-09-06T03:35:57Z"
    hostIP: 172.18.0.4
    hostIPs:
    - ip: 172.18.0.4
    phase: Running
    podIP: 172.18.0.4
    podIPs:
    - ip: 172.18.0.4
    qosClass: BestEffort
    startTime: "2024-08-09T10:45:56Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-08-09T10:45:50Z"
    generateName: kube-proxy-
    labels:
      controller-revision-hash: 79cf874c65
      k8s-app: kube-proxy
      pod-template-generation: "1"
    name: kube-proxy-9wglw
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: kube-proxy
      uid: c80c6efb-359f-413c-954b-fa6b6c6273c0
    resourceVersion: "1502312"
    uid: 43163c36-9987-4420-b6cd-0fe7f1330c39
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - cluster2-control-plane
    containers:
    - command:
      - /usr/local/bin/kube-proxy
      - --config=/var/lib/kube-proxy/config.conf
      - --hostname-override=$(NODE_NAME)
      env:
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: registry.k8s.io/kube-proxy:v1.30.0
      imagePullPolicy: IfNotPresent
      name: kube-proxy
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/kube-proxy
        name: kube-proxy
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-mxxfq
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: cluster2-control-plane
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kube-proxy
    serviceAccountName: kube-proxy
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - configMap:
        defaultMode: 420
        name: kube-proxy
      name: kube-proxy
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - name: kube-api-access-mxxfq
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:35:57Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-08-09T10:45:50Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:35:57Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:35:57Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-08-09T10:45:50Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://e96ab4c7c7b0d4d75aaa6695341ddddaed839314ad662e2878e54f7f043f870c
      image: registry.k8s.io/kube-proxy-amd64:v1.30.0
      imageID: docker.io/library/import-2024-05-13@sha256:98e54aaf0614547ead5c0bd7df946f6eb58f0abf0386240df20565d9dd2a2e8d
      lastState:
        terminated:
          containerID: containerd://81b7b10795352ada42112db1212bd12c7b8da6e3ed3cf402101149c049e7dcaa
          exitCode: 255
          finishedAt: "2024-09-06T03:35:45Z"
          reason: Unknown
          startedAt: "2024-09-03T06:55:59Z"
      name: kube-proxy
      ready: true
      restartCount: 223
      started: true
      state:
        running:
          startedAt: "2024-09-06T03:35:56Z"
    hostIP: 172.18.0.3
    hostIPs:
    - ip: 172.18.0.3
    phase: Running
    podIP: 172.18.0.3
    podIPs:
    - ip: 172.18.0.3
    qosClass: BestEffort
    startTime: "2024-08-09T10:45:50Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-08-09T10:45:54Z"
    generateName: kube-proxy-
    labels:
      controller-revision-hash: 79cf874c65
      k8s-app: kube-proxy
      pod-template-generation: "1"
    name: kube-proxy-zjqjc
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: kube-proxy
      uid: c80c6efb-359f-413c-954b-fa6b6c6273c0
    resourceVersion: "1502363"
    uid: ecfccabd-cfeb-4e3a-a030-201e927f3c1e
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - cluster2-worker3
    containers:
    - command:
      - /usr/local/bin/kube-proxy
      - --config=/var/lib/kube-proxy/config.conf
      - --hostname-override=$(NODE_NAME)
      env:
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: registry.k8s.io/kube-proxy:v1.30.0
      imagePullPolicy: IfNotPresent
      name: kube-proxy
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/kube-proxy
        name: kube-proxy
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-j4q2k
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: cluster2-worker3
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kube-proxy
    serviceAccountName: kube-proxy
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - configMap:
        defaultMode: 420
        name: kube-proxy
      name: kube-proxy
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - name: kube-api-access-j4q2k
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:35:58Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-08-09T10:45:56Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:35:58Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:35:58Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-08-09T10:45:54Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://cb464f68c9d38fb4085d6f620bbcaf70b96259eb8a43d244f9add19216e62b55
      image: registry.k8s.io/kube-proxy-amd64:v1.30.0
      imageID: docker.io/library/import-2024-05-13@sha256:98e54aaf0614547ead5c0bd7df946f6eb58f0abf0386240df20565d9dd2a2e8d
      lastState:
        terminated:
          containerID: containerd://d761cc47f471866bc29311ead5b0c084b6e298c2b4647fe27a7e3cb0cdc00662
          exitCode: 255
          finishedAt: "2024-09-06T03:35:44Z"
          reason: Unknown
          startedAt: "2024-09-03T06:55:21Z"
      name: kube-proxy
      ready: true
      restartCount: 24
      started: true
      state:
        running:
          startedAt: "2024-09-06T03:35:57Z"
    hostIP: 172.18.0.5
    hostIPs:
    - ip: 172.18.0.5
    phase: Running
    podIP: 172.18.0.5
    podIPs:
    - ip: 172.18.0.5
    qosClass: BestEffort
    startTime: "2024-08-09T10:45:56Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubernetes.io/config.hash: 0530f0e79712087dfdb0aa9c516da8bc
      kubernetes.io/config.mirror: 0530f0e79712087dfdb0aa9c516da8bc
      kubernetes.io/config.seen: "2024-08-09T10:45:29.519998608Z"
      kubernetes.io/config.source: file
    creationTimestamp: "2024-08-09T10:45:34Z"
    labels:
      component: kube-scheduler
      tier: control-plane
    name: kube-scheduler-cluster2-control-plane
    namespace: kube-system
    ownerReferences:
    - apiVersion: v1
      controller: true
      kind: Node
      name: cluster2-control-plane
      uid: ed6403d9-aab5-4814-83a4-9e5ddc3155ec
    resourceVersion: "1502433"
    uid: 0f9179c8-2d3b-4843-9651-7e708c39958d
  spec:
    containers:
    - command:
      - kube-scheduler
      - --authentication-kubeconfig=/etc/kubernetes/scheduler.conf
      - --authorization-kubeconfig=/etc/kubernetes/scheduler.conf
      - --bind-address=127.0.0.1
      - --kubeconfig=/etc/kubernetes/scheduler.conf
      - --leader-elect=true
      image: registry.k8s.io/kube-scheduler:v1.30.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 8
        httpGet:
          host: 127.0.0.1
          path: /healthz
          port: 10259
          scheme: HTTPS
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      name: kube-scheduler
      resources:
        requests:
          cpu: 100m
      startupProbe:
        failureThreshold: 24
        httpGet:
          host: 127.0.0.1
          path: /healthz
          port: 10259
          scheme: HTTPS
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/kubernetes/scheduler.conf
        name: kubeconfig
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: cluster2-control-plane
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      seccompProfile:
        type: RuntimeDefault
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      operator: Exists
    volumes:
    - hostPath:
        path: /etc/kubernetes/scheduler.conf
        type: FileOrCreate
      name: kubeconfig
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:35:49Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:35:47Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:36:06Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:36:06Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:35:47Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://c44a353c65a9d012230463728d69a507184f256de5dd08890d73fd503dd4f340
      image: registry.k8s.io/kube-scheduler-amd64:v1.30.0
      imageID: docker.io/library/import-2024-05-13@sha256:06e68f241fc2e56756800474858d7b359f7cf4da31eddae316a342059c20c274
      lastState:
        terminated:
          containerID: containerd://76592e5ac1c3e8e34c5903235e0733b6e781378917634c2b96a13fd0028d48cc
          exitCode: 255
          finishedAt: "2024-09-06T03:35:45Z"
          reason: Unknown
          startedAt: "2024-09-03T06:55:15Z"
      name: kube-scheduler
      ready: true
      restartCount: 37
      started: true
      state:
        running:
          startedAt: "2024-09-06T03:35:48Z"
    hostIP: 172.18.0.3
    hostIPs:
    - ip: 172.18.0.3
    phase: Running
    podIP: 172.18.0.3
    podIPs:
    - ip: 172.18.0.3
    qosClass: Burstable
    startTime: "2024-09-06T03:35:47Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-08-09T10:45:50Z"
    generateName: local-path-provisioner-988d74bc-
    labels:
      app: local-path-provisioner
      pod-template-hash: 988d74bc
    name: local-path-provisioner-988d74bc-p6lwh
    namespace: local-path-storage
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: local-path-provisioner-988d74bc
      uid: ffaecada-f844-4c67-845c-db68e30c96eb
    resourceVersion: "1502622"
    uid: 5352b07c-a48b-44b9-a1bc-6f13046f64d4
  spec:
    containers:
    - command:
      - local-path-provisioner
      - --debug
      - start
      - --helper-image
      - docker.io/kindest/local-path-helper:v20230510-486859a6
      - --config
      - /etc/config/config.json
      env:
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: docker.io/kindest/local-path-provisioner:v20240202-8f1494ea
      imagePullPolicy: IfNotPresent
      name: local-path-provisioner
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/config/
        name: config-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-7lhnt
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: cluster2-control-plane
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: local-path-provisioner-service-account
    serviceAccountName: local-path-provisioner-service-account
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      key: node-role.kubernetes.io/control-plane
      operator: Equal
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
      operator: Equal
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        name: local-path-config
      name: config-volume
    - name: kube-api-access-7lhnt
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:35:58Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-08-09T10:45:53Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:36:39Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:36:39Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-08-09T10:45:53Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://a179f5baab0478e4824861f44618c3988f88af44095cf70aa80603fbf804a298
      image: docker.io/kindest/local-path-provisioner:v20240202-8f1494ea
      imageID: sha256:0500518ebaa68d16973c65dc0b776813b50ab6e7e8f112fca41aca387a549d4f
      lastState:
        terminated:
          containerID: containerd://1dc67dcda65ed685b845afd9e6cbb12bcb9ad2e1318de806fe1d3cf347da9c68
          exitCode: 1
          finishedAt: "2024-09-06T03:36:28Z"
          reason: Error
          startedAt: "2024-09-06T03:35:57Z"
      name: local-path-provisioner
      ready: true
      restartCount: 216
      started: true
      state:
        running:
          startedAt: "2024-09-06T03:36:38Z"
    hostIP: 172.18.0.3
    hostIPs:
    - ip: 172.18.0.3
    phase: Running
    podIP: 10.244.0.4
    podIPs:
    - ip: 10.244.0.4
    qosClass: BestEffort
    startTime: "2024-08-09T10:45:53Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-08-09T10:49:00Z"
    generateName: 71db7ad535eb28807870da539e169ce61c5a1991636432ad1de9e06dd60f180-
    labels:
      batch.kubernetes.io/controller-uid: 0a890721-c5c4-4161-93c7-6ad745079b89
      batch.kubernetes.io/job-name: 71db7ad535eb28807870da539e169ce61c5a1991636432ad1de9e06dd60f180
      controller-uid: 0a890721-c5c4-4161-93c7-6ad745079b89
      job-name: 71db7ad535eb28807870da539e169ce61c5a1991636432ad1de9e06dd60f180
      olm.managed: "true"
    name: 71db7ad535eb28807870da539e169ce61c5a1991636432ad1de9e06dd644dkr
    namespace: olm
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: 71db7ad535eb28807870da539e169ce61c5a1991636432ad1de9e06dd60f180
      uid: 0a890721-c5c4-4161-93c7-6ad745079b89
    resourceVersion: "1502276"
    uid: f00c5caa-5566-43c9-93fb-b913da6b1437
  spec:
    containers:
    - command:
      - opm
      - alpha
      - bundle
      - extract
      - -m
      - /bundle/
      - -n
      - olm
      - -c
      - 71db7ad535eb28807870da539e169ce61c5a1991636432ad1de9e06dd60f180
      - -z
      env:
      - name: CONTAINER_IMAGE
        value: quay.io/operatorhubio/argocd-operator@sha256:ae27580347c6917f46a19d94cb6e740e828deebd4ab06ae5a62cf5588ed38827
      image: quay.io/operator-framework/opm:latest
      imagePullPolicy: Always
      name: extract
      resources:
        requests:
          cpu: 10m
          memory: 50Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /bundle
        name: bundle
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-4wq48
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    initContainers:
    - command:
      - /bin/cp
      - -Rv
      - /bin/cpb
      - /util/cpb
      image: quay.io/operator-framework/olm@sha256:40d0363f4aa684319cd721c2fcf3321785380fdc74de8ef821317cd25a10782a
      imagePullPolicy: IfNotPresent
      name: util
      resources:
        requests:
          cpu: 10m
          memory: 50Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /util
        name: util
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-4wq48
        readOnly: true
    - command:
      - /util/cpb
      - /bundle
      image: quay.io/operatorhubio/argocd-operator@sha256:ae27580347c6917f46a19d94cb6e740e828deebd4ab06ae5a62cf5588ed38827
      imagePullPolicy: IfNotPresent
      name: pull
      resources:
        requests:
          cpu: 10m
          memory: 50Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /bundle
        name: bundle
      - mountPath: /util
        name: util
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-4wq48
        readOnly: true
    nodeName: cluster2-worker
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext:
      runAsNonRoot: true
      runAsUser: 1001
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: kubernetes.io/arch
      operator: Equal
      value: amd64
    - key: kubernetes.io/arch
      operator: Equal
      value: arm64
    - key: kubernetes.io/arch
      operator: Equal
      value: ppc64le
    - key: kubernetes.io/arch
      operator: Equal
      value: s390x
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir: {}
      name: bundle
    - emptyDir: {}
      name: util
    - name: kube-api-access-4wq48
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-08-09T10:49:16Z"
      status: "False"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-08-09T10:49:07Z"
      reason: PodCompleted
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-08-09T10:49:00Z"
      reason: PodCompleted
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-08-09T10:49:00Z"
      reason: PodCompleted
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-08-09T10:49:00Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://b20068756be833097564e398306259b0ba374474f3e4707b0a9545c43976fdfe
      image: quay.io/operator-framework/opm:latest
      imageID: quay.io/operator-framework/opm@sha256:aad0452fe050a3300bdfdcbce7a612b2f9eeec3ad715f3ed1949de66183bda6b
      lastState: {}
      name: extract
      ready: false
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://b20068756be833097564e398306259b0ba374474f3e4707b0a9545c43976fdfe
          exitCode: 0
          finishedAt: "2024-08-09T10:49:15Z"
          reason: Completed
          startedAt: "2024-08-09T10:49:14Z"
    hostIP: 172.18.0.4
    hostIPs:
    - ip: 172.18.0.4
    initContainerStatuses:
    - containerID: containerd://114cec1c73082825939b454b39bf2bfc2cc78e44edd97eeec1488c42cc6f1583
      image: sha256:95c284b7feee90e7142ddb2d8c6e88f7d86f72ce4ebc972c8ca819d8e626e5e1
      imageID: quay.io/operator-framework/olm@sha256:40d0363f4aa684319cd721c2fcf3321785380fdc74de8ef821317cd25a10782a
      lastState: {}
      name: util
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://114cec1c73082825939b454b39bf2bfc2cc78e44edd97eeec1488c42cc6f1583
          exitCode: 0
          finishedAt: "2024-08-09T10:49:01Z"
          reason: Completed
          startedAt: "2024-08-09T10:49:01Z"
    - containerID: containerd://c7839cfdc3206b2673acb1a48101704477b72ade0a7f3dfb1da8e35433113f7e
      image: sha256:174adba81a50196920ecf2c57b35d20f0e064bb31171693f9ebeea261f4d87af
      imageID: quay.io/operatorhubio/argocd-operator@sha256:ae27580347c6917f46a19d94cb6e740e828deebd4ab06ae5a62cf5588ed38827
      lastState: {}
      name: pull
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://c7839cfdc3206b2673acb1a48101704477b72ade0a7f3dfb1da8e35433113f7e
          exitCode: 0
          finishedAt: "2024-08-09T10:49:07Z"
          reason: Completed
          startedAt: "2024-08-09T10:49:07Z"
    phase: Succeeded
    qosClass: Burstable
    startTime: "2024-08-09T10:49:00Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-09-03T08:39:24Z"
    generateName: c9039891e6c004ade96467174209875620b5d1c5ff74a762737f8b1a38e8905-
    labels:
      batch.kubernetes.io/controller-uid: 36902f21-c3f0-4531-8a2c-e4c3b7039baa
      batch.kubernetes.io/job-name: c9039891e6c004ade96467174209875620b5d1c5ff74a762737f8b1a38e8905
      controller-uid: 36902f21-c3f0-4531-8a2c-e4c3b7039baa
      job-name: c9039891e6c004ade96467174209875620b5d1c5ff74a762737f8b1a38e8905
      olm.managed: "true"
    name: c9039891e6c004ade96467174209875620b5d1c5ff74a762737f8b1a38kggjn
    namespace: olm
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: c9039891e6c004ade96467174209875620b5d1c5ff74a762737f8b1a38e8905
      uid: 36902f21-c3f0-4531-8a2c-e4c3b7039baa
    resourceVersion: "1502259"
    uid: bcbcc41b-e499-4b92-8ea6-a00d76a816a2
  spec:
    containers:
    - command:
      - opm
      - alpha
      - bundle
      - extract
      - -m
      - /bundle/
      - -n
      - olm
      - -c
      - c9039891e6c004ade96467174209875620b5d1c5ff74a762737f8b1a38e8905
      - -z
      env:
      - name: CONTAINER_IMAGE
        value: quay.io/operatorhubio/argocd-operator@sha256:4673fbc6d93f21139ae1b7a42b75e0ed717bd981572245ca0ee59ef64d6d473d
      image: quay.io/operator-framework/opm:latest
      imagePullPolicy: Always
      name: extract
      resources:
        requests:
          cpu: 10m
          memory: 50Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /bundle
        name: bundle
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-8vrbr
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    initContainers:
    - command:
      - /bin/cp
      - -Rv
      - /bin/cpb
      - /util/cpb
      image: quay.io/operator-framework/olm@sha256:40d0363f4aa684319cd721c2fcf3321785380fdc74de8ef821317cd25a10782a
      imagePullPolicy: IfNotPresent
      name: util
      resources:
        requests:
          cpu: 10m
          memory: 50Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /util
        name: util
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-8vrbr
        readOnly: true
    - command:
      - /util/cpb
      - /bundle
      image: quay.io/operatorhubio/argocd-operator@sha256:4673fbc6d93f21139ae1b7a42b75e0ed717bd981572245ca0ee59ef64d6d473d
      imagePullPolicy: IfNotPresent
      name: pull
      resources:
        requests:
          cpu: 10m
          memory: 50Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /bundle
        name: bundle
      - mountPath: /util
        name: util
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-8vrbr
        readOnly: true
    nodeName: cluster2-worker2
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext:
      runAsNonRoot: true
      runAsUser: 1001
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - key: kubernetes.io/arch
      operator: Equal
      value: amd64
    - key: kubernetes.io/arch
      operator: Equal
      value: arm64
    - key: kubernetes.io/arch
      operator: Equal
      value: ppc64le
    - key: kubernetes.io/arch
      operator: Equal
      value: s390x
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir: {}
      name: bundle
    - emptyDir: {}
      name: util
    - name: kube-api-access-8vrbr
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-03T08:39:38Z"
      status: "False"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-09-03T08:39:34Z"
      reason: PodCompleted
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-03T08:39:24Z"
      reason: PodCompleted
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-03T08:39:24Z"
      reason: PodCompleted
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-09-03T08:39:24Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://739736dc000b6c0ce17f6588232a13bb290ed0cd6c1aef558eecbe394b2a93e4
      image: quay.io/operator-framework/opm:latest
      imageID: quay.io/operator-framework/opm@sha256:86a79e9a50ef5f3d50283af39e4363f48405f246520139f3a65a67e52e84fe84
      lastState: {}
      name: extract
      ready: false
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://739736dc000b6c0ce17f6588232a13bb290ed0cd6c1aef558eecbe394b2a93e4
          exitCode: 0
          finishedAt: "2024-09-03T08:39:37Z"
          reason: Completed
          startedAt: "2024-09-03T08:39:37Z"
    hostIP: 172.18.0.2
    hostIPs:
    - ip: 172.18.0.2
    initContainerStatuses:
    - containerID: containerd://a33a8a1b0d7a412465a84eca165bc04394670560d7923d8530a4604858171589
      image: sha256:95c284b7feee90e7142ddb2d8c6e88f7d86f72ce4ebc972c8ca819d8e626e5e1
      imageID: quay.io/operator-framework/olm@sha256:40d0363f4aa684319cd721c2fcf3321785380fdc74de8ef821317cd25a10782a
      lastState: {}
      name: util
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://a33a8a1b0d7a412465a84eca165bc04394670560d7923d8530a4604858171589
          exitCode: 0
          finishedAt: "2024-09-03T08:39:25Z"
          reason: Completed
          startedAt: "2024-09-03T08:39:25Z"
    - containerID: containerd://9c0b26ef62c17714f95174fcf1affe188dfeb785c3d49cb2225d0d900f79fedd
      image: sha256:628300843c7a56f0eab6ca73024bef6b82cbcf6e5412254299d293c7c36ad760
      imageID: quay.io/operatorhubio/argocd-operator@sha256:4673fbc6d93f21139ae1b7a42b75e0ed717bd981572245ca0ee59ef64d6d473d
      lastState: {}
      name: pull
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://9c0b26ef62c17714f95174fcf1affe188dfeb785c3d49cb2225d0d900f79fedd
          exitCode: 0
          finishedAt: "2024-09-03T08:39:33Z"
          reason: Completed
          startedAt: "2024-09-03T08:39:33Z"
    phase: Succeeded
    qosClass: Burstable
    startTime: "2024-09-03T08:39:24Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-08-09T10:47:39Z"
    generateName: catalog-operator-78857dfb48-
    labels:
      app: catalog-operator
      pod-template-hash: 78857dfb48
    name: catalog-operator-78857dfb48-gb7vr
    namespace: olm
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: catalog-operator-78857dfb48
      uid: cb2ce347-b0b6-4d59-a698-f48cb0d83b60
    resourceVersion: "1661772"
    uid: ad265ec4-b44d-4d8a-9c0b-c53662a741ff
  spec:
    containers:
    - args:
      - --namespace
      - olm
      - --configmapServerImage=quay.io/operator-framework/configmap-operator-registry:latest
      - --util-image
      - quay.io/operator-framework/olm@sha256:40d0363f4aa684319cd721c2fcf3321785380fdc74de8ef821317cd25a10782a
      - --set-workload-user-id=true
      command:
      - /bin/catalog
      image: quay.io/operator-framework/olm@sha256:40d0363f4aa684319cd721c2fcf3321785380fdc74de8ef821317cd25a10782a
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 8080
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: catalog-operator
      ports:
      - containerPort: 8080
        name: metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 8080
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        requests:
          cpu: 10m
          memory: 80Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-gpsjc
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: cluster2-worker2
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: olm-operator-serviceaccount
    serviceAccountName: olm-operator-serviceaccount
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-gpsjc
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:36:00Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-08-09T10:47:39Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-12T05:52:17Z"
      message: 'containers with unready status: [catalog-operator]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-12T05:52:17Z"
      message: 'containers with unready status: [catalog-operator]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-08-09T10:47:39Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://2e5e2b272921882ee5454e41b6b86e47b94e767cf4d5afabbe60318ee3e2e388
      image: sha256:95c284b7feee90e7142ddb2d8c6e88f7d86f72ce4ebc972c8ca819d8e626e5e1
      imageID: quay.io/operator-framework/olm@sha256:40d0363f4aa684319cd721c2fcf3321785380fdc74de8ef821317cd25a10782a
      lastState:
        terminated:
          containerID: containerd://2e5e2b272921882ee5454e41b6b86e47b94e767cf4d5afabbe60318ee3e2e388
          exitCode: 1
          finishedAt: "2024-09-12T05:52:17Z"
          message: |
            time="2024-09-12T05:51:47Z" level=info msg="log level info"
            W0912 05:51:47.663565       1 client_config.go:618] Neither --kubeconfig nor --master was specified.  Using the inClusterConfig.  This might not work.
            time="2024-09-12T05:51:47Z" level=info msg="Using in-cluster kube client config"
            time="2024-09-12T05:51:47Z" level=info msg="Using in-cluster kube client config"
            W0912 05:51:47.665152       1 client_config.go:618] Neither --kubeconfig nor --master was specified.  Using the inClusterConfig.  This might not work.
            Error: error configuring catalog operator: Get "https://10.96.0.1:443/apis/operators.coreos.com/v1/operatorgroups": dial tcp 10.96.0.1:443: i/o timeout
            error configuring catalog operator: Get "https://10.96.0.1:443/apis/operators.coreos.com/v1/operatorgroups": dial tcp 10.96.0.1:443: i/o timeout
          reason: Error
          startedAt: "2024-09-12T05:51:47Z"
      name: catalog-operator
      ready: false
      restartCount: 328
      started: false
      state:
        waiting:
          message: back-off 5m0s restarting failed container=catalog-operator pod=catalog-operator-78857dfb48-gb7vr_olm(ad265ec4-b44d-4d8a-9c0b-c53662a741ff)
          reason: CrashLoopBackOff
    hostIP: 172.18.0.2
    hostIPs:
    - ip: 172.18.0.2
    phase: Running
    podIP: 10.244.3.6
    podIPs:
    - ip: 10.244.3.6
    qosClass: Burstable
    startTime: "2024-08-09T10:47:39Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2024-08-09T10:47:39Z"
    generateName: olm-operator-6bf4f9c984-
    labels:
      app: olm-operator
      pod-template-hash: 6bf4f9c984
    name: olm-operator-6bf4f9c984-5zw4d
    namespace: olm
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: olm-operator-6bf4f9c984
      uid: 35f405c7-5f2a-4ebf-b0a4-b4e444b0f388
    resourceVersion: "1502659"
    uid: 370e69d0-6bca-485c-86b5-535dfa710dfb
  spec:
    containers:
    - args:
      - --namespace
      - $(OPERATOR_NAMESPACE)
      - --writeStatusName
      - ""
      command:
      - /bin/olm
      env:
      - name: OPERATOR_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: OPERATOR_NAME
        value: olm-operator
      image: quay.io/operator-framework/olm@sha256:40d0363f4aa684319cd721c2fcf3321785380fdc74de8ef821317cd25a10782a
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 8080
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: olm-operator
      ports:
      - containerPort: 8080
        name: metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 8080
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        requests:
          cpu: 10m
          memory: 160Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-jnt5h
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: cluster2-worker
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: olm-operator-serviceaccount
    serviceAccountName: olm-operator-serviceaccount
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-jnt5h
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:35:58Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-08-09T10:47:39Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:36:46Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:36:46Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-08-09T10:47:39Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://7cb60bb212c3317705d716ae8f18bd3f7a94b34f90831052b66da1d0e4d695a1
      image: sha256:95c284b7feee90e7142ddb2d8c6e88f7d86f72ce4ebc972c8ca819d8e626e5e1
      imageID: quay.io/operator-framework/olm@sha256:40d0363f4aa684319cd721c2fcf3321785380fdc74de8ef821317cd25a10782a
      lastState:
        terminated:
          containerID: containerd://37b6705f3b23358780b51b0043f597dd1049a254c1cf8a49e00bf8f32bb61117
          exitCode: 1
          finishedAt: "2024-09-06T03:36:28Z"
          message: |
            time="2024-09-06T03:35:58Z" level=info msg="log level info"
            time="2024-09-06T03:36:28Z" level=fatal msg="error configuring controller manager" error="failed to determine if *v1.Deployment is namespaced: failed to get restmapping: failed to get server groups: Get \"https://10.96.0.1:443/api\": dial tcp 10.96.0.1:443: i/o timeout"
          reason: Error
          startedAt: "2024-09-06T03:35:58Z"
      name: olm-operator
      ready: true
      restartCount: 56
      started: true
      state:
        running:
          startedAt: "2024-09-06T03:36:46Z"
    hostIP: 172.18.0.4
    hostIPs:
    - ip: 172.18.0.4
    phase: Running
    podIP: 10.244.2.6
    podIPs:
    - ip: 10.244.2.6
    qosClass: Burstable
    startTime: "2024-08-09T10:47:39Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    creationTimestamp: "2024-09-05T11:22:58Z"
    generateName: operatorhubio-catalog-
    labels:
      catalogsource.operators.coreos.com/update: ""
      olm.catalogSource: operatorhubio-catalog
      olm.managed: "true"
      olm.pod-spec-hash: 2x1nBHsbQOubqsGtZedVVKLKuv3chn8Oxx6Yio
    name: operatorhubio-catalog-vdlln
    namespace: olm
    ownerReferences:
    - apiVersion: operators.coreos.com/v1alpha1
      blockOwnerDeletion: false
      controller: true
      kind: CatalogSource
      name: operatorhubio-catalog
      uid: ab29c797-3d98-4266-93de-d16a51ba71b5
    resourceVersion: "1502454"
    uid: 9e1169b0-1066-488a-afb6-7e669eb98475
  spec:
    containers:
    - image: quay.io/operatorhubio/catalog:latest
      imagePullPolicy: Always
      livenessProbe:
        exec:
          command:
          - grpc_health_probe
          - -addr=:50051
        failureThreshold: 3
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: registry-server
      ports:
      - containerPort: 50051
        name: grpc
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - grpc_health_probe
          - -addr=:50051
        failureThreshold: 3
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      resources:
        requests:
          cpu: 10m
          memory: 50Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: false
      startupProbe:
        exec:
          command:
          - grpc_health_probe
          - -addr=:50051
        failureThreshold: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-xjqmv
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: cluster2-worker3
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      runAsNonRoot: true
      runAsUser: 1001
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: operatorhubio-catalog
    serviceAccountName: operatorhubio-catalog
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-xjqmv
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:36:00Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-09-05T11:22:58Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:36:14Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:36:14Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-09-05T11:22:58Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://2c857e3901d3ab0b2dd8f6f20b87f873227411c69cacdd00b90822c744772a56
      image: quay.io/operatorhubio/catalog:latest
      imageID: quay.io/operatorhubio/catalog@sha256:88e01f2798ac94cc3e6b9506023425bcf6fe705a5580d35e5fd8c0bc2f425591
      lastState:
        terminated:
          containerID: containerd://f9a36c35bbafd6950142475e8ddcf5893f8177aac7588c7370bca1ca1b62fd92
          exitCode: 255
          finishedAt: "2024-09-06T03:35:44Z"
          message: |
            st:50051]" content-type="[application/grpc]" grpc.code=OK grpc.component=server grpc.method=Check grpc.method_type=unary grpc.request.deadline="2024-09-05T15:28:54Z" grpc.service=grpc.health.v1.Health grpc.start_time="2024-09-05T15:28:53Z" grpc.time_ms=5.742 peer.address="127.0.0.1:38808" protocol=grpc user-agent="[grpc_health_probe grpc-go/1.45.0]"
            time="2024-09-05T15:29:03Z" level=info msg="started call" :authority="[localhost:50051]" content-type="[application/grpc]" grpc.component=server grpc.method=Check grpc.method_type=unary grpc.request.deadline="2024-09-05T15:29:04Z" grpc.service=grpc.health.v1.Health grpc.start_time="2024-09-05T15:29:03Z" grpc.time_ms=3.183 peer.address="127.0.0.1:55692" protocol=grpc user-agent="[grpc_health_probe grpc-go/1.45.0]"
            time="2024-09-05T15:29:03Z" level=info msg="started call" :authority="[localhost:50051]" content-type="[application/grpc]" grpc.component=server grpc.method=Check grpc.method_type=unary grpc.request.deadline="2024-09-05T15:29:04Z" grpc.service=grpc.health.v1.Health grpc.start_time="2024-09-05T15:29:03Z" grpc.time_ms=3.175 peer.address="127.0.0.1:55690" protocol=grpc user-agent="[grpc_health_probe grpc-go/1.45.0]"
            time="2024-09-05T15:29:03Z" level=info msg="finished call" :authority="[localhost:50051]" content-type="[application/grpc]" grpc.code=OK grpc.component=server grpc.method=Check grpc.method_type=unary grpc.request.deadline="2024-09-05T15:29:04Z" grpc.service=grpc.health.v1.Health grpc.start_time="2024-09-05T15:29:03Z" grpc.time_ms=4.219 peer.address="127.0.0.1:55692" protocol=grpc user-agent="[grpc_health_probe grpc-go/1.45.0]"
            time="2024-09-05T15:29:03Z" level=info msg="finished call" :authority="[localhost:50051]" content-type="[application/grpc]" grpc.code=OK grpc.component=server grpc.method=Check grpc.method_type=unary grpc.request.deadline="2024-09-05T15:29:04Z" grpc.service=grpc.health.v1.Health grpc.start_time="2024-09-05T15:29:03Z" grpc.time_ms=4.454 peer.address="127.0.0.1:55690" protocol=grpc user-agent="[grpc_health_probe grpc-go/1.45.0]"
          reason: Unknown
          startedAt: "2024-09-05T11:23:10Z"
      name: registry-server
      ready: true
      restartCount: 1
      started: true
      state:
        running:
          startedAt: "2024-09-06T03:36:00Z"
    hostIP: 172.18.0.5
    hostIPs:
    - ip: 172.18.0.5
    phase: Running
    podIP: 10.244.1.6
    podIPs:
    - ip: 10.244.1.6
    qosClass: Burstable
    startTime: "2024-09-05T11:22:58Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      olm.operatorGroup: olm-operators
      olm.operatorNamespace: olm
      olm.targetNamespaces: olm
      olmcahash: e67ea8693943655119220efbe7c236fc1a2f21ab270bf1ab455711bb35c2c138
    creationTimestamp: "2024-08-09T10:48:06Z"
    generateName: packageserver-c4b957db4-
    labels:
      app: packageserver
      pod-template-hash: c4b957db4
    name: packageserver-c4b957db4-fnrsz
    namespace: olm
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: packageserver-c4b957db4
      uid: 37eaf17c-60f5-45e9-a479-7efa15b3eb3b
    resourceVersion: "1661673"
    uid: f4d885d6-1bac-4ff1-beba-75d06442ae3d
  spec:
    containers:
    - command:
      - /bin/package-server
      - -v=4
      - --secure-port
      - "5443"
      - --global-namespace
      - olm
      env:
      - name: OPERATOR_CONDITION_NAME
        value: packageserver
      image: quay.io/operator-framework/olm@sha256:40d0363f4aa684319cd721c2fcf3321785380fdc74de8ef821317cd25a10782a
      imagePullPolicy: Always
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 5443
          scheme: HTTPS
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: packageserver
      ports:
      - containerPort: 5443
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 5443
          scheme: HTTPS
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        requests:
          cpu: 10m
          memory: 50Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /tmp
        name: tmpfs
      - mountPath: /apiserver.local.config/certificates
        name: apiservice-cert
      - mountPath: /tmp/k8s-webhook-server/serving-certs
        name: webhook-cert
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-z5wdl
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: cluster2-worker2
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: olm-operator-serviceaccount
    serviceAccountName: olm-operator-serviceaccount
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir: {}
      name: tmpfs
    - name: apiservice-cert
      secret:
        defaultMode: 420
        items:
        - key: tls.crt
          path: apiserver.crt
        - key: tls.key
          path: apiserver.key
        secretName: packageserver-service-cert
    - name: webhook-cert
      secret:
        defaultMode: 420
        items:
        - key: tls.crt
          path: tls.crt
        - key: tls.key
          path: tls.key
        secretName: packageserver-service-cert
    - name: kube-api-access-z5wdl
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:37:07Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-08-09T10:48:06Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:35:55Z"
      message: 'containers with unready status: [packageserver]'
      reason: ContainersNotReady
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:35:55Z"
      message: 'containers with unready status: [packageserver]'
      reason: ContainersNotReady
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-08-09T10:48:06Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://47a3fad25c7abbf004e8adb07e35ae31eda4618814b1c091aebaafd8a75cce25
      image: sha256:95c284b7feee90e7142ddb2d8c6e88f7d86f72ce4ebc972c8ca819d8e626e5e1
      imageID: quay.io/operator-framework/olm@sha256:40d0363f4aa684319cd721c2fcf3321785380fdc74de8ef821317cd25a10782a
      lastState:
        terminated:
          containerID: containerd://47a3fad25c7abbf004e8adb07e35ae31eda4618814b1c091aebaafd8a75cce25
          exitCode: 2
          finishedAt: "2024-09-12T05:51:24Z"
          message: "time=\"2024-09-12T05:51:24Z\" level=warning msg=\"Error initializing
            delegating authentication (will retry)\" error=\"unable to load configmap
            based request-header-client-ca-file: Get \\\"https://10.96.0.1:443/api/v1/namespaces/kube-system/configmaps/extension-apiserver-authentication\\\":
            dial tcp 10.96.0.1:443: i/o timeout\"\npanic: runtime error: invalid memory
            address or nil pointer dereference\n[signal SIGSEGV: segmentation violation
            code=0x1 addr=0x0 pc=0x1e40c26]\n\ngoroutine 1 [running]:\ngithub.com/operator-framework/operator-lifecycle-manager/pkg/package-server/server.(*PackageServerOptions).Run(0xc00048abe0,
            {0x2834340, 0xc000725770})\n\t/home/runner/work/operator-lifecycle-manager/operator-lifecycle-manager/pkg/package-server/server/server.go:209
            +0xc6\ngithub.com/operator-framework/operator-lifecycle-manager/pkg/package-server/server.NewCommandStartPackageServer.func1(0xc000516200?,
            {0x246f295?, 0x4?, 0x246f14d?})\n\t/home/runner/work/operator-lifecycle-manager/operator-lifecycle-manager/pkg/package-server/server/server.go:49
            +0x1f\ngithub.com/spf13/cobra.(*Command).execute(0xc000726008, {0xc000050250,
            0x5, 0x5})\n\t/home/runner/work/operator-lifecycle-manager/operator-lifecycle-manager/vendor/github.com/spf13/cobra/command.go:983
            +0xaca\ngithub.com/spf13/cobra.(*Command).ExecuteC(0xc000726008)\n\t/home/runner/work/operator-lifecycle-manager/operator-lifecycle-manager/vendor/github.com/spf13/cobra/command.go:1115
            +0x3ff\ngithub.com/spf13/cobra.(*Command).Execute(0xc000516200?)\n\t/home/runner/work/operator-lifecycle-manager/operator-lifecycle-manager/vendor/github.com/spf13/cobra/command.go:1039
            +0x13\nmain.main()\n\t/home/runner/work/operator-lifecycle-manager/operator-lifecycle-manager/cmd/package-server/main.go:31
            +0x185\n"
          reason: Error
          startedAt: "2024-09-12T05:50:54Z"
      name: packageserver
      ready: false
      restartCount: 505
      started: false
      state:
        waiting:
          message: back-off 5m0s restarting failed container=packageserver pod=packageserver-c4b957db4-fnrsz_olm(f4d885d6-1bac-4ff1-beba-75d06442ae3d)
          reason: CrashLoopBackOff
    hostIP: 172.18.0.2
    hostIPs:
    - ip: 172.18.0.2
    phase: Running
    podIP: 10.244.3.5
    podIPs:
    - ip: 10.244.3.5
    qosClass: Burstable
    startTime: "2024-08-09T10:48:06Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      olm.operatorGroup: olm-operators
      olm.operatorNamespace: olm
      olm.targetNamespaces: olm
      olmcahash: e67ea8693943655119220efbe7c236fc1a2f21ab270bf1ab455711bb35c2c138
    creationTimestamp: "2024-08-09T10:48:06Z"
    generateName: packageserver-c4b957db4-
    labels:
      app: packageserver
      pod-template-hash: c4b957db4
    name: packageserver-c4b957db4-wdwq7
    namespace: olm
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: packageserver-c4b957db4
      uid: 37eaf17c-60f5-45e9-a479-7efa15b3eb3b
    resourceVersion: "1502417"
    uid: c64c9c4c-fcb6-4dfe-bd9a-67e6df609ba9
  spec:
    containers:
    - command:
      - /bin/package-server
      - -v=4
      - --secure-port
      - "5443"
      - --global-namespace
      - olm
      env:
      - name: OPERATOR_CONDITION_NAME
        value: packageserver
      image: quay.io/operator-framework/olm@sha256:40d0363f4aa684319cd721c2fcf3321785380fdc74de8ef821317cd25a10782a
      imagePullPolicy: Always
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 5443
          scheme: HTTPS
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: packageserver
      ports:
      - containerPort: 5443
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 5443
          scheme: HTTPS
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        requests:
          cpu: 10m
          memory: 50Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: FallbackToLogsOnError
      volumeMounts:
      - mountPath: /tmp
        name: tmpfs
      - mountPath: /apiserver.local.config/certificates
        name: apiservice-cert
      - mountPath: /tmp/k8s-webhook-server/serving-certs
        name: webhook-cert
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-9wl5j
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: cluster2-worker3
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: olm-operator-serviceaccount
    serviceAccountName: olm-operator-serviceaccount
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir: {}
      name: tmpfs
    - name: apiservice-cert
      secret:
        defaultMode: 420
        items:
        - key: tls.crt
          path: apiserver.crt
        - key: tls.key
          path: apiserver.key
        secretName: packageserver-service-cert
    - name: webhook-cert
      secret:
        defaultMode: 420
        items:
        - key: tls.crt
          path: tls.crt
        - key: tls.key
          path: tls.key
        secretName: packageserver-service-cert
    - name: kube-api-access-9wl5j
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:35:59Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-08-09T10:48:06Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:36:02Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:36:02Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-08-09T10:48:06Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://326384c8d26bb3349352785a53adfc035a23e42ebf058249b3812c36da9aaa40
      image: sha256:95c284b7feee90e7142ddb2d8c6e88f7d86f72ce4ebc972c8ca819d8e626e5e1
      imageID: quay.io/operator-framework/olm@sha256:40d0363f4aa684319cd721c2fcf3321785380fdc74de8ef821317cd25a10782a
      lastState:
        terminated:
          containerID: containerd://a75d3ff5433770e40f611dc12c7b192346cb1f6a69c952e025829d208b5dba25
          exitCode: 255
          finishedAt: "2024-09-06T03:35:44Z"
          message: |2
             changes: {operatorhubio-catalog olm}" action="sync catalogsource" address="operatorhubio-catalog.olm.svc:50051" name=operatorhubio-catalog namespace=olm
            time="2024-09-05T11:23:19Z" level=warning msg="error getting bundle stream" action="refresh cache" err="rpc error: code = Unavailable desc = connection error: desc = \"transport: Error while dialing: dial tcp 10.96.177.90:50051: connect: connection refused\"" source="{operatorhubio-catalog olm}"
            time="2024-09-05T11:23:20Z" level=info msg="updating PackageManifest based on CatalogSource changes: {operatorhubio-catalog olm}" action="sync catalogsource" address="operatorhubio-catalog.olm.svc:50051" name=operatorhubio-catalog namespace=olm
            time="2024-09-05T11:23:22Z" level=info msg="updating PackageManifest based on CatalogSource changes: {operatorhubio-catalog olm}" action="sync catalogsource" address="operatorhubio-catalog.olm.svc:50051" name=operatorhubio-catalog namespace=olm
            time="2024-09-05T12:22:58Z" level=info msg="updating PackageManifest based on CatalogSource changes: {operatorhubio-catalog olm}" action="sync catalogsource" address="operatorhubio-catalog.olm.svc:50051" name=operatorhubio-catalog namespace=olm
            E0905 13:06:04.771550       1 timeout.go:142] post-timeout activity - time-elapsed: 106.539011ms, GET "/healthz" result: <nil>
            time="2024-09-05T13:22:58Z" level=info msg="updating PackageManifest based on CatalogSource changes: {operatorhubio-catalog olm}" action="sync catalogsource" address="operatorhubio-catalog.olm.svc:50051" name=operatorhubio-catalog namespace=olm
            time="2024-09-05T14:22:59Z" level=info msg="updating PackageManifest based on CatalogSource changes: {operatorhubio-catalog olm}" action="sync catalogsource" address="operatorhubio-catalog.olm.svc:50051" name=operatorhubio-catalog namespace=olm
            time="2024-09-05T15:23:00Z" level=info msg="updating PackageManifest based on CatalogSource changes: {operatorhubio-catalog olm}" action="sync catalogsource" address="operatorhubio-catalog.olm.svc:50051" name=operatorhubio-catalog namespace=olm
          reason: Unknown
          startedAt: "2024-09-03T06:55:22Z"
      name: packageserver
      ready: true
      restartCount: 33
      started: true
      state:
        running:
          startedAt: "2024-09-06T03:35:59Z"
    hostIP: 172.18.0.5
    hostIPs:
    - ip: 172.18.0.5
    phase: Running
    podIP: 10.244.1.7
    podIPs:
    - ip: 10.244.1.7
    qosClass: Burstable
    startTime: "2024-08-09T10:48:06Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "argoproj.io/v1alpha1",
            "kind": "AppProject",
            "metadata": {
              "name": "example"
            },
            "spec": null
          },
          {
            "apiVersion": "argoproj.io/v1alpha1",
            "kind": "Application",
            "metadata": {
              "name": "example"
            },
            "spec": null
          },
          {
            "apiVersion": "argoproj.io/v1alpha1",
            "kind": "ApplicationSet",
            "metadata": {
              "name": "example"
            },
            "spec": null
          },
          {
            "apiVersion": "argoproj.io/v1alpha1",
            "kind": "ArgoCD",
            "metadata": {
              "name": "argocd-sample"
            },
            "spec": {
              "controller": {
                "resources": {
                  "limits": {
                    "cpu": "2000m",
                    "memory": "2048Mi"
                  },
                  "requests": {
                    "cpu": "250m",
                    "memory": "1024Mi"
                  }
                }
              },
              "ha": {
                "enabled": false,
                "resources": {
                  "limits": {
                    "cpu": "500m",
                    "memory": "256Mi"
                  },
                  "requests": {
                    "cpu": "250m",
                    "memory": "128Mi"
                  }
                }
              },
              "redis": {
                "resources": {
                  "limits": {
                    "cpu": "500m",
                    "memory": "256Mi"
                  },
                  "requests": {
                    "cpu": "250m",
                    "memory": "128Mi"
                  }
                }
              },
              "repo": {
                "resources": {
                  "limits": {
                    "cpu": "1000m",
                    "memory": "512Mi"
                  },
                  "requests": {
                    "cpu": "250m",
                    "memory": "256Mi"
                  }
                }
              },
              "server": {
                "resources": {
                  "limits": {
                    "cpu": "500m",
                    "memory": "256Mi"
                  },
                  "requests": {
                    "cpu": "125m",
                    "memory": "128Mi"
                  }
                },
                "route": {
                  "enabled": true
                }
              },
              "sso": {
                "dex": {
                  "resources": {
                    "limits": {
                      "cpu": "500m",
                      "memory": "256Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "128Mi"
                    }
                  }
                },
                "provider": "dex"
              }
            }
          },
          {
            "apiVersion": "argoproj.io/v1alpha1",
            "kind": "ArgoCDExport",
            "metadata": {
              "name": "argocdexport-sample"
            },
            "spec": {
              "argocd": "argocd-sample"
            }
          },
          {
            "apiVersion": "argoproj.io/v1alpha1",
            "kind": "NotificationsConfiguration",
            "metadata": {
              "name": "default-notifications-configuration"
            },
            "spec": {
              "templates": {
                "template.app-created": "email:\n  subject: Application {{.app.metadata.name}} has been created.\nmessage: Application {{.app.metadata.name}} has been created.\nteams:\n  title: Application {{.app.metadata.name}} has been created.",
                "template.app-deleted": "email:\n  subject: Application {{.app.metadata.name}} has been deleted.\nmessage: Application {{.app.metadata.name}} has been deleted.\nteams:\n  title: Application {{.app.metadata.name}} has been deleted.",
                "template.app-deployed": "email:\n  subject: New version of an application {{.app.metadata.name}} is up and running.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} is now running new version of deployments manifests.\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#18be52\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Revision\",\n        \"value\": \"{{.app.status.sync.revision}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    },\n    {\n      \"name\": \"Revision\",\n      \"value\": \"{{.app.status.sync.revision}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Operation Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#000080'\n  title: New version of an application {{.app.metadata.name}} is up and running.",
                "template.app-health-degraded": "email:\n  subject: Application {{.app.metadata.name}} has degraded.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}} Application {{.app.metadata.name}} has degraded.\n  Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\": \"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#f4c030\",\n      \"fields\": [\n      {\n        \"title\": \"Health Status\",\n        \"value\": \"{{.app.status.health.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Health Status\",\n      \"value\": \"{{.app.status.health.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#FF0000'\n  title: Application {{.app.metadata.name}} has degraded.",
                "template.app-sync-failed": "email:\n  subject: Failed to sync application {{.app.metadata.name}}.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}}  The sync operation of application {{.app.metadata.name}} has failed at {{.app.status.operationState.finishedAt}} with the following error: {{.app.status.operationState.message}}\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#E96D76\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Failed at\",\n      \"value\": \"{{.app.status.operationState.finishedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Operation\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#FF0000'\n  title: Failed to sync application {{.app.metadata.name}}.",
                "template.app-sync-running": "email:\n  subject: Start syncing application {{.app.metadata.name}}.\nmessage: |\n  The sync operation of application {{.app.metadata.name}} has started at {{.app.status.operationState.startedAt}}.\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#0DADEA\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Started at\",\n      \"value\": \"{{.app.status.operationState.startedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Operation\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  title: Start syncing application {{.app.metadata.name}}.",
                "template.app-sync-status-unknown": "email:\n  subject: Application {{.app.metadata.name}} sync status is 'Unknown'\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}} Application {{.app.metadata.name}} sync is 'Unknown'.\n  Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.\n  {{if ne .serviceType \"slack\"}}\n  {{range $c := .app.status.conditions}}\n      * {{$c.message}}\n  {{end}}\n  {{end}}\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#E96D76\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  title: Application {{.app.metadata.name}} sync status is 'Unknown'",
                "template.app-sync-succeeded": "email:\n  subject: Application {{.app.metadata.name}} has been successfully synced.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} has been successfully synced at {{.app.status.operationState.finishedAt}}.\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#18be52\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Synced at\",\n      \"value\": \"{{.app.status.operationState.finishedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Operation Details\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#000080'\n  title: Application {{.app.metadata.name}} has been successfully synced"
              },
              "triggers": {
                "trigger.on-created": "- description: Application is created.\n  oncePer: app.metadata.name\n  send:\n  - app-created\n  when: \"true\"",
                "trigger.on-deleted": "- description: Application is deleted.\n  oncePer: app.metadata.name\n  send:\n  - app-deleted\n  when: app.metadata.deletionTimestamp != nil",
                "trigger.on-deployed": "- description: Application is synced and healthy. Triggered once per commit.\n  oncePer: app.status.operationState.syncResult.revision\n  send:\n  - app-deployed\n  when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status\n      == 'Healthy'",
                "trigger.on-health-degraded": "- description: Application has degraded\n  send:\n  - app-health-degraded\n  when: app.status.health.status == 'Degraded'",
                "trigger.on-sync-failed": "- description: Application syncing has failed\n  send:\n  - app-sync-failed\n  when: app.status.operationState.phase in ['Error', 'Failed']",
                "trigger.on-sync-running": "- description: Application is being synced\n  send:\n  - app-sync-running\n  when: app.status.operationState.phase in ['Running']",
                "trigger.on-sync-status-unknown": "- description: Application status is 'Unknown'\n  send:\n  - app-sync-status-unknown\n  when: app.status.sync.status == 'Unknown'",
                "trigger.on-sync-succeeded": "- description: Application syncing has succeeded\n  send:\n  - app-sync-succeeded\n  when: app.status.operationState.phase in ['Succeeded']"
              }
            }
          },
          {
            "apiVersion": "argoproj.io/v1beta1",
            "kind": "ArgoCD",
            "metadata": {
              "name": "argocd-sample"
            },
            "spec": {
              "controller": {
                "resources": {
                  "limits": {
                    "cpu": "2000m",
                    "memory": "2048Mi"
                  },
                  "requests": {
                    "cpu": "250m",
                    "memory": "1024Mi"
                  }
                }
              },
              "ha": {
                "enabled": false,
                "resources": {
                  "limits": {
                    "cpu": "500m",
                    "memory": "256Mi"
                  },
                  "requests": {
                    "cpu": "250m",
                    "memory": "128Mi"
                  }
                }
              },
              "redis": {
                "resources": {
                  "limits": {
                    "cpu": "500m",
                    "memory": "256Mi"
                  },
                  "requests": {
                    "cpu": "250m",
                    "memory": "128Mi"
                  }
                }
              },
              "repo": {
                "resources": {
                  "limits": {
                    "cpu": "1000m",
                    "memory": "512Mi"
                  },
                  "requests": {
                    "cpu": "250m",
                    "memory": "256Mi"
                  }
                }
              },
              "server": {
                "resources": {
                  "limits": {
                    "cpu": "500m",
                    "memory": "256Mi"
                  },
                  "requests": {
                    "cpu": "125m",
                    "memory": "128Mi"
                  }
                },
                "route": {
                  "enabled": true
                }
              },
              "sso": {
                "dex": {
                  "resources": {
                    "limits": {
                      "cpu": "500m",
                      "memory": "256Mi"
                    },
                    "requests": {
                      "cpu": "250m",
                      "memory": "128Mi"
                    }
                  }
                },
                "provider": "dex"
              }
            }
          }
        ]
      capabilities: Deep Insights
      categories: Integration & Delivery
      certified: "false"
      containerImage: quay.io/argoprojlabs/argocd-operator@sha256:405e7bde25affb7644c576a7f2d41ba30b88e2ef4f2f11945b920a33517895ce
      createdAt: "2024-08-28T12:00:21Z"
      description: Argo CD is a declarative, GitOps continuous delivery tool for Kubernetes.
      kubectl.kubernetes.io/default-container: manager
      olm.operatorGroup: global-operators
      olm.operatorNamespace: operators
      olm.targetNamespaces: ""
      olmcahash: e065e9681f639701c81098d07f53efe80cffbae5a580f1d5a3424be50984ee21
      operatorframework.io/properties: '{"properties":[{"type":"olm.gvk","value":{"group":"argoproj.io","kind":"AppProject","version":"v1alpha1"}},{"type":"olm.gvk","value":{"group":"argoproj.io","kind":"Application","version":"v1alpha1"}},{"type":"olm.gvk","value":{"group":"argoproj.io","kind":"ApplicationSet","version":"v1alpha1"}},{"type":"olm.gvk","value":{"group":"argoproj.io","kind":"ArgoCD","version":"v1alpha1"}},{"type":"olm.gvk","value":{"group":"argoproj.io","kind":"ArgoCD","version":"v1beta1"}},{"type":"olm.gvk","value":{"group":"argoproj.io","kind":"ArgoCDExport","version":"v1alpha1"}},{"type":"olm.gvk","value":{"group":"argoproj.io","kind":"NotificationsConfiguration","version":"v1alpha1"}},{"type":"olm.package","value":{"packageName":"argocd-operator","version":"0.12.0"}}]}'
      operators.operatorframework.io/builder: operator-sdk-v1.35.0
      operators.operatorframework.io/project_layout: go.kubebuilder.io/v4
      repository: https://github.com/argoproj-labs/argocd-operator
      support: Argo CD
    creationTimestamp: "2024-09-03T08:40:12Z"
    generateName: argocd-operator-controller-manager-6989f46474-
    labels:
      control-plane: controller-manager
      pod-template-hash: 6989f46474
    name: argocd-operator-controller-manager-6989f46474-jx6w7
    namespace: operators
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: argocd-operator-controller-manager-6989f46474
      uid: 87674001-a4e6-4446-b9aa-449886f5457b
    resourceVersion: "1508260"
    uid: 4b6d7787-0998-4857-b16d-0358c276b9f6
  spec:
    containers:
    - args:
      - --leader-elect
      command:
      - /manager
      env:
      - name: WATCH_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.annotations['olm.targetNamespaces']
      - name: ENABLE_CONVERSION_WEBHOOK
        value: "true"
      - name: OPERATOR_CONDITION_NAME
        value: argocd-operator.v0.12.0
      image: quay.io/argoprojlabs/argocd-operator@sha256:405e7bde25affb7644c576a7f2d41ba30b88e2ef4f2f11945b920a33517895ce
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 8081
          scheme: HTTP
        initialDelaySeconds: 15
        periodSeconds: 20
        successThreshold: 1
        timeoutSeconds: 1
      name: manager
      ports:
      - containerPort: 9443
        name: webhook-server
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /readyz
          port: 8081
          scheme: HTTP
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsNonRoot: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /apiserver.local.config/certificates
        name: apiservice-cert
      - mountPath: /tmp/k8s-webhook-server/serving-certs
        name: webhook-cert
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-qk42j
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: cluster2-worker2
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      runAsNonRoot: true
    serviceAccount: argocd-operator-controller-manager
    serviceAccountName: argocd-operator-controller-manager
    terminationGracePeriodSeconds: 10
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: apiservice-cert
      secret:
        defaultMode: 420
        items:
        - key: tls.crt
          path: apiserver.crt
        - key: tls.key
          path: apiserver.key
        secretName: argocd-operator-controller-manager-service-cert
    - name: webhook-cert
      secret:
        defaultMode: 420
        items:
        - key: tls.crt
          path: tls.crt
        - key: tls.key
          path: tls.key
        secretName: argocd-operator-controller-manager-service-cert
    - name: kube-api-access-qk42j
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T03:35:58Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2024-09-03T08:40:12Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T04:35:48Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2024-09-06T04:35:48Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2024-09-03T08:40:12Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://300a8a065093fe23f7700ff260402c0b8ce2303648f245082a48b0630c6cce1e
      image: sha256:8964f245f40d9f244947022239f6ec45eaea87de494beb4dd77aab5d223841fc
      imageID: quay.io/argoprojlabs/argocd-operator@sha256:405e7bde25affb7644c576a7f2d41ba30b88e2ef4f2f11945b920a33517895ce
      lastState:
        terminated:
          containerID: containerd://1b9733c8db6eeda244b8b5c00de0b2b345165b77dc5095ca6d6e151a4df51be7
          exitCode: 2
          finishedAt: "2024-09-06T04:15:42Z"
          reason: Error
          startedAt: "2024-09-06T04:14:43Z"
      name: manager
      ready: true
      restartCount: 15
      started: true
      state:
        running:
          startedAt: "2024-09-06T04:34:43Z"
    hostIP: 172.18.0.2
    hostIPs:
    - ip: 172.18.0.2
    phase: Running
    podIP: 10.244.3.8
    podIPs:
    - ip: 10.244.3.8
    qosClass: BestEffort
    startTime: "2024-09-03T08:40:12Z"
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"env":"demo"},"name":"clutserip-service","namespace":"default"},"spec":{"ports":[{"port":80,"targetPort":80}],"selector":{"env":"demo"},"type":"ClusterIP"}}
    creationTimestamp: "2024-08-30T11:35:45Z"
    labels:
      env: demo
    name: clutserip-service
    namespace: default
    resourceVersion: "971577"
    uid: a3d2ddc2-2399-46eb-9568-d945e6367593
  spec:
    clusterIP: 10.96.185.207
    clusterIPs:
    - 10.96.185.207
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - port: 80
      protocol: TCP
      targetPort: 80
    selector:
      env: demo
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2024-08-09T10:57:58Z"
    labels:
      app.kubernetes.io/component: metrics
      app.kubernetes.io/managed-by: example-argocd
      app.kubernetes.io/name: example-argocd-metrics
      app.kubernetes.io/part-of: argocd
    name: example-argocd-metrics
    namespace: default
    ownerReferences:
    - apiVersion: argoproj.io/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: ArgoCD
      name: example-argocd
      uid: 1b3c36d4-9531-41c8-99cc-1f4be25a49b0
    resourceVersion: "2638"
    uid: 347bb544-dc47-40bb-950c-5b02a2299882
  spec:
    clusterIP: 10.96.188.73
    clusterIPs:
    - 10.96.188.73
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: metrics
      port: 8082
      protocol: TCP
      targetPort: 8082
    selector:
      app.kubernetes.io/name: example-argocd-application-controller
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2024-08-09T10:57:58Z"
    labels:
      app.kubernetes.io/component: redis
      app.kubernetes.io/managed-by: example-argocd
      app.kubernetes.io/name: example-argocd-redis
      app.kubernetes.io/part-of: argocd
    name: example-argocd-redis
    namespace: default
    ownerReferences:
    - apiVersion: argoproj.io/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: ArgoCD
      name: example-argocd
      uid: 1b3c36d4-9531-41c8-99cc-1f4be25a49b0
    resourceVersion: "2642"
    uid: 06da0da3-0486-447b-a339-1b384e2fc901
  spec:
    clusterIP: 10.96.33.13
    clusterIPs:
    - 10.96.33.13
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: tcp-redis
      port: 6379
      protocol: TCP
      targetPort: 6379
    selector:
      app.kubernetes.io/name: example-argocd-redis
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2024-08-09T10:57:58Z"
    labels:
      app.kubernetes.io/component: repo-server
      app.kubernetes.io/managed-by: example-argocd
      app.kubernetes.io/name: example-argocd-repo-server
      app.kubernetes.io/part-of: argocd
    name: example-argocd-repo-server
    namespace: default
    ownerReferences:
    - apiVersion: argoproj.io/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: ArgoCD
      name: example-argocd
      uid: 1b3c36d4-9531-41c8-99cc-1f4be25a49b0
    resourceVersion: "2646"
    uid: 54da0f69-9e58-44c0-9c6a-6e829d5ee9e1
  spec:
    clusterIP: 10.96.87.196
    clusterIPs:
    - 10.96.87.196
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: server
      port: 8081
      protocol: TCP
      targetPort: 8081
    - name: metrics
      port: 8084
      protocol: TCP
      targetPort: 8084
    selector:
      app.kubernetes.io/name: example-argocd-repo-server
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2024-08-09T10:57:58Z"
    labels:
      app.kubernetes.io/component: server
      app.kubernetes.io/managed-by: example-argocd
      app.kubernetes.io/name: example-argocd-server
      app.kubernetes.io/part-of: argocd
    name: example-argocd-server
    namespace: default
    ownerReferences:
    - apiVersion: argoproj.io/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: ArgoCD
      name: example-argocd
      uid: 1b3c36d4-9531-41c8-99cc-1f4be25a49b0
    resourceVersion: "3209"
    uid: ee4fbd98-4732-4ac7-9b19-116e9598b5b8
  spec:
    clusterIP: 10.96.69.217
    clusterIPs:
    - 10.96.69.217
    externalTrafficPolicy: Cluster
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: http
      nodePort: 30090
      port: 80
      protocol: TCP
      targetPort: 8080
    - name: https
      nodePort: 31307
      port: 443
      protocol: TCP
      targetPort: 8080
    selector:
      app.kubernetes.io/name: example-argocd-server
    sessionAffinity: None
    type: NodePort
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2024-08-09T10:57:58Z"
    labels:
      app.kubernetes.io/component: server
      app.kubernetes.io/managed-by: example-argocd
      app.kubernetes.io/name: example-argocd-server-metrics
      app.kubernetes.io/part-of: argocd
    name: example-argocd-server-metrics
    namespace: default
    ownerReferences:
    - apiVersion: argoproj.io/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: ArgoCD
      name: example-argocd
      uid: 1b3c36d4-9531-41c8-99cc-1f4be25a49b0
    resourceVersion: "2650"
    uid: cd8f734a-678d-4061-ab94-f4ae363b7600
  spec:
    clusterIP: 10.96.222.142
    clusterIPs:
    - 10.96.222.142
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: metrics
      port: 8083
      protocol: TCP
      targetPort: 8083
    selector:
      app.kubernetes.io/name: example-argocd-server
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"name":"ingress","namespace":"default"},"spec":{"ports":[{"port":80,"protocol":"TCP","targetPort":80}],"selector":{"app":"flask"}}}
    creationTimestamp: "2024-08-25T14:55:13Z"
    name: ingress
    namespace: default
    resourceVersion: "658035"
    uid: 0f184a08-bc99-4899-8c40-2fddd46c8f83
  spec:
    clusterIP: 10.96.252.188
    clusterIPs:
    - 10.96.252.188
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - port: 80
      protocol: TCP
      targetPort: 80
    selector:
      app: flask
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2024-08-09T10:45:35Z"
    labels:
      component: apiserver
      provider: kubernetes
    name: kubernetes
    namespace: default
    resourceVersion: "197"
    uid: 07c87d9a-9a2c-4a4c-a250-9aa58c805b89
  spec:
    clusterIP: 10.96.0.1
    clusterIPs:
    - 10.96.0.1
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: https
      port: 443
      protocol: TCP
      targetPort: 6443
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app":"nginx"},"name":"nginx-deployment","namespace":"default"},"spec":{"ports":[{"port":80,"targetPort":80}],"selector":{"app":"nginx"},"type":"ClusterIP"}}
    creationTimestamp: "2024-08-14T05:49:33Z"
    labels:
      app: nginx
    name: nginx-deployment
    namespace: default
    resourceVersion: "244447"
    uid: d7eabe15-e73e-4939-bb01-c3510c330f49
  spec:
    clusterIP: 10.96.247.121
    clusterIPs:
    - 10.96.247.121
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - port: 80
      protocol: TCP
      targetPort: 80
    selector:
      app: nginx
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app":"nginx"},"name":"nginx-deployment1","namespace":"default"},"spec":{"ports":[{"port":80,"targetPort":80}],"selector":{"app":"nginx"},"type":"ClusterIP"}}
    creationTimestamp: "2024-08-14T05:54:14Z"
    labels:
      app: nginx
    name: nginx-deployment1
    namespace: default
    resourceVersion: "245077"
    uid: 6898b1af-80f2-43da-87dd-41791105c7d5
  spec:
    clusterIP: 10.96.20.140
    clusterIPs:
    - 10.96.20.140
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - port: 80
      protocol: TCP
      targetPort: 80
    selector:
      app: nginx
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app.kubernetes.io/instance":"test"},"name":"spring-boot-app-service","namespace":"default"},"spec":{"ports":[{"name":"http","port":80,"protocol":"TCP","targetPort":8080}],"selector":{"app":"spring-boot-app"},"type":"NodePort"}}
    creationTimestamp: "2024-08-09T11:31:41Z"
    labels:
      app.kubernetes.io/instance: test
    name: spring-boot-app-service
    namespace: default
    resourceVersion: "7076"
    uid: 89452813-3e86-4193-9195-8d7dc8066469
  spec:
    clusterIP: 10.96.8.43
    clusterIPs:
    - 10.96.8.43
    externalTrafficPolicy: Cluster
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: http
      nodePort: 30267
      port: 80
      protocol: TCP
      targetPort: 8080
    selector:
      app: spring-boot-app
    sessionAffinity: None
    type: NodePort
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"env":"dev"},"name":"verdaccio-service","namespace":"default"},"spec":{"ports":[{"nodePort":30007,"port":4873,"targetPort":4873}],"selector":{"env":"dev"},"type":"NodePort"}}
    creationTimestamp: "2024-09-02T12:20:59Z"
    labels:
      env: dev
    name: verdaccio-service
    namespace: default
    resourceVersion: "1172106"
    uid: c3511630-2a8d-40f6-bf74-05ad54801739
  spec:
    clusterIP: 10.96.102.171
    clusterIPs:
    - 10.96.102.171
    externalTrafficPolicy: Cluster
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - nodePort: 30007
      port: 4873
      protocol: TCP
      targetPort: 4873
    selector:
      env: dev
    sessionAffinity: None
    type: NodePort
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{"service.beta.kubernetes.io/aws-load-balancer-backend-protocol":"tcp","service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled":"true","service.beta.kubernetes.io/aws-load-balancer-type":"nlb"},"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"ingress-nginx","app.kubernetes.io/name":"ingress-nginx","app.kubernetes.io/part-of":"ingress-nginx","app.kubernetes.io/version":"1.11.2"},"name":"ingress-nginx-controller","namespace":"ingress-nginx"},"spec":{"externalTrafficPolicy":"Local","ipFamilies":["IPv4"],"ipFamilyPolicy":"SingleStack","ports":[{"appProtocol":"http","name":"http","port":80,"protocol":"TCP","targetPort":"http"},{"appProtocol":"https","name":"https","port":443,"protocol":"TCP","targetPort":"https"}],"selector":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"ingress-nginx","app.kubernetes.io/name":"ingress-nginx"},"type":"LoadBalancer"}}
      service.beta.kubernetes.io/aws-load-balancer-backend-protocol: tcp
      service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
      service.beta.kubernetes.io/aws-load-balancer-type: nlb
    creationTimestamp: "2024-08-25T15:02:21Z"
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.11.2
    name: ingress-nginx-controller
    namespace: ingress-nginx
    resourceVersion: "674918"
    uid: 5816f7f7-cefb-47d8-bb4c-8362c9ce130e
  spec:
    clusterIP: 10.96.102.19
    clusterIPs:
    - 10.96.102.19
    externalTrafficPolicy: Local
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - appProtocol: http
      name: http
      nodePort: 31364
      port: 80
      protocol: TCP
      targetPort: http
    - appProtocol: https
      name: https
      nodePort: 32646
      port: 443
      protocol: TCP
      targetPort: https
    selector:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/name: ingress-nginx
    sessionAffinity: None
    type: NodePort
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"ingress-nginx","app.kubernetes.io/name":"ingress-nginx","app.kubernetes.io/part-of":"ingress-nginx","app.kubernetes.io/version":"1.11.2"},"name":"ingress-nginx-controller-admission","namespace":"ingress-nginx"},"spec":{"ports":[{"appProtocol":"https","name":"https-webhook","port":443,"targetPort":"webhook"}],"selector":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"ingress-nginx","app.kubernetes.io/name":"ingress-nginx"},"type":"ClusterIP"}}
    creationTimestamp: "2024-08-25T15:02:21Z"
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.11.2
    name: ingress-nginx-controller-admission
    namespace: ingress-nginx
    resourceVersion: "658970"
    uid: f057fb25-0a3d-48db-9256-b05774ee9890
  spec:
    clusterIP: 10.96.24.11
    clusterIPs:
    - 10.96.24.11
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - appProtocol: https
      name: https-webhook
      port: 443
      protocol: TCP
      targetPort: webhook
    selector:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/name: ingress-nginx
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      prometheus.io/port: "9153"
      prometheus.io/scrape: "true"
    creationTimestamp: "2024-08-09T10:45:36Z"
    labels:
      k8s-app: kube-dns
      kubernetes.io/cluster-service: "true"
      kubernetes.io/name: CoreDNS
    name: kube-dns
    namespace: kube-system
    resourceVersion: "243"
    uid: b210ff65-559d-4b8d-9fab-53d7b4e93bbb
  spec:
    clusterIP: 10.96.0.10
    clusterIPs:
    - 10.96.0.10
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: dns
      port: 53
      protocol: UDP
      targetPort: 53
    - name: dns-tcp
      port: 53
      protocol: TCP
      targetPort: 53
    - name: metrics
      port: 9153
      protocol: TCP
      targetPort: 9153
    selector:
      k8s-app: kube-dns
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2024-08-09T10:48:16Z"
    labels:
      olm.managed: "true"
      olm.service-spec-hash: 2rWaV7jFOkBrglX4gIKIaaewvmWzC5ocyetrVH
    name: operatorhubio-catalog
    namespace: olm
    ownerReferences:
    - apiVersion: operators.coreos.com/v1alpha1
      blockOwnerDeletion: false
      controller: false
      kind: CatalogSource
      name: operatorhubio-catalog
      uid: ab29c797-3d98-4266-93de-d16a51ba71b5
    resourceVersion: "949"
    uid: b64b04c1-4f7a-4a3a-a50a-7eba5326b0f8
  spec:
    clusterIP: 10.96.177.90
    clusterIPs:
    - 10.96.177.90
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: grpc
      port: 50051
      protocol: TCP
      targetPort: 50051
    selector:
      olm.catalogSource: operatorhubio-catalog
      olm.managed: "true"
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2024-08-09T10:48:06Z"
    labels:
      olm.managed: "true"
    name: packageserver-service
    namespace: olm
    ownerReferences:
    - apiVersion: operators.coreos.com/v1alpha1
      blockOwnerDeletion: false
      controller: false
      kind: ClusterServiceVersion
      name: packageserver
      uid: a7e0752f-dc16-4f0f-bf36-8abd1076e9ef
    resourceVersion: "889"
    uid: 053f27a5-b8a5-4a86-a0f4-3fa5edbe74b8
  spec:
    clusterIP: 10.96.19.105
    clusterIPs:
    - 10.96.19.105
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: "5443"
      port: 5443
      protocol: TCP
      targetPort: 5443
    selector:
      app: packageserver
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2024-08-09T10:49:24Z"
    labels:
      control-plane: controller-manager
      olm.managed: "true"
      operators.coreos.com/argocd-operator.operators: ""
    name: argocd-operator-controller-manager-metrics-service
    namespace: operators
    ownerReferences:
    - apiVersion: operators.coreos.com/v1alpha1
      blockOwnerDeletion: false
      controller: false
      kind: ClusterServiceVersion
      name: argocd-operator.v0.12.0
      uid: 84eb5be3-541c-44d5-8e26-d16b05a58c42
    resourceVersion: "1232547"
    uid: ad5be76e-7b55-4ce8-9671-0fd405994ed4
  spec:
    clusterIP: 10.96.100.212
    clusterIPs:
    - 10.96.100.212
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: https
      port: 8443
      protocol: TCP
      targetPort: 8080
    selector:
      control-plane: controller-manager
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2024-08-09T10:49:26Z"
    labels:
      olm.managed: "true"
      operators.coreos.com/argocd-operator.operators: ""
    name: argocd-operator-controller-manager-service
    namespace: operators
    ownerReferences:
    - apiVersion: operators.coreos.com/v1alpha1
      blockOwnerDeletion: false
      controller: false
      kind: ClusterServiceVersion
      name: argocd-operator.v0.12.0
      uid: 84eb5be3-541c-44d5-8e26-d16b05a58c42
    resourceVersion: "1232324"
    uid: 727036e1-7b5d-45fb-8b70-4ef045bf4a83
  spec:
    clusterIP: 10.96.138.102
    clusterIPs:
    - 10.96.138.102
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: "443"
      port: 443
      protocol: TCP
      targetPort: 9443
    selector:
      control-plane: controller-manager
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2024-08-09T10:49:24Z"
    labels:
      olm.managed: "true"
      operators.coreos.com/argocd-operator.operators: ""
    name: argocd-operator-webhook-service
    namespace: operators
    ownerReferences:
    - apiVersion: operators.coreos.com/v1alpha1
      blockOwnerDeletion: false
      controller: false
      kind: ClusterServiceVersion
      name: argocd-operator.v0.12.0
      uid: 84eb5be3-541c-44d5-8e26-d16b05a58c42
    resourceVersion: "1232521"
    uid: d3f5944e-21e7-4fca-a725-deb3208040c4
  spec:
    clusterIP: 10.96.85.113
    clusterIPs:
    - 10.96.85.113
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - port: 443
      protocol: TCP
      targetPort: 9443
    selector:
      control-plane: controller-manager
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
    creationTimestamp: "2024-08-09T10:45:38Z"
    generation: 1
    labels:
      app: kindnet
      k8s-app: kindnet
      tier: node
    name: kindnet
    namespace: kube-system
    resourceVersion: "580"
    uid: 97ae595e-be70-4845-810a-a625dd57df4b
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: kindnet
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: kindnet
          k8s-app: kindnet
          tier: node
      spec:
        containers:
        - env:
          - name: HOST_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.hostIP
          - name: POD_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          - name: POD_SUBNET
            value: 10.244.0.0/16
          - name: CONTROL_PLANE_ENDPOINT
            value: cluster2-control-plane:6443
          image: docker.io/kindest/kindnetd:v20240202-8f1494ea
          imagePullPolicy: IfNotPresent
          name: kindnet-cni
          resources:
            limits:
              cpu: 100m
              memory: 50Mi
            requests:
              cpu: 100m
              memory: 50Mi
          securityContext:
            capabilities:
              add:
              - NET_RAW
              - NET_ADMIN
            privileged: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/cni/net.d
            name: cni-cfg
          - mountPath: /run/xtables.lock
            name: xtables-lock
          - mountPath: /lib/modules
            name: lib-modules
            readOnly: true
        dnsPolicy: ClusterFirst
        hostNetwork: true
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kindnet
        serviceAccountName: kindnet
        terminationGracePeriodSeconds: 30
        tolerations:
        - operator: Exists
        volumes:
        - hostPath:
            path: /etc/cni/net.d
            type: ""
          name: cni-cfg
        - hostPath:
            path: /run/xtables.lock
            type: FileOrCreate
          name: xtables-lock
        - hostPath:
            path: /lib/modules
            type: ""
          name: lib-modules
    updateStrategy:
      rollingUpdate:
        maxSurge: 0
        maxUnavailable: 1
      type: RollingUpdate
  status:
    currentNumberScheduled: 4
    desiredNumberScheduled: 4
    numberAvailable: 4
    numberMisscheduled: 0
    numberReady: 4
    observedGeneration: 1
    updatedNumberScheduled: 4
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
    creationTimestamp: "2024-08-09T10:45:36Z"
    generation: 1
    labels:
      k8s-app: kube-proxy
    name: kube-proxy
    namespace: kube-system
    resourceVersion: "1660268"
    uid: c80c6efb-359f-413c-954b-fa6b6c6273c0
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: kube-proxy
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: kube-proxy
      spec:
        containers:
        - command:
          - /usr/local/bin/kube-proxy
          - --config=/var/lib/kube-proxy/config.conf
          - --hostname-override=$(NODE_NAME)
          env:
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          image: registry.k8s.io/kube-proxy:v1.30.0
          imagePullPolicy: IfNotPresent
          name: kube-proxy
          resources: {}
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/kube-proxy
            name: kube-proxy
          - mountPath: /run/xtables.lock
            name: xtables-lock
          - mountPath: /lib/modules
            name: lib-modules
            readOnly: true
        dnsPolicy: ClusterFirst
        hostNetwork: true
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kube-proxy
        serviceAccountName: kube-proxy
        terminationGracePeriodSeconds: 30
        tolerations:
        - operator: Exists
        volumes:
        - configMap:
            defaultMode: 420
            name: kube-proxy
          name: kube-proxy
        - hostPath:
            path: /run/xtables.lock
            type: FileOrCreate
          name: xtables-lock
        - hostPath:
            path: /lib/modules
            type: ""
          name: lib-modules
    updateStrategy:
      rollingUpdate:
        maxSurge: 0
        maxUnavailable: 1
      type: RollingUpdate
  status:
    currentNumberScheduled: 4
    desiredNumberScheduled: 4
    numberAvailable: 3
    numberMisscheduled: 0
    numberReady: 3
    numberUnavailable: 1
    observedGeneration: 1
    updatedNumberScheduled: 4
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-08-09T10:57:58Z"
    generation: 1
    labels:
      app.kubernetes.io/component: redis
      app.kubernetes.io/managed-by: example-argocd
      app.kubernetes.io/name: example-argocd-redis
      app.kubernetes.io/part-of: argocd
    name: example-argocd-redis
    namespace: default
    ownerReferences:
    - apiVersion: argoproj.io/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: ArgoCD
      name: example-argocd
      uid: 1b3c36d4-9531-41c8-99cc-1f4be25a49b0
    resourceVersion: "1502825"
    uid: 787e3858-7e44-4b92-b3b5-ca1e2f242278
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/name: example-argocd-redis
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: example-argocd-redis
      spec:
        containers:
        - args:
          - --save
          - ""
          - --appendonly
          - "no"
          - --requirepass $(REDIS_PASSWORD)
          env:
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: admin.password
                name: example-argocd-redis-initial-password
          image: redis@sha256:8061ca607db2a0c80010aeb5fc9bed0253448bc68711eaa14253a392f6c48280
          imagePullPolicy: Always
          name: redis
          ports:
          - containerPort: 6379
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 999
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /app/config/redis/tls
            name: argocd-operator-redis-tls
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: example-argocd-argocd-redis
        serviceAccountName: example-argocd-argocd-redis
        terminationGracePeriodSeconds: 30
        volumes:
        - name: argocd-operator-redis-tls
          secret:
            defaultMode: 420
            optional: true
            secretName: argocd-operator-redis-tls
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-08-09T10:57:58Z"
      lastUpdateTime: "2024-08-09T10:58:06Z"
      message: ReplicaSet "example-argocd-redis-56f6446c6d" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2024-09-06T03:37:08Z"
      lastUpdateTime: "2024-09-06T03:37:08Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "2"
    creationTimestamp: "2024-08-09T10:57:58Z"
    generation: 2
    labels:
      app.kubernetes.io/component: repo-server
      app.kubernetes.io/managed-by: example-argocd
      app.kubernetes.io/name: example-argocd-repo-server
      app.kubernetes.io/part-of: argocd
    name: example-argocd-repo-server
    namespace: default
    ownerReferences:
    - apiVersion: argoproj.io/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: ArgoCD
      name: example-argocd
      uid: 1b3c36d4-9531-41c8-99cc-1f4be25a49b0
    resourceVersion: "1502862"
    uid: 970f9122-e410-4baf-b212-77cc4bf7223f
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/name: example-argocd-repo-server
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: example-argocd-repo-server
          image.upgraded: 09032024-084024-UTC
      spec:
        automountServiceAccountToken: false
        containers:
        - command:
          - uid_entrypoint.sh
          - argocd-repo-server
          - --redis
          - example-argocd-redis.default.svc.cluster.local:6379
          - --loglevel
          - info
          - --logformat
          - text
          env:
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: admin.password
                name: example-argocd-redis-initial-password
          image: quay.io/argoproj/argocd@sha256:a0ebfa7d419a1c78babc80fc77de093751d8a5fabffcaf3f7e81a4d55a23cc0d
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 8081
            timeoutSeconds: 1
          name: argocd-repo-server
          ports:
          - containerPort: 8081
            name: server
            protocol: TCP
          - containerPort: 8084
            name: metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 8081
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /app/config/ssh
            name: ssh-known-hosts
          - mountPath: /app/config/tls
            name: tls-certs
          - mountPath: /app/config/gpg/source
            name: gpg-keys
          - mountPath: /app/config/gpg/keys
            name: gpg-keyring
          - mountPath: /app/config/reposerver/tls
            name: argocd-repo-server-tls
          - mountPath: /app/config/reposerver/tls/redis
            name: argocd-operator-redis-tls
          - mountPath: /home/argocd/cmp-server/plugins
            name: plugins
          - mountPath: /tmp
            name: tmp
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - cp
          - -n
          - /usr/local/bin/argocd
          - /var/run/argocd/argocd-cmp-server
          image: quay.io/argoproj/argocd@sha256:a0ebfa7d419a1c78babc80fc77de093751d8a5fabffcaf3f7e81a4d55a23cc0d
          imagePullPolicy: Always
          name: copyutil
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/run/argocd
            name: var-files
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: argocd-ssh-known-hosts-cm
          name: ssh-known-hosts
        - configMap:
            defaultMode: 420
            name: argocd-tls-certs-cm
          name: tls-certs
        - configMap:
            defaultMode: 420
            name: argocd-gpg-keys-cm
          name: gpg-keys
        - emptyDir: {}
          name: gpg-keyring
        - name: argocd-repo-server-tls
          secret:
            defaultMode: 420
            optional: true
            secretName: argocd-repo-server-tls
        - name: argocd-operator-redis-tls
          secret:
            defaultMode: 420
            optional: true
            secretName: argocd-operator-redis-tls
        - emptyDir: {}
          name: var-files
        - emptyDir: {}
          name: plugins
        - emptyDir: {}
          name: tmp
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-08-09T10:57:58Z"
      lastUpdateTime: "2024-09-03T08:41:19Z"
      message: ReplicaSet "example-argocd-repo-server-7cfbcc9c4f" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2024-09-06T03:37:21Z"
      lastUpdateTime: "2024-09-06T03:37:21Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 2
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "2"
    creationTimestamp: "2024-08-09T10:57:58Z"
    generation: 2
    labels:
      app.kubernetes.io/component: server
      app.kubernetes.io/managed-by: example-argocd
      app.kubernetes.io/name: example-argocd-server
      app.kubernetes.io/part-of: argocd
    name: example-argocd-server
    namespace: default
    ownerReferences:
    - apiVersion: argoproj.io/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: ArgoCD
      name: example-argocd
      uid: 1b3c36d4-9531-41c8-99cc-1f4be25a49b0
    resourceVersion: "1502579"
    uid: 82e10981-4356-4221-ac51-f3f0fc3b77c2
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/name: example-argocd-server
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: example-argocd-server
          image.upgraded: 09032024-084024-UTC
      spec:
        containers:
        - command:
          - argocd-server
          - --staticassets
          - /shared/app
          - --dex-server
          - https://example-argocd-dex-server.default.svc.cluster.local:5556
          - --repo-server
          - example-argocd-repo-server.default.svc.cluster.local:8081
          - --redis
          - example-argocd-redis.default.svc.cluster.local:6379
          - --loglevel
          - info
          - --logformat
          - text
          env:
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: admin.password
                name: example-argocd-redis-initial-password
          image: quay.io/argoproj/argocd@sha256:a0ebfa7d419a1c78babc80fc77de093751d8a5fabffcaf3f7e81a4d55a23cc0d
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 3
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 1
          name: argocd-server
          ports:
          - containerPort: 8080
            protocol: TCP
          - containerPort: 8083
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 3
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /app/config/ssh
            name: ssh-known-hosts
          - mountPath: /app/config/tls
            name: tls-certs
          - mountPath: /app/config/server/tls
            name: argocd-repo-server-tls
          - mountPath: /app/config/server/tls/redis
            name: argocd-operator-redis-tls
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: example-argocd-argocd-server
        serviceAccountName: example-argocd-argocd-server
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: argocd-ssh-known-hosts-cm
          name: ssh-known-hosts
        - configMap:
            defaultMode: 420
            name: argocd-tls-certs-cm
          name: tls-certs
        - name: argocd-repo-server-tls
          secret:
            defaultMode: 420
            optional: true
            secretName: argocd-repo-server-tls
        - name: argocd-operator-redis-tls
          secret:
            defaultMode: 420
            optional: true
            secretName: argocd-operator-redis-tls
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-08-09T10:57:58Z"
      lastUpdateTime: "2024-09-03T08:41:29Z"
      message: ReplicaSet "example-argocd-server-67b4b4667f" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2024-09-06T03:36:30Z"
      lastUpdateTime: "2024-09-06T03:36:30Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 2
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"flask"},"name":"ingress","namespace":"default"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"flask"}},"template":{"metadata":{"labels":{"app":"flask"}},"spec":{"containers":[{"image":"palaymoundekar/flask:v1","name":"ingress","ports":[{"containerPort":80}]}]}}}}
    creationTimestamp: "2024-08-25T14:51:51Z"
    generation: 1
    labels:
      app: flask
    name: ingress
    namespace: default
    resourceVersion: "657677"
    uid: 1f979525-5459-49a4-a257-969fb2e133d9
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: flask
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: flask
      spec:
        containers:
        - image: palaymoundekar/flask:v1
          imagePullPolicy: IfNotPresent
          name: ingress
          ports:
          - containerPort: 80
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-08-25T14:52:25Z"
      lastUpdateTime: "2024-08-25T14:52:25Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-08-25T14:51:51Z"
      lastUpdateTime: "2024-08-25T14:52:25Z"
      message: ReplicaSet "ingress-7fff9b5bd7" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "3"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"env":"demo","name":"nginx-deploy"},"name":"nginx-deploy","namespace":"default"},"spec":{"replicas":1,"selector":{"matchLabels":{"env":"demo"}},"template":{"metadata":{"labels":{"env":"demo","name":"nginx-deploy"}},"spec":{"containers":[{"image":"nginx","name":"nginx-deploy"}]}}}}
    creationTimestamp: "2024-08-30T11:35:40Z"
    generation: 3
    labels:
      env: demo
      name: nginx-deploy
    name: nginx-deploy
    namespace: default
    resourceVersion: "1502804"
    uid: 39a61fbb-c567-43b5-ba7a-359de3dfe808
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        env: demo
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          env: demo
          name: nginx-deploy
      spec:
        containers:
        - image: nginx
          imagePullPolicy: Always
          name: nginx-deploy
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-08-30T11:35:40Z"
      lastUpdateTime: "2024-09-02T11:36:45Z"
      message: ReplicaSet "nginx-deploy-6754bf4584" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2024-09-06T03:37:06Z"
      lastUpdateTime: "2024-09-06T03:37:06Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 3
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"nginx"},"name":"nginx-deployment","namespace":"default"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"nginx"}},"template":{"metadata":{"labels":{"app":"nginx"}},"spec":{"containers":[{"image":"nginx","name":"nginx","ports":[{"containerPort":80}]}]}}}}
    creationTimestamp: "2024-08-14T05:52:53Z"
    generation: 1
    labels:
      app: nginx
    name: nginx-deployment
    namespace: default
    resourceVersion: "1502668"
    uid: 9b812d7a-6d27-40e9-9395-547d8be1bf6d
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: nginx
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: nginx
      spec:
        containers:
        - image: nginx
          imagePullPolicy: Always
          name: nginx
          ports:
          - containerPort: 80
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-08-14T05:52:53Z"
      lastUpdateTime: "2024-08-14T05:53:08Z"
      message: ReplicaSet "nginx-deployment-6cfb64b7c5" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2024-09-06T03:36:46Z"
      lastUpdateTime: "2024-09-06T03:36:46Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"nginx"},"name":"nginx-deployment1","namespace":"default"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"nginx"}},"template":{"metadata":{"labels":{"app":"nginx"}},"spec":{"containers":[{"image":"nginx","name":"nginx","ports":[{"containerPort":80}]}]}}}}
    creationTimestamp: "2024-08-14T05:54:14Z"
    generation: 1
    labels:
      app: nginx
    name: nginx-deployment1
    namespace: default
    resourceVersion: "1502772"
    uid: 9c853b46-0551-4d33-9064-97ad3d0895e0
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: nginx
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: nginx
      spec:
        containers:
        - image: nginx
          imagePullPolicy: Always
          name: nginx
          ports:
          - containerPort: 80
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-08-14T05:54:14Z"
      lastUpdateTime: "2024-08-14T05:54:34Z"
      message: ReplicaSet "nginx-deployment1-6cfb64b7c5" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2024-09-06T03:37:03Z"
      lastUpdateTime: "2024-09-06T03:37:03Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"spring-boot-app","app.kubernetes.io/instance":"test"},"name":"spring-boot-app","namespace":"default"},"spec":{"replicas":3,"selector":{"matchLabels":{"app":"spring-boot-app"}},"template":{"metadata":{"labels":{"app":"spring-boot-app"}},"spec":{"containers":[{"image":"moundekarpalay/ultimate-cicd:48","name":"spring-boot-app","ports":[{"containerPort":8080}]}]}}}}
    creationTimestamp: "2024-08-09T11:31:41Z"
    generation: 2
    labels:
      app: spring-boot-app
      app.kubernetes.io/instance: test
    name: spring-boot-app
    namespace: default
    resourceVersion: "537668"
    uid: 2fa6d147-6e4f-4fce-a3e5-9b7b93f359cb
  spec:
    progressDeadlineSeconds: 600
    replicas: 3
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: spring-boot-app
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: spring-boot-app
      spec:
        containers:
        - image: moundekarpalay/ultimate-cicd:48
          imagePullPolicy: IfNotPresent
          name: spring-boot-app
          ports:
          - containerPort: 8080
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 3
    conditions:
    - lastTransitionTime: "2024-08-09T11:31:41Z"
      lastUpdateTime: "2024-08-09T11:31:54Z"
      message: ReplicaSet "spring-boot-app-7689fc7b54" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2024-08-22T11:56:37Z"
      lastUpdateTime: "2024-08-22T11:56:37Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 2
    readyReplicas: 3
    replicas: 3
    updatedReplicas: 3
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"env":"dev","name":"verdaccio-deploy"},"name":"verdaccio-deploy","namespace":"default"},"spec":{"replicas":1,"selector":{"matchLabels":{"env":"dev"}},"template":{"metadata":{"labels":{"env":"dev","name":"verdaccio-deploy"}},"spec":{"containers":[{"image":"verdaccio/verdaccio","name":"verdaccio-deploy"}]}}}}
    creationTimestamp: "2024-09-02T11:45:20Z"
    generation: 1
    labels:
      env: dev
      name: verdaccio-deploy
    name: verdaccio-deploy
    namespace: default
    resourceVersion: "1169965"
    uid: f8e1fdb6-d5a0-48a5-b0ee-ec127bdb406c
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        env: dev
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          env: dev
          name: verdaccio-deploy
      spec:
        containers:
        - image: verdaccio/verdaccio
          imagePullPolicy: Always
          name: verdaccio-deploy
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-09-02T11:45:36Z"
      lastUpdateTime: "2024-09-02T11:45:36Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-09-02T11:45:20Z"
      lastUpdateTime: "2024-09-02T11:45:36Z"
      message: ReplicaSet "verdaccio-deploy-568cd4d66c" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"ingress-nginx","app.kubernetes.io/name":"ingress-nginx","app.kubernetes.io/part-of":"ingress-nginx","app.kubernetes.io/version":"1.11.2"},"name":"ingress-nginx-controller","namespace":"ingress-nginx"},"spec":{"minReadySeconds":0,"revisionHistoryLimit":10,"selector":{"matchLabels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"ingress-nginx","app.kubernetes.io/name":"ingress-nginx"}},"strategy":{"rollingUpdate":{"maxUnavailable":1},"type":"RollingUpdate"},"template":{"metadata":{"labels":{"app.kubernetes.io/component":"controller","app.kubernetes.io/instance":"ingress-nginx","app.kubernetes.io/name":"ingress-nginx","app.kubernetes.io/part-of":"ingress-nginx","app.kubernetes.io/version":"1.11.2"}},"spec":{"containers":[{"args":["/nginx-ingress-controller","--publish-service=$(POD_NAMESPACE)/ingress-nginx-controller","--election-id=ingress-nginx-leader","--controller-class=k8s.io/ingress-nginx","--ingress-class=nginx","--configmap=$(POD_NAMESPACE)/ingress-nginx-controller","--validating-webhook=:8443","--validating-webhook-certificate=/usr/local/certificates/cert","--validating-webhook-key=/usr/local/certificates/key","--enable-metrics=false"],"env":[{"name":"POD_NAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}},{"name":"LD_PRELOAD","value":"/usr/local/lib/libmimalloc.so"}],"image":"registry.k8s.io/ingress-nginx/controller:v1.11.2@sha256:d5f8217feeac4887cb1ed21f27c2674e58be06bd8f5184cacea2a69abaf78dce","imagePullPolicy":"IfNotPresent","lifecycle":{"preStop":{"exec":{"command":["/wait-shutdown"]}}},"livenessProbe":{"failureThreshold":5,"httpGet":{"path":"/healthz","port":10254,"scheme":"HTTP"},"initialDelaySeconds":10,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":1},"name":"controller","ports":[{"containerPort":80,"name":"http","protocol":"TCP"},{"containerPort":443,"name":"https","protocol":"TCP"},{"containerPort":8443,"name":"webhook","protocol":"TCP"}],"readinessProbe":{"failureThreshold":3,"httpGet":{"path":"/healthz","port":10254,"scheme":"HTTP"},"initialDelaySeconds":10,"periodSeconds":10,"successThreshold":1,"timeoutSeconds":1},"resources":{"requests":{"cpu":"100m","memory":"90Mi"}},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"add":["NET_BIND_SERVICE"],"drop":["ALL"]},"readOnlyRootFilesystem":false,"runAsNonRoot":true,"runAsUser":101,"seccompProfile":{"type":"RuntimeDefault"}},"volumeMounts":[{"mountPath":"/usr/local/certificates/","name":"webhook-cert","readOnly":true}]}],"dnsPolicy":"ClusterFirst","nodeSelector":{"kubernetes.io/os":"linux"},"serviceAccountName":"ingress-nginx","terminationGracePeriodSeconds":300,"volumes":[{"name":"webhook-cert","secret":{"secretName":"ingress-nginx-admission"}}]}}}}
    creationTimestamp: "2024-08-25T15:02:21Z"
    generation: 1
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.11.2
    name: ingress-nginx-controller
    namespace: ingress-nginx
    resourceVersion: "1502614"
    uid: 4cbb08dd-376a-409e-b0b2-14108cf2b120
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: ingress-nginx
        app.kubernetes.io/name: ingress-nginx
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: ingress-nginx
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/part-of: ingress-nginx
          app.kubernetes.io/version: 1.11.2
      spec:
        containers:
        - args:
          - /nginx-ingress-controller
          - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
          - --election-id=ingress-nginx-leader
          - --controller-class=k8s.io/ingress-nginx
          - --ingress-class=nginx
          - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
          - --validating-webhook=:8443
          - --validating-webhook-certificate=/usr/local/certificates/cert
          - --validating-webhook-key=/usr/local/certificates/key
          - --enable-metrics=false
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: LD_PRELOAD
            value: /usr/local/lib/libmimalloc.so
          image: registry.k8s.io/ingress-nginx/controller:v1.11.2@sha256:d5f8217feeac4887cb1ed21f27c2674e58be06bd8f5184cacea2a69abaf78dce
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /wait-shutdown
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 8443
            name: webhook
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 100m
              memory: 90Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 101
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /usr/local/certificates/
            name: webhook-cert
            readOnly: true
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: ingress-nginx
        serviceAccountName: ingress-nginx
        terminationGracePeriodSeconds: 300
        volumes:
        - name: webhook-cert
          secret:
            defaultMode: 420
            secretName: ingress-nginx-admission
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-08-25T15:02:21Z"
      lastUpdateTime: "2024-08-25T15:02:21Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2024-08-25T15:02:21Z"
      lastUpdateTime: "2024-08-25T15:04:35Z"
      message: ReplicaSet "ingress-nginx-controller-7d4db76476" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-08-09T10:45:36Z"
    generation: 1
    labels:
      k8s-app: kube-dns
    name: coredns
    namespace: kube-system
    resourceVersion: "1502606"
    uid: 3b0ae9b8-19ca-4eb5-9597-df40ef55ebac
  spec:
    progressDeadlineSeconds: 600
    replicas: 2
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: kube-dns
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: kube-dns
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: k8s-app
                    operator: In
                    values:
                    - kube-dns
                topologyKey: kubernetes.io/hostname
              weight: 100
        containers:
        - args:
          - -conf
          - /etc/coredns/Corefile
          image: registry.k8s.io/coredns/coredns:v1.11.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: coredns
          ports:
          - containerPort: 53
            name: dns
            protocol: UDP
          - containerPort: 53
            name: dns-tcp
            protocol: TCP
          - containerPort: 9153
            name: metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8181
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 170Mi
            requests:
              cpu: 100m
              memory: 70Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/coredns
            name: config-volume
            readOnly: true
        dnsPolicy: Default
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: coredns
        serviceAccountName: coredns
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: Corefile
              path: Corefile
            name: coredns
          name: config-volume
  status:
    availableReplicas: 2
    conditions:
    - lastTransitionTime: "2024-08-09T10:45:50Z"
      lastUpdateTime: "2024-08-09T10:45:55Z"
      message: ReplicaSet "coredns-7db6d8ff4d" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2024-09-06T03:36:30Z"
      lastUpdateTime: "2024-09-06T03:36:30Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 2
    replicas: 2
    updatedReplicas: 2
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"name":"local-path-provisioner","namespace":"local-path-storage"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"local-path-provisioner"}},"template":{"metadata":{"labels":{"app":"local-path-provisioner"}},"spec":{"containers":[{"command":["local-path-provisioner","--debug","start","--helper-image","docker.io/kindest/local-path-helper:v20230510-486859a6","--config","/etc/config/config.json"],"env":[{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}}],"image":"docker.io/kindest/local-path-provisioner:v20240202-8f1494ea","imagePullPolicy":"IfNotPresent","name":"local-path-provisioner","volumeMounts":[{"mountPath":"/etc/config/","name":"config-volume"}]}],"nodeSelector":{"kubernetes.io/os":"linux"},"serviceAccountName":"local-path-provisioner-service-account","tolerations":[{"effect":"NoSchedule","key":"node-role.kubernetes.io/control-plane","operator":"Equal"},{"effect":"NoSchedule","key":"node-role.kubernetes.io/master","operator":"Equal"}],"volumes":[{"configMap":{"name":"local-path-config"},"name":"config-volume"}]}}}}
    creationTimestamp: "2024-08-09T10:45:38Z"
    generation: 1
    name: local-path-provisioner
    namespace: local-path-storage
    resourceVersion: "1502624"
    uid: 86bed3b8-e9e8-4907-bd88-a2943e51503b
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: local-path-provisioner
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: local-path-provisioner
      spec:
        containers:
        - command:
          - local-path-provisioner
          - --debug
          - start
          - --helper-image
          - docker.io/kindest/local-path-helper:v20230510-486859a6
          - --config
          - /etc/config/config.json
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker.io/kindest/local-path-provisioner:v20240202-8f1494ea
          imagePullPolicy: IfNotPresent
          name: local-path-provisioner
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/config/
            name: config-volume
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: local-path-provisioner-service-account
        serviceAccountName: local-path-provisioner-service-account
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
          operator: Equal
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
          operator: Equal
        volumes:
        - configMap:
            defaultMode: 420
            name: local-path-config
          name: config-volume
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-08-09T10:45:50Z"
      lastUpdateTime: "2024-08-09T10:45:55Z"
      message: ReplicaSet "local-path-provisioner-988d74bc" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2024-09-06T03:36:39Z"
      lastUpdateTime: "2024-09-06T03:36:39Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-08-09T10:47:39Z"
    generation: 1
    labels:
      app: catalog-operator
    name: catalog-operator
    namespace: olm
    resourceVersion: "1661770"
    uid: efde0c03-4f2c-4b24-a210-d000b8e148fb
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: catalog-operator
    strategy:
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: catalog-operator
      spec:
        containers:
        - args:
          - --namespace
          - olm
          - --configmapServerImage=quay.io/operator-framework/configmap-operator-registry:latest
          - --util-image
          - quay.io/operator-framework/olm@sha256:40d0363f4aa684319cd721c2fcf3321785380fdc74de8ef821317cd25a10782a
          - --set-workload-user-id=true
          command:
          - /bin/catalog
          image: quay.io/operator-framework/olm@sha256:40d0363f4aa684319cd721c2fcf3321785380fdc74de8ef821317cd25a10782a
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: catalog-operator
          ports:
          - containerPort: 8080
            name: metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 10m
              memory: 80Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: olm-operator-serviceaccount
        serviceAccountName: olm-operator-serviceaccount
        terminationGracePeriodSeconds: 30
  status:
    conditions:
    - lastTransitionTime: "2024-08-09T10:47:39Z"
      lastUpdateTime: "2024-08-09T10:48:16Z"
      message: ReplicaSet "catalog-operator-78857dfb48" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2024-09-12T05:52:17Z"
      lastUpdateTime: "2024-09-12T05:52:17Z"
      message: Deployment does not have minimum availability.
      reason: MinimumReplicasUnavailable
      status: "False"
      type: Available
    observedGeneration: 1
    replicas: 1
    unavailableReplicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-08-09T10:47:39Z"
    generation: 1
    labels:
      app: olm-operator
    name: olm-operator
    namespace: olm
    resourceVersion: "1502662"
    uid: f79eaff9-741d-4aec-a5ad-39d6c7fd83c4
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: olm-operator
    strategy:
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: olm-operator
      spec:
        containers:
        - args:
          - --namespace
          - $(OPERATOR_NAMESPACE)
          - --writeStatusName
          - ""
          command:
          - /bin/olm
          env:
          - name: OPERATOR_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: OPERATOR_NAME
            value: olm-operator
          image: quay.io/operator-framework/olm@sha256:40d0363f4aa684319cd721c2fcf3321785380fdc74de8ef821317cd25a10782a
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: olm-operator
          ports:
          - containerPort: 8080
            name: metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 10m
              memory: 160Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: olm-operator-serviceaccount
        serviceAccountName: olm-operator-serviceaccount
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-08-09T10:47:39Z"
      lastUpdateTime: "2024-08-09T10:48:06Z"
      message: ReplicaSet "olm-operator-6bf4f9c984" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2024-09-06T03:36:46Z"
      lastUpdateTime: "2024-09-06T03:36:46Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-08-09T10:48:06Z"
    generation: 365
    labels:
      olm.deployment-spec-hash: 2dnJBV6R4ZbNeIB5YNHrlod8OiuhMg6UU9zTx7
      olm.managed: "true"
      olm.owner: packageserver
      olm.owner.kind: ClusterServiceVersion
      olm.owner.namespace: olm
    name: packageserver
    namespace: olm
    ownerReferences:
    - apiVersion: operators.coreos.com/v1alpha1
      blockOwnerDeletion: false
      controller: false
      kind: ClusterServiceVersion
      name: packageserver
      uid: a7e0752f-dc16-4f0f-bf36-8abd1076e9ef
    resourceVersion: "1502535"
    uid: 6fbe26f1-df92-4337-9621-a9b7d73bf8f8
  spec:
    progressDeadlineSeconds: 600
    replicas: 2
    revisionHistoryLimit: 1
    selector:
      matchLabels:
        app: packageserver
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        annotations:
          olm.operatorGroup: olm-operators
          olm.operatorNamespace: olm
          olm.targetNamespaces: olm
          olmcahash: e67ea8693943655119220efbe7c236fc1a2f21ab270bf1ab455711bb35c2c138
        creationTimestamp: null
        labels:
          app: packageserver
      spec:
        containers:
        - command:
          - /bin/package-server
          - -v=4
          - --secure-port
          - "5443"
          - --global-namespace
          - olm
          env:
          - name: OPERATOR_CONDITION_NAME
            value: packageserver
          image: quay.io/operator-framework/olm@sha256:40d0363f4aa684319cd721c2fcf3321785380fdc74de8ef821317cd25a10782a
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 5443
              scheme: HTTPS
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: packageserver
          ports:
          - containerPort: 5443
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 5443
              scheme: HTTPS
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 10m
              memory: 50Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /tmp
            name: tmpfs
          - mountPath: /apiserver.local.config/certificates
            name: apiservice-cert
          - mountPath: /tmp/k8s-webhook-server/serving-certs
            name: webhook-cert
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: olm-operator-serviceaccount
        serviceAccountName: olm-operator-serviceaccount
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: tmpfs
        - name: apiservice-cert
          secret:
            defaultMode: 420
            items:
            - key: tls.crt
              path: apiserver.crt
            - key: tls.key
              path: apiserver.key
            secretName: packageserver-service-cert
        - name: webhook-cert
          secret:
            defaultMode: 420
            items:
            - key: tls.crt
              path: tls.crt
            - key: tls.key
              path: tls.key
            secretName: packageserver-service-cert
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-08-09T10:48:06Z"
      lastUpdateTime: "2024-08-09T10:48:28Z"
      message: ReplicaSet "packageserver-c4b957db4" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2024-08-29T13:54:33Z"
      lastUpdateTime: "2024-08-29T13:54:33Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 365
    readyReplicas: 1
    replicas: 2
    unavailableReplicas: 1
    updatedReplicas: 2
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "3"
    creationTimestamp: "2024-08-09T10:49:26Z"
    generation: 26
    labels:
      control-plane: controller-manager
      olm.deployment-spec-hash: zXaHCi1iEnTJOzuXtPgc9uvSx4cAz6PkTVxOE
      olm.managed: "true"
      olm.owner: argocd-operator.v0.12.0
      olm.owner.kind: ClusterServiceVersion
      olm.owner.namespace: operators
      operators.coreos.com/argocd-operator.operators: ""
    name: argocd-operator-controller-manager
    namespace: operators
    ownerReferences:
    - apiVersion: operators.coreos.com/v1alpha1
      blockOwnerDeletion: false
      controller: false
      kind: ClusterServiceVersion
      name: argocd-operator.v0.12.0
      uid: 84eb5be3-541c-44d5-8e26-d16b05a58c42
    resourceVersion: "1508268"
    uid: 625a990c-bcf8-4496-8c9d-8bc0fa13697c
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 1
    selector:
      matchLabels:
        control-plane: controller-manager
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          alm-examples: |-
            [
              {
                "apiVersion": "argoproj.io/v1alpha1",
                "kind": "AppProject",
                "metadata": {
                  "name": "example"
                },
                "spec": null
              },
              {
                "apiVersion": "argoproj.io/v1alpha1",
                "kind": "Application",
                "metadata": {
                  "name": "example"
                },
                "spec": null
              },
              {
                "apiVersion": "argoproj.io/v1alpha1",
                "kind": "ApplicationSet",
                "metadata": {
                  "name": "example"
                },
                "spec": null
              },
              {
                "apiVersion": "argoproj.io/v1alpha1",
                "kind": "ArgoCD",
                "metadata": {
                  "name": "argocd-sample"
                },
                "spec": {
                  "controller": {
                    "resources": {
                      "limits": {
                        "cpu": "2000m",
                        "memory": "2048Mi"
                      },
                      "requests": {
                        "cpu": "250m",
                        "memory": "1024Mi"
                      }
                    }
                  },
                  "ha": {
                    "enabled": false,
                    "resources": {
                      "limits": {
                        "cpu": "500m",
                        "memory": "256Mi"
                      },
                      "requests": {
                        "cpu": "250m",
                        "memory": "128Mi"
                      }
                    }
                  },
                  "redis": {
                    "resources": {
                      "limits": {
                        "cpu": "500m",
                        "memory": "256Mi"
                      },
                      "requests": {
                        "cpu": "250m",
                        "memory": "128Mi"
                      }
                    }
                  },
                  "repo": {
                    "resources": {
                      "limits": {
                        "cpu": "1000m",
                        "memory": "512Mi"
                      },
                      "requests": {
                        "cpu": "250m",
                        "memory": "256Mi"
                      }
                    }
                  },
                  "server": {
                    "resources": {
                      "limits": {
                        "cpu": "500m",
                        "memory": "256Mi"
                      },
                      "requests": {
                        "cpu": "125m",
                        "memory": "128Mi"
                      }
                    },
                    "route": {
                      "enabled": true
                    }
                  },
                  "sso": {
                    "dex": {
                      "resources": {
                        "limits": {
                          "cpu": "500m",
                          "memory": "256Mi"
                        },
                        "requests": {
                          "cpu": "250m",
                          "memory": "128Mi"
                        }
                      }
                    },
                    "provider": "dex"
                  }
                }
              },
              {
                "apiVersion": "argoproj.io/v1alpha1",
                "kind": "ArgoCDExport",
                "metadata": {
                  "name": "argocdexport-sample"
                },
                "spec": {
                  "argocd": "argocd-sample"
                }
              },
              {
                "apiVersion": "argoproj.io/v1alpha1",
                "kind": "NotificationsConfiguration",
                "metadata": {
                  "name": "default-notifications-configuration"
                },
                "spec": {
                  "templates": {
                    "template.app-created": "email:\n  subject: Application {{.app.metadata.name}} has been created.\nmessage: Application {{.app.metadata.name}} has been created.\nteams:\n  title: Application {{.app.metadata.name}} has been created.",
                    "template.app-deleted": "email:\n  subject: Application {{.app.metadata.name}} has been deleted.\nmessage: Application {{.app.metadata.name}} has been deleted.\nteams:\n  title: Application {{.app.metadata.name}} has been deleted.",
                    "template.app-deployed": "email:\n  subject: New version of an application {{.app.metadata.name}} is up and running.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} is now running new version of deployments manifests.\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#18be52\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Revision\",\n        \"value\": \"{{.app.status.sync.revision}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    },\n    {\n      \"name\": \"Revision\",\n      \"value\": \"{{.app.status.sync.revision}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Operation Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#000080'\n  title: New version of an application {{.app.metadata.name}} is up and running.",
                    "template.app-health-degraded": "email:\n  subject: Application {{.app.metadata.name}} has degraded.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}} Application {{.app.metadata.name}} has degraded.\n  Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\": \"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#f4c030\",\n      \"fields\": [\n      {\n        \"title\": \"Health Status\",\n        \"value\": \"{{.app.status.health.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Health Status\",\n      \"value\": \"{{.app.status.health.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#FF0000'\n  title: Application {{.app.metadata.name}} has degraded.",
                    "template.app-sync-failed": "email:\n  subject: Failed to sync application {{.app.metadata.name}}.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}}  The sync operation of application {{.app.metadata.name}} has failed at {{.app.status.operationState.finishedAt}} with the following error: {{.app.status.operationState.message}}\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#E96D76\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Failed at\",\n      \"value\": \"{{.app.status.operationState.finishedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Operation\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#FF0000'\n  title: Failed to sync application {{.app.metadata.name}}.",
                    "template.app-sync-running": "email:\n  subject: Start syncing application {{.app.metadata.name}}.\nmessage: |\n  The sync operation of application {{.app.metadata.name}} has started at {{.app.status.operationState.startedAt}}.\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#0DADEA\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Started at\",\n      \"value\": \"{{.app.status.operationState.startedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Operation\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  title: Start syncing application {{.app.metadata.name}}.",
                    "template.app-sync-status-unknown": "email:\n  subject: Application {{.app.metadata.name}} sync status is 'Unknown'\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}} Application {{.app.metadata.name}} sync is 'Unknown'.\n  Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.\n  {{if ne .serviceType \"slack\"}}\n  {{range $c := .app.status.conditions}}\n      * {{$c.message}}\n  {{end}}\n  {{end}}\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#E96D76\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  title: Application {{.app.metadata.name}} sync status is 'Unknown'",
                    "template.app-sync-succeeded": "email:\n  subject: Application {{.app.metadata.name}} has been successfully synced.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} has been successfully synced at {{.app.status.operationState.finishedAt}}.\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#18be52\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Synced at\",\n      \"value\": \"{{.app.status.operationState.finishedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Operation Details\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#000080'\n  title: Application {{.app.metadata.name}} has been successfully synced"
                  },
                  "triggers": {
                    "trigger.on-created": "- description: Application is created.\n  oncePer: app.metadata.name\n  send:\n  - app-created\n  when: \"true\"",
                    "trigger.on-deleted": "- description: Application is deleted.\n  oncePer: app.metadata.name\n  send:\n  - app-deleted\n  when: app.metadata.deletionTimestamp != nil",
                    "trigger.on-deployed": "- description: Application is synced and healthy. Triggered once per commit.\n  oncePer: app.status.operationState.syncResult.revision\n  send:\n  - app-deployed\n  when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status\n      == 'Healthy'",
                    "trigger.on-health-degraded": "- description: Application has degraded\n  send:\n  - app-health-degraded\n  when: app.status.health.status == 'Degraded'",
                    "trigger.on-sync-failed": "- description: Application syncing has failed\n  send:\n  - app-sync-failed\n  when: app.status.operationState.phase in ['Error', 'Failed']",
                    "trigger.on-sync-running": "- description: Application is being synced\n  send:\n  - app-sync-running\n  when: app.status.operationState.phase in ['Running']",
                    "trigger.on-sync-status-unknown": "- description: Application status is 'Unknown'\n  send:\n  - app-sync-status-unknown\n  when: app.status.sync.status == 'Unknown'",
                    "trigger.on-sync-succeeded": "- description: Application syncing has succeeded\n  send:\n  - app-sync-succeeded\n  when: app.status.operationState.phase in ['Succeeded']"
                  }
                }
              },
              {
                "apiVersion": "argoproj.io/v1beta1",
                "kind": "ArgoCD",
                "metadata": {
                  "name": "argocd-sample"
                },
                "spec": {
                  "controller": {
                    "resources": {
                      "limits": {
                        "cpu": "2000m",
                        "memory": "2048Mi"
                      },
                      "requests": {
                        "cpu": "250m",
                        "memory": "1024Mi"
                      }
                    }
                  },
                  "ha": {
                    "enabled": false,
                    "resources": {
                      "limits": {
                        "cpu": "500m",
                        "memory": "256Mi"
                      },
                      "requests": {
                        "cpu": "250m",
                        "memory": "128Mi"
                      }
                    }
                  },
                  "redis": {
                    "resources": {
                      "limits": {
                        "cpu": "500m",
                        "memory": "256Mi"
                      },
                      "requests": {
                        "cpu": "250m",
                        "memory": "128Mi"
                      }
                    }
                  },
                  "repo": {
                    "resources": {
                      "limits": {
                        "cpu": "1000m",
                        "memory": "512Mi"
                      },
                      "requests": {
                        "cpu": "250m",
                        "memory": "256Mi"
                      }
                    }
                  },
                  "server": {
                    "resources": {
                      "limits": {
                        "cpu": "500m",
                        "memory": "256Mi"
                      },
                      "requests": {
                        "cpu": "125m",
                        "memory": "128Mi"
                      }
                    },
                    "route": {
                      "enabled": true
                    }
                  },
                  "sso": {
                    "dex": {
                      "resources": {
                        "limits": {
                          "cpu": "500m",
                          "memory": "256Mi"
                        },
                        "requests": {
                          "cpu": "250m",
                          "memory": "128Mi"
                        }
                      }
                    },
                    "provider": "dex"
                  }
                }
              }
            ]
          capabilities: Deep Insights
          categories: Integration & Delivery
          certified: "false"
          containerImage: quay.io/argoprojlabs/argocd-operator@sha256:405e7bde25affb7644c576a7f2d41ba30b88e2ef4f2f11945b920a33517895ce
          createdAt: "2024-08-28T12:00:21Z"
          description: Argo CD is a declarative, GitOps continuous delivery tool for
            Kubernetes.
          kubectl.kubernetes.io/default-container: manager
          olm.operatorGroup: global-operators
          olm.operatorNamespace: operators
          olm.targetNamespaces: ""
          olmcahash: e065e9681f639701c81098d07f53efe80cffbae5a580f1d5a3424be50984ee21
          operatorframework.io/properties: '{"properties":[{"type":"olm.gvk","value":{"group":"argoproj.io","kind":"AppProject","version":"v1alpha1"}},{"type":"olm.gvk","value":{"group":"argoproj.io","kind":"Application","version":"v1alpha1"}},{"type":"olm.gvk","value":{"group":"argoproj.io","kind":"ApplicationSet","version":"v1alpha1"}},{"type":"olm.gvk","value":{"group":"argoproj.io","kind":"ArgoCD","version":"v1alpha1"}},{"type":"olm.gvk","value":{"group":"argoproj.io","kind":"ArgoCD","version":"v1beta1"}},{"type":"olm.gvk","value":{"group":"argoproj.io","kind":"ArgoCDExport","version":"v1alpha1"}},{"type":"olm.gvk","value":{"group":"argoproj.io","kind":"NotificationsConfiguration","version":"v1alpha1"}},{"type":"olm.package","value":{"packageName":"argocd-operator","version":"0.12.0"}}]}'
          operators.operatorframework.io/builder: operator-sdk-v1.35.0
          operators.operatorframework.io/project_layout: go.kubebuilder.io/v4
          repository: https://github.com/argoproj-labs/argocd-operator
          support: Argo CD
        creationTimestamp: null
        labels:
          control-plane: controller-manager
      spec:
        containers:
        - args:
          - --leader-elect
          command:
          - /manager
          env:
          - name: WATCH_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.annotations['olm.targetNamespaces']
          - name: ENABLE_CONVERSION_WEBHOOK
            value: "true"
          - name: OPERATOR_CONDITION_NAME
            value: argocd-operator.v0.12.0
          image: quay.io/argoprojlabs/argocd-operator@sha256:405e7bde25affb7644c576a7f2d41ba30b88e2ef4f2f11945b920a33517895ce
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8081
              scheme: HTTP
            initialDelaySeconds: 15
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 1
          name: manager
          ports:
          - containerPort: 9443
            name: webhook-server
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: 8081
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /apiserver.local.config/certificates
            name: apiservice-cert
          - mountPath: /tmp/k8s-webhook-server/serving-certs
            name: webhook-cert
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
        serviceAccount: argocd-operator-controller-manager
        serviceAccountName: argocd-operator-controller-manager
        terminationGracePeriodSeconds: 10
        volumes:
        - name: apiservice-cert
          secret:
            defaultMode: 420
            items:
            - key: tls.crt
              path: apiserver.crt
            - key: tls.key
              path: apiserver.key
            secretName: argocd-operator-controller-manager-service-cert
        - name: webhook-cert
          secret:
            defaultMode: 420
            items:
            - key: tls.crt
              path: tls.crt
            - key: tls.key
              path: tls.key
            secretName: argocd-operator-controller-manager-service-cert
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2024-08-09T10:49:26Z"
      lastUpdateTime: "2024-09-03T08:40:22Z"
      message: ReplicaSet "argocd-operator-controller-manager-6989f46474" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2024-09-06T04:35:48Z"
      lastUpdateTime: "2024-09-06T04:35:48Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 26
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-08-09T10:57:58Z"
    generation: 1
    labels:
      app.kubernetes.io/name: example-argocd-redis
      pod-template-hash: 56f6446c6d
    name: example-argocd-redis-56f6446c6d
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: example-argocd-redis
      uid: 787e3858-7e44-4b92-b3b5-ca1e2f242278
    resourceVersion: "1502824"
    uid: 8a7abc53-3c66-4d0c-8ce6-084c6c89ae2c
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/name: example-argocd-redis
        pod-template-hash: 56f6446c6d
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: example-argocd-redis
          pod-template-hash: 56f6446c6d
      spec:
        containers:
        - args:
          - --save
          - ""
          - --appendonly
          - "no"
          - --requirepass $(REDIS_PASSWORD)
          env:
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: admin.password
                name: example-argocd-redis-initial-password
          image: redis@sha256:8061ca607db2a0c80010aeb5fc9bed0253448bc68711eaa14253a392f6c48280
          imagePullPolicy: Always
          name: redis
          ports:
          - containerPort: 6379
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 999
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /app/config/redis/tls
            name: argocd-operator-redis-tls
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: example-argocd-argocd-redis
        serviceAccountName: example-argocd-argocd-redis
        terminationGracePeriodSeconds: 30
        volumes:
        - name: argocd-operator-redis-tls
          secret:
            defaultMode: 420
            optional: true
            secretName: argocd-operator-redis-tls
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-08-09T10:57:58Z"
    generation: 2
    labels:
      app.kubernetes.io/name: example-argocd-repo-server
      pod-template-hash: 5bcff45d78
    name: example-argocd-repo-server-5bcff45d78
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: example-argocd-repo-server
      uid: 970f9122-e410-4baf-b212-77cc4bf7223f
    resourceVersion: "1233131"
    uid: b0cd8ab9-0da6-417d-9a41-1e342aac3ee5
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/name: example-argocd-repo-server
        pod-template-hash: 5bcff45d78
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: example-argocd-repo-server
          pod-template-hash: 5bcff45d78
      spec:
        automountServiceAccountToken: false
        containers:
        - command:
          - uid_entrypoint.sh
          - argocd-repo-server
          - --redis
          - example-argocd-redis.default.svc.cluster.local:6379
          - --loglevel
          - info
          - --logformat
          - text
          env:
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: admin.password
                name: example-argocd-redis-initial-password
          image: quay.io/argoproj/argocd@sha256:a39a3dd97da2ff325a06bb4a6ed3e84ccacc297740ec38afa50fb15bda2bf7f0
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 8081
            timeoutSeconds: 1
          name: argocd-repo-server
          ports:
          - containerPort: 8081
            name: server
            protocol: TCP
          - containerPort: 8084
            name: metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 8081
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /app/config/ssh
            name: ssh-known-hosts
          - mountPath: /app/config/tls
            name: tls-certs
          - mountPath: /app/config/gpg/source
            name: gpg-keys
          - mountPath: /app/config/gpg/keys
            name: gpg-keyring
          - mountPath: /tmp
            name: tmp
          - mountPath: /app/config/reposerver/tls
            name: argocd-repo-server-tls
          - mountPath: /app/config/reposerver/tls/redis
            name: argocd-operator-redis-tls
          - mountPath: /home/argocd/cmp-server/plugins
            name: plugins
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - cp
          - -n
          - /usr/local/bin/argocd
          - /var/run/argocd/argocd-cmp-server
          image: quay.io/argoproj/argocd@sha256:a39a3dd97da2ff325a06bb4a6ed3e84ccacc297740ec38afa50fb15bda2bf7f0
          imagePullPolicy: Always
          name: copyutil
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/run/argocd
            name: var-files
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: argocd-ssh-known-hosts-cm
          name: ssh-known-hosts
        - configMap:
            defaultMode: 420
            name: argocd-tls-certs-cm
          name: tls-certs
        - configMap:
            defaultMode: 420
            name: argocd-gpg-keys-cm
          name: gpg-keys
        - emptyDir: {}
          name: gpg-keyring
        - emptyDir: {}
          name: tmp
        - name: argocd-repo-server-tls
          secret:
            defaultMode: 420
            optional: true
            secretName: argocd-repo-server-tls
        - name: argocd-operator-redis-tls
          secret:
            defaultMode: 420
            optional: true
            secretName: argocd-operator-redis-tls
        - emptyDir: {}
          name: var-files
        - emptyDir: {}
          name: plugins
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "2"
    creationTimestamp: "2024-09-03T08:40:29Z"
    generation: 1
    labels:
      app.kubernetes.io/name: example-argocd-repo-server
      image.upgraded: 09032024-084024-UTC
      pod-template-hash: 7cfbcc9c4f
    name: example-argocd-repo-server-7cfbcc9c4f
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: example-argocd-repo-server
      uid: 970f9122-e410-4baf-b212-77cc4bf7223f
    resourceVersion: "1502861"
    uid: 54dfc63e-c402-404f-975b-33faa4e0768c
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/name: example-argocd-repo-server
        pod-template-hash: 7cfbcc9c4f
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: example-argocd-repo-server
          image.upgraded: 09032024-084024-UTC
          pod-template-hash: 7cfbcc9c4f
      spec:
        automountServiceAccountToken: false
        containers:
        - command:
          - uid_entrypoint.sh
          - argocd-repo-server
          - --redis
          - example-argocd-redis.default.svc.cluster.local:6379
          - --loglevel
          - info
          - --logformat
          - text
          env:
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: admin.password
                name: example-argocd-redis-initial-password
          image: quay.io/argoproj/argocd@sha256:a0ebfa7d419a1c78babc80fc77de093751d8a5fabffcaf3f7e81a4d55a23cc0d
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 8081
            timeoutSeconds: 1
          name: argocd-repo-server
          ports:
          - containerPort: 8081
            name: server
            protocol: TCP
          - containerPort: 8084
            name: metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 8081
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /app/config/ssh
            name: ssh-known-hosts
          - mountPath: /app/config/tls
            name: tls-certs
          - mountPath: /app/config/gpg/source
            name: gpg-keys
          - mountPath: /app/config/gpg/keys
            name: gpg-keyring
          - mountPath: /app/config/reposerver/tls
            name: argocd-repo-server-tls
          - mountPath: /app/config/reposerver/tls/redis
            name: argocd-operator-redis-tls
          - mountPath: /home/argocd/cmp-server/plugins
            name: plugins
          - mountPath: /tmp
            name: tmp
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - cp
          - -n
          - /usr/local/bin/argocd
          - /var/run/argocd/argocd-cmp-server
          image: quay.io/argoproj/argocd@sha256:a0ebfa7d419a1c78babc80fc77de093751d8a5fabffcaf3f7e81a4d55a23cc0d
          imagePullPolicy: Always
          name: copyutil
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/run/argocd
            name: var-files
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: argocd-ssh-known-hosts-cm
          name: ssh-known-hosts
        - configMap:
            defaultMode: 420
            name: argocd-tls-certs-cm
          name: tls-certs
        - configMap:
            defaultMode: 420
            name: argocd-gpg-keys-cm
          name: gpg-keys
        - emptyDir: {}
          name: gpg-keyring
        - name: argocd-repo-server-tls
          secret:
            defaultMode: 420
            optional: true
            secretName: argocd-repo-server-tls
        - name: argocd-operator-redis-tls
          secret:
            defaultMode: 420
            optional: true
            secretName: argocd-operator-redis-tls
        - emptyDir: {}
          name: var-files
        - emptyDir: {}
          name: plugins
        - emptyDir: {}
          name: tmp
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "2"
    creationTimestamp: "2024-09-03T08:40:29Z"
    generation: 1
    labels:
      app.kubernetes.io/name: example-argocd-server
      image.upgraded: 09032024-084024-UTC
      pod-template-hash: 67b4b4667f
    name: example-argocd-server-67b4b4667f
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: example-argocd-server
      uid: 82e10981-4356-4221-ac51-f3f0fc3b77c2
    resourceVersion: "1502578"
    uid: 521d75a5-6b2a-4df3-a429-2e1b8cadd9af
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/name: example-argocd-server
        pod-template-hash: 67b4b4667f
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: example-argocd-server
          image.upgraded: 09032024-084024-UTC
          pod-template-hash: 67b4b4667f
      spec:
        containers:
        - command:
          - argocd-server
          - --staticassets
          - /shared/app
          - --dex-server
          - https://example-argocd-dex-server.default.svc.cluster.local:5556
          - --repo-server
          - example-argocd-repo-server.default.svc.cluster.local:8081
          - --redis
          - example-argocd-redis.default.svc.cluster.local:6379
          - --loglevel
          - info
          - --logformat
          - text
          env:
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: admin.password
                name: example-argocd-redis-initial-password
          image: quay.io/argoproj/argocd@sha256:a0ebfa7d419a1c78babc80fc77de093751d8a5fabffcaf3f7e81a4d55a23cc0d
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 3
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 1
          name: argocd-server
          ports:
          - containerPort: 8080
            protocol: TCP
          - containerPort: 8083
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 3
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /app/config/ssh
            name: ssh-known-hosts
          - mountPath: /app/config/tls
            name: tls-certs
          - mountPath: /app/config/server/tls
            name: argocd-repo-server-tls
          - mountPath: /app/config/server/tls/redis
            name: argocd-operator-redis-tls
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: example-argocd-argocd-server
        serviceAccountName: example-argocd-argocd-server
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: argocd-ssh-known-hosts-cm
          name: ssh-known-hosts
        - configMap:
            defaultMode: 420
            name: argocd-tls-certs-cm
          name: tls-certs
        - name: argocd-repo-server-tls
          secret:
            defaultMode: 420
            optional: true
            secretName: argocd-repo-server-tls
        - name: argocd-operator-redis-tls
          secret:
            defaultMode: 420
            optional: true
            secretName: argocd-operator-redis-tls
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-08-09T10:57:58Z"
    generation: 2
    labels:
      app.kubernetes.io/name: example-argocd-server
      pod-template-hash: 8c6bc55d8
    name: example-argocd-server-8c6bc55d8
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: example-argocd-server
      uid: 82e10981-4356-4221-ac51-f3f0fc3b77c2
    resourceVersion: "1233185"
    uid: 73539aa4-0fb5-4727-a05f-f55f6daa95ba
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/name: example-argocd-server
        pod-template-hash: 8c6bc55d8
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: example-argocd-server
          pod-template-hash: 8c6bc55d8
      spec:
        containers:
        - command:
          - argocd-server
          - --staticassets
          - /shared/app
          - --dex-server
          - https://example-argocd-dex-server.default.svc.cluster.local:5556
          - --repo-server
          - example-argocd-repo-server.default.svc.cluster.local:8081
          - --redis
          - example-argocd-redis.default.svc.cluster.local:6379
          - --loglevel
          - info
          - --logformat
          - text
          env:
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: admin.password
                name: example-argocd-redis-initial-password
          image: quay.io/argoproj/argocd@sha256:a39a3dd97da2ff325a06bb4a6ed3e84ccacc297740ec38afa50fb15bda2bf7f0
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 3
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 1
          name: argocd-server
          ports:
          - containerPort: 8080
            protocol: TCP
          - containerPort: 8083
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 3
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /app/config/ssh
            name: ssh-known-hosts
          - mountPath: /app/config/tls
            name: tls-certs
          - mountPath: /app/config/server/tls
            name: argocd-repo-server-tls
          - mountPath: /app/config/server/tls/redis
            name: argocd-operator-redis-tls
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: example-argocd-argocd-server
        serviceAccountName: example-argocd-argocd-server
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: argocd-ssh-known-hosts-cm
          name: ssh-known-hosts
        - configMap:
            defaultMode: 420
            name: argocd-tls-certs-cm
          name: tls-certs
        - name: argocd-repo-server-tls
          secret:
            defaultMode: 420
            optional: true
            secretName: argocd-repo-server-tls
        - name: argocd-operator-redis-tls
          secret:
            defaultMode: 420
            optional: true
            secretName: argocd-operator-redis-tls
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-08-25T14:51:51Z"
    generation: 1
    labels:
      app: flask
      pod-template-hash: 7fff9b5bd7
    name: ingress-7fff9b5bd7
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: ingress
      uid: 1f979525-5459-49a4-a257-969fb2e133d9
    resourceVersion: "657676"
    uid: df721070-d1d0-4b2a-9a32-85e3591cc873
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: flask
        pod-template-hash: 7fff9b5bd7
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: flask
          pod-template-hash: 7fff9b5bd7
      spec:
        containers:
        - image: palaymoundekar/flask:v1
          imagePullPolicy: IfNotPresent
          name: ingress
          ports:
          - containerPort: 80
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-08-30T11:35:40Z"
    generation: 2
    labels:
      env: demo
      name: nginx-deploy
      pod-template-hash: 59bfbcc4f6
    name: nginx-deploy-59bfbcc4f6
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: nginx-deploy
      uid: 39a61fbb-c567-43b5-ba7a-359de3dfe808
    resourceVersion: "971821"
    uid: 411e294b-ac80-4bdf-8cb5-49f426781808
  spec:
    replicas: 0
    selector:
      matchLabels:
        env: demo
        pod-template-hash: 59bfbcc4f6
    template:
      metadata:
        creationTimestamp: null
        labels:
          env: demo
          name: nginx-deploy
          pod-template-hash: 59bfbcc4f6
      spec:
        containers:
        - image: apache2
          imagePullPolicy: Always
          name: nginx-deploy
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "3"
    creationTimestamp: "2024-09-02T11:36:41Z"
    generation: 1
    labels:
      env: demo
      name: nginx-deploy
      pod-template-hash: 6754bf4584
    name: nginx-deploy-6754bf4584
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: nginx-deploy
      uid: 39a61fbb-c567-43b5-ba7a-359de3dfe808
    resourceVersion: "1502801"
    uid: cc57824c-1016-428e-9a7b-c0f8f0e8edaf
  spec:
    replicas: 1
    selector:
      matchLabels:
        env: demo
        pod-template-hash: 6754bf4584
    template:
      metadata:
        creationTimestamp: null
        labels:
          env: demo
          name: nginx-deploy
          pod-template-hash: 6754bf4584
      spec:
        containers:
        - image: nginx
          imagePullPolicy: Always
          name: nginx-deploy
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "2"
    creationTimestamp: "2024-08-30T11:36:55Z"
    generation: 2
    labels:
      env: demo
      name: nginx-deploy
      pod-template-hash: 755c976dd
    name: nginx-deploy-755c976dd
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: nginx-deploy
      uid: 39a61fbb-c567-43b5-ba7a-359de3dfe808
    resourceVersion: "1168703"
    uid: c4fd17f3-dc87-4037-a56a-347af13e3be2
  spec:
    replicas: 0
    selector:
      matchLabels:
        env: demo
        pod-template-hash: 755c976dd
    template:
      metadata:
        creationTimestamp: null
        labels:
          env: demo
          name: nginx-deploy
          pod-template-hash: 755c976dd
      spec:
        containers:
        - image: ubuntu/apache2
          imagePullPolicy: Always
          name: nginx-deploy
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-08-14T05:52:53Z"
    generation: 1
    labels:
      app: nginx
      pod-template-hash: 6cfb64b7c5
    name: nginx-deployment-6cfb64b7c5
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: nginx-deployment
      uid: 9b812d7a-6d27-40e9-9395-547d8be1bf6d
    resourceVersion: "1502667"
    uid: 994510ff-d293-47b9-ab8a-9bdacf911b37
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: nginx
        pod-template-hash: 6cfb64b7c5
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: nginx
          pod-template-hash: 6cfb64b7c5
      spec:
        containers:
        - image: nginx
          imagePullPolicy: Always
          name: nginx
          ports:
          - containerPort: 80
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-08-14T05:54:14Z"
    generation: 1
    labels:
      app: nginx
      pod-template-hash: 6cfb64b7c5
    name: nginx-deployment1-6cfb64b7c5
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: nginx-deployment1
      uid: 9c853b46-0551-4d33-9064-97ad3d0895e0
    resourceVersion: "1502771"
    uid: 318b7969-9dcb-43e5-91e9-86ed2081aab0
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: nginx
        pod-template-hash: 6cfb64b7c5
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: nginx
          pod-template-hash: 6cfb64b7c5
      spec:
        containers:
        - image: nginx
          imagePullPolicy: Always
          name: nginx
          ports:
          - containerPort: 80
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "3"
      deployment.kubernetes.io/max-replicas: "4"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-08-09T11:31:41Z"
    generation: 2
    labels:
      app: spring-boot-app
      pod-template-hash: 7689fc7b54
    name: spring-boot-app-7689fc7b54
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: spring-boot-app
      uid: 2fa6d147-6e4f-4fce-a3e5-9b7b93f359cb
    resourceVersion: "537665"
    uid: 42b0e09f-cc06-4209-ad97-0d540484b238
  spec:
    replicas: 3
    selector:
      matchLabels:
        app: spring-boot-app
        pod-template-hash: 7689fc7b54
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: spring-boot-app
          pod-template-hash: 7689fc7b54
      spec:
        containers:
        - image: moundekarpalay/ultimate-cicd:48
          imagePullPolicy: IfNotPresent
          name: spring-boot-app
          ports:
          - containerPort: 8080
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 3
    fullyLabeledReplicas: 3
    observedGeneration: 2
    readyReplicas: 3
    replicas: 3
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-09-02T11:45:20Z"
    generation: 1
    labels:
      env: dev
      name: verdaccio-deploy
      pod-template-hash: 568cd4d66c
    name: verdaccio-deploy-568cd4d66c
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: verdaccio-deploy
      uid: f8e1fdb6-d5a0-48a5-b0ee-ec127bdb406c
    resourceVersion: "1169964"
    uid: 83228910-c50a-4643-b1c1-8ea35acc5e8e
  spec:
    replicas: 1
    selector:
      matchLabels:
        env: dev
        pod-template-hash: 568cd4d66c
    template:
      metadata:
        creationTimestamp: null
        labels:
          env: dev
          name: verdaccio-deploy
          pod-template-hash: 568cd4d66c
      spec:
        containers:
        - image: verdaccio/verdaccio
          imagePullPolicy: Always
          name: verdaccio-deploy
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-08-25T15:02:21Z"
    generation: 1
    labels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.11.2
      pod-template-hash: 7d4db76476
    name: ingress-nginx-controller-7d4db76476
    namespace: ingress-nginx
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: ingress-nginx-controller
      uid: 4cbb08dd-376a-409e-b0b2-14108cf2b120
    resourceVersion: "1502613"
    uid: e7adcf1a-2ea5-48b5-be9a-5b5e8c3516ab
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: ingress-nginx
        app.kubernetes.io/name: ingress-nginx
        pod-template-hash: 7d4db76476
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: ingress-nginx
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/part-of: ingress-nginx
          app.kubernetes.io/version: 1.11.2
          pod-template-hash: 7d4db76476
      spec:
        containers:
        - args:
          - /nginx-ingress-controller
          - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
          - --election-id=ingress-nginx-leader
          - --controller-class=k8s.io/ingress-nginx
          - --ingress-class=nginx
          - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
          - --validating-webhook=:8443
          - --validating-webhook-certificate=/usr/local/certificates/cert
          - --validating-webhook-key=/usr/local/certificates/key
          - --enable-metrics=false
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: LD_PRELOAD
            value: /usr/local/lib/libmimalloc.so
          image: registry.k8s.io/ingress-nginx/controller:v1.11.2@sha256:d5f8217feeac4887cb1ed21f27c2674e58be06bd8f5184cacea2a69abaf78dce
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /wait-shutdown
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          - containerPort: 8443
            name: webhook
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 100m
              memory: 90Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 101
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /usr/local/certificates/
            name: webhook-cert
            readOnly: true
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: ingress-nginx
        serviceAccountName: ingress-nginx
        terminationGracePeriodSeconds: 300
        volumes:
        - name: webhook-cert
          secret:
            defaultMode: 420
            secretName: ingress-nginx-admission
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-08-09T10:45:50Z"
    generation: 1
    labels:
      k8s-app: kube-dns
      pod-template-hash: 7db6d8ff4d
    name: coredns-7db6d8ff4d
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: coredns
      uid: 3b0ae9b8-19ca-4eb5-9597-df40ef55ebac
    resourceVersion: "1502605"
    uid: 5970ae22-4704-4a5e-9d78-d1cf8dbc39b7
  spec:
    replicas: 2
    selector:
      matchLabels:
        k8s-app: kube-dns
        pod-template-hash: 7db6d8ff4d
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: kube-dns
          pod-template-hash: 7db6d8ff4d
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: k8s-app
                    operator: In
                    values:
                    - kube-dns
                topologyKey: kubernetes.io/hostname
              weight: 100
        containers:
        - args:
          - -conf
          - /etc/coredns/Corefile
          image: registry.k8s.io/coredns/coredns:v1.11.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: coredns
          ports:
          - containerPort: 53
            name: dns
            protocol: UDP
          - containerPort: 53
            name: dns-tcp
            protocol: TCP
          - containerPort: 9153
            name: metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8181
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 170Mi
            requests:
              cpu: 100m
              memory: 70Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/coredns
            name: config-volume
            readOnly: true
        dnsPolicy: Default
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: coredns
        serviceAccountName: coredns
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: Corefile
              path: Corefile
            name: coredns
          name: config-volume
  status:
    availableReplicas: 2
    fullyLabeledReplicas: 2
    observedGeneration: 1
    readyReplicas: 2
    replicas: 2
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-08-09T10:45:50Z"
    generation: 1
    labels:
      app: local-path-provisioner
      pod-template-hash: 988d74bc
    name: local-path-provisioner-988d74bc
    namespace: local-path-storage
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: local-path-provisioner
      uid: 86bed3b8-e9e8-4907-bd88-a2943e51503b
    resourceVersion: "1502623"
    uid: ffaecada-f844-4c67-845c-db68e30c96eb
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: local-path-provisioner
        pod-template-hash: 988d74bc
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: local-path-provisioner
          pod-template-hash: 988d74bc
      spec:
        containers:
        - command:
          - local-path-provisioner
          - --debug
          - start
          - --helper-image
          - docker.io/kindest/local-path-helper:v20230510-486859a6
          - --config
          - /etc/config/config.json
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: docker.io/kindest/local-path-provisioner:v20240202-8f1494ea
          imagePullPolicy: IfNotPresent
          name: local-path-provisioner
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/config/
            name: config-volume
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: local-path-provisioner-service-account
        serviceAccountName: local-path-provisioner-service-account
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
          operator: Equal
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
          operator: Equal
        volumes:
        - configMap:
            defaultMode: 420
            name: local-path-config
          name: config-volume
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "1"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-08-09T10:47:39Z"
    generation: 1
    labels:
      app: catalog-operator
      pod-template-hash: 78857dfb48
    name: catalog-operator-78857dfb48
    namespace: olm
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: catalog-operator
      uid: efde0c03-4f2c-4b24-a210-d000b8e148fb
    resourceVersion: "1661769"
    uid: cb2ce347-b0b6-4d59-a698-f48cb0d83b60
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: catalog-operator
        pod-template-hash: 78857dfb48
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: catalog-operator
          pod-template-hash: 78857dfb48
      spec:
        containers:
        - args:
          - --namespace
          - olm
          - --configmapServerImage=quay.io/operator-framework/configmap-operator-registry:latest
          - --util-image
          - quay.io/operator-framework/olm@sha256:40d0363f4aa684319cd721c2fcf3321785380fdc74de8ef821317cd25a10782a
          - --set-workload-user-id=true
          command:
          - /bin/catalog
          image: quay.io/operator-framework/olm@sha256:40d0363f4aa684319cd721c2fcf3321785380fdc74de8ef821317cd25a10782a
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: catalog-operator
          ports:
          - containerPort: 8080
            name: metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 10m
              memory: 80Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: olm-operator-serviceaccount
        serviceAccountName: olm-operator-serviceaccount
        terminationGracePeriodSeconds: 30
  status:
    fullyLabeledReplicas: 1
    observedGeneration: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "1"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-08-09T10:47:39Z"
    generation: 1
    labels:
      app: olm-operator
      pod-template-hash: 6bf4f9c984
    name: olm-operator-6bf4f9c984
    namespace: olm
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: olm-operator
      uid: f79eaff9-741d-4aec-a5ad-39d6c7fd83c4
    resourceVersion: "1502660"
    uid: 35f405c7-5f2a-4ebf-b0a4-b4e444b0f388
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: olm-operator
        pod-template-hash: 6bf4f9c984
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: olm-operator
          pod-template-hash: 6bf4f9c984
      spec:
        containers:
        - args:
          - --namespace
          - $(OPERATOR_NAMESPACE)
          - --writeStatusName
          - ""
          command:
          - /bin/olm
          env:
          - name: OPERATOR_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: OPERATOR_NAME
            value: olm-operator
          image: quay.io/operator-framework/olm@sha256:40d0363f4aa684319cd721c2fcf3321785380fdc74de8ef821317cd25a10782a
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: olm-operator
          ports:
          - containerPort: 8080
            name: metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 10m
              memory: 160Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: olm-operator-serviceaccount
        serviceAccountName: olm-operator-serviceaccount
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2024-08-09T10:48:06Z"
    generation: 1
    labels:
      app: packageserver
      pod-template-hash: c4b957db4
    name: packageserver-c4b957db4
    namespace: olm
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: packageserver
      uid: 6fbe26f1-df92-4337-9621-a9b7d73bf8f8
    resourceVersion: "1502521"
    uid: 37eaf17c-60f5-45e9-a479-7efa15b3eb3b
  spec:
    replicas: 2
    selector:
      matchLabels:
        app: packageserver
        pod-template-hash: c4b957db4
    template:
      metadata:
        annotations:
          olm.operatorGroup: olm-operators
          olm.operatorNamespace: olm
          olm.targetNamespaces: olm
          olmcahash: e67ea8693943655119220efbe7c236fc1a2f21ab270bf1ab455711bb35c2c138
        creationTimestamp: null
        labels:
          app: packageserver
          pod-template-hash: c4b957db4
      spec:
        containers:
        - command:
          - /bin/package-server
          - -v=4
          - --secure-port
          - "5443"
          - --global-namespace
          - olm
          env:
          - name: OPERATOR_CONDITION_NAME
            value: packageserver
          image: quay.io/operator-framework/olm@sha256:40d0363f4aa684319cd721c2fcf3321785380fdc74de8ef821317cd25a10782a
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 5443
              scheme: HTTPS
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: packageserver
          ports:
          - containerPort: 5443
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 5443
              scheme: HTTPS
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 10m
              memory: 50Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /tmp
            name: tmpfs
          - mountPath: /apiserver.local.config/certificates
            name: apiservice-cert
          - mountPath: /tmp/k8s-webhook-server/serving-certs
            name: webhook-cert
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: olm-operator-serviceaccount
        serviceAccountName: olm-operator-serviceaccount
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: tmpfs
        - name: apiservice-cert
          secret:
            defaultMode: 420
            items:
            - key: tls.crt
              path: apiserver.crt
            - key: tls.key
              path: apiserver.key
            secretName: packageserver-service-cert
        - name: webhook-cert
          secret:
            defaultMode: 420
            items:
            - key: tls.crt
              path: tls.crt
            - key: tls.key
              path: tls.key
            secretName: packageserver-service-cert
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 2
    observedGeneration: 1
    readyReplicas: 1
    replicas: 2
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "2"
    creationTimestamp: "2024-09-03T08:39:46Z"
    generation: 2
    labels:
      control-plane: controller-manager
      pod-template-hash: 5bf96c8b47
    name: argocd-operator-controller-manager-5bf96c8b47
    namespace: operators
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: argocd-operator-controller-manager
      uid: 625a990c-bcf8-4496-8c9d-8bc0fa13697c
    resourceVersion: "1232859"
    uid: 6437e9c8-57e0-4394-bff0-264474054891
  spec:
    replicas: 0
    selector:
      matchLabels:
        control-plane: controller-manager
        pod-template-hash: 5bf96c8b47
    template:
      metadata:
        annotations:
          alm-examples: |-
            [
              {
                "apiVersion": "argoproj.io/v1alpha1",
                "kind": "AppProject",
                "metadata": {
                  "name": "example"
                },
                "spec": null
              },
              {
                "apiVersion": "argoproj.io/v1alpha1",
                "kind": "Application",
                "metadata": {
                  "name": "example"
                },
                "spec": null
              },
              {
                "apiVersion": "argoproj.io/v1alpha1",
                "kind": "ApplicationSet",
                "metadata": {
                  "name": "example"
                },
                "spec": null
              },
              {
                "apiVersion": "argoproj.io/v1alpha1",
                "kind": "ArgoCD",
                "metadata": {
                  "name": "argocd-sample"
                },
                "spec": {
                  "controller": {
                    "resources": {
                      "limits": {
                        "cpu": "2000m",
                        "memory": "2048Mi"
                      },
                      "requests": {
                        "cpu": "250m",
                        "memory": "1024Mi"
                      }
                    }
                  },
                  "ha": {
                    "enabled": false,
                    "resources": {
                      "limits": {
                        "cpu": "500m",
                        "memory": "256Mi"
                      },
                      "requests": {
                        "cpu": "250m",
                        "memory": "128Mi"
                      }
                    }
                  },
                  "redis": {
                    "resources": {
                      "limits": {
                        "cpu": "500m",
                        "memory": "256Mi"
                      },
                      "requests": {
                        "cpu": "250m",
                        "memory": "128Mi"
                      }
                    }
                  },
                  "repo": {
                    "resources": {
                      "limits": {
                        "cpu": "1000m",
                        "memory": "512Mi"
                      },
                      "requests": {
                        "cpu": "250m",
                        "memory": "256Mi"
                      }
                    }
                  },
                  "server": {
                    "resources": {
                      "limits": {
                        "cpu": "500m",
                        "memory": "256Mi"
                      },
                      "requests": {
                        "cpu": "125m",
                        "memory": "128Mi"
                      }
                    },
                    "route": {
                      "enabled": true
                    }
                  },
                  "sso": {
                    "dex": {
                      "resources": {
                        "limits": {
                          "cpu": "500m",
                          "memory": "256Mi"
                        },
                        "requests": {
                          "cpu": "250m",
                          "memory": "128Mi"
                        }
                      }
                    },
                    "provider": "dex"
                  }
                }
              },
              {
                "apiVersion": "argoproj.io/v1alpha1",
                "kind": "ArgoCDExport",
                "metadata": {
                  "name": "argocdexport-sample"
                },
                "spec": {
                  "argocd": "argocd-sample"
                }
              },
              {
                "apiVersion": "argoproj.io/v1alpha1",
                "kind": "NotificationsConfiguration",
                "metadata": {
                  "name": "default-notifications-configuration"
                },
                "spec": {
                  "templates": {
                    "template.app-created": "email:\n  subject: Application {{.app.metadata.name}} has been created.\nmessage: Application {{.app.metadata.name}} has been created.\nteams:\n  title: Application {{.app.metadata.name}} has been created.",
                    "template.app-deleted": "email:\n  subject: Application {{.app.metadata.name}} has been deleted.\nmessage: Application {{.app.metadata.name}} has been deleted.\nteams:\n  title: Application {{.app.metadata.name}} has been deleted.",
                    "template.app-deployed": "email:\n  subject: New version of an application {{.app.metadata.name}} is up and running.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} is now running new version of deployments manifests.\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#18be52\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Revision\",\n        \"value\": \"{{.app.status.sync.revision}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    },\n    {\n      \"name\": \"Revision\",\n      \"value\": \"{{.app.status.sync.revision}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Operation Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#000080'\n  title: New version of an application {{.app.metadata.name}} is up and running.",
                    "template.app-health-degraded": "email:\n  subject: Application {{.app.metadata.name}} has degraded.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}} Application {{.app.metadata.name}} has degraded.\n  Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\": \"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#f4c030\",\n      \"fields\": [\n      {\n        \"title\": \"Health Status\",\n        \"value\": \"{{.app.status.health.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Health Status\",\n      \"value\": \"{{.app.status.health.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#FF0000'\n  title: Application {{.app.metadata.name}} has degraded.",
                    "template.app-sync-failed": "email:\n  subject: Failed to sync application {{.app.metadata.name}}.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}}  The sync operation of application {{.app.metadata.name}} has failed at {{.app.status.operationState.finishedAt}} with the following error: {{.app.status.operationState.message}}\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#E96D76\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Failed at\",\n      \"value\": \"{{.app.status.operationState.finishedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Operation\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#FF0000'\n  title: Failed to sync application {{.app.metadata.name}}.",
                    "template.app-sync-running": "email:\n  subject: Start syncing application {{.app.metadata.name}}.\nmessage: |\n  The sync operation of application {{.app.metadata.name}} has started at {{.app.status.operationState.startedAt}}.\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#0DADEA\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Started at\",\n      \"value\": \"{{.app.status.operationState.startedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Operation\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  title: Start syncing application {{.app.metadata.name}}.",
                    "template.app-sync-status-unknown": "email:\n  subject: Application {{.app.metadata.name}} sync status is 'Unknown'\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}} Application {{.app.metadata.name}} sync is 'Unknown'.\n  Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.\n  {{if ne .serviceType \"slack\"}}\n  {{range $c := .app.status.conditions}}\n      * {{$c.message}}\n  {{end}}\n  {{end}}\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#E96D76\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  title: Application {{.app.metadata.name}} sync status is 'Unknown'",
                    "template.app-sync-succeeded": "email:\n  subject: Application {{.app.metadata.name}} has been successfully synced.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} has been successfully synced at {{.app.status.operationState.finishedAt}}.\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#18be52\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Synced at\",\n      \"value\": \"{{.app.status.operationState.finishedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Operation Details\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#000080'\n  title: Application {{.app.metadata.name}} has been successfully synced"
                  },
                  "triggers": {
                    "trigger.on-created": "- description: Application is created.\n  oncePer: app.metadata.name\n  send:\n  - app-created\n  when: \"true\"",
                    "trigger.on-deleted": "- description: Application is deleted.\n  oncePer: app.metadata.name\n  send:\n  - app-deleted\n  when: app.metadata.deletionTimestamp != nil",
                    "trigger.on-deployed": "- description: Application is synced and healthy. Triggered once per commit.\n  oncePer: app.status.operationState.syncResult.revision\n  send:\n  - app-deployed\n  when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status\n      == 'Healthy'",
                    "trigger.on-health-degraded": "- description: Application has degraded\n  send:\n  - app-health-degraded\n  when: app.status.health.status == 'Degraded'",
                    "trigger.on-sync-failed": "- description: Application syncing has failed\n  send:\n  - app-sync-failed\n  when: app.status.operationState.phase in ['Error', 'Failed']",
                    "trigger.on-sync-running": "- description: Application is being synced\n  send:\n  - app-sync-running\n  when: app.status.operationState.phase in ['Running']",
                    "trigger.on-sync-status-unknown": "- description: Application status is 'Unknown'\n  send:\n  - app-sync-status-unknown\n  when: app.status.sync.status == 'Unknown'",
                    "trigger.on-sync-succeeded": "- description: Application syncing has succeeded\n  send:\n  - app-sync-succeeded\n  when: app.status.operationState.phase in ['Succeeded']"
                  }
                }
              },
              {
                "apiVersion": "argoproj.io/v1beta1",
                "kind": "ArgoCD",
                "metadata": {
                  "name": "argocd-sample"
                },
                "spec": {
                  "controller": {
                    "resources": {
                      "limits": {
                        "cpu": "2000m",
                        "memory": "2048Mi"
                      },
                      "requests": {
                        "cpu": "250m",
                        "memory": "1024Mi"
                      }
                    }
                  },
                  "ha": {
                    "enabled": false,
                    "resources": {
                      "limits": {
                        "cpu": "500m",
                        "memory": "256Mi"
                      },
                      "requests": {
                        "cpu": "250m",
                        "memory": "128Mi"
                      }
                    }
                  },
                  "redis": {
                    "resources": {
                      "limits": {
                        "cpu": "500m",
                        "memory": "256Mi"
                      },
                      "requests": {
                        "cpu": "250m",
                        "memory": "128Mi"
                      }
                    }
                  },
                  "repo": {
                    "resources": {
                      "limits": {
                        "cpu": "1000m",
                        "memory": "512Mi"
                      },
                      "requests": {
                        "cpu": "250m",
                        "memory": "256Mi"
                      }
                    }
                  },
                  "server": {
                    "resources": {
                      "limits": {
                        "cpu": "500m",
                        "memory": "256Mi"
                      },
                      "requests": {
                        "cpu": "125m",
                        "memory": "128Mi"
                      }
                    },
                    "route": {
                      "enabled": true
                    }
                  },
                  "sso": {
                    "dex": {
                      "resources": {
                        "limits": {
                          "cpu": "500m",
                          "memory": "256Mi"
                        },
                        "requests": {
                          "cpu": "250m",
                          "memory": "128Mi"
                        }
                      }
                    },
                    "provider": "dex"
                  }
                }
              }
            ]
          capabilities: Deep Insights
          categories: Integration & Delivery
          certified: "false"
          containerImage: quay.io/argoprojlabs/argocd-operator@sha256:405e7bde25affb7644c576a7f2d41ba30b88e2ef4f2f11945b920a33517895ce
          createdAt: "2024-08-28T12:00:21Z"
          description: Argo CD is a declarative, GitOps continuous delivery tool for
            Kubernetes.
          kubectl.kubernetes.io/default-container: manager
          olm.operatorGroup: global-operators
          olm.operatorNamespace: operators
          olm.targetNamespaces: ""
          olmcahash: 750c7881923965654da2d208af0892b53ef099a368c9cb05409de44c98be250b
          operatorframework.io/properties: '{"properties":[{"type":"olm.gvk","value":{"group":"argoproj.io","kind":"AppProject","version":"v1alpha1"}},{"type":"olm.gvk","value":{"group":"argoproj.io","kind":"Application","version":"v1alpha1"}},{"type":"olm.gvk","value":{"group":"argoproj.io","kind":"ApplicationSet","version":"v1alpha1"}},{"type":"olm.gvk","value":{"group":"argoproj.io","kind":"ArgoCD","version":"v1alpha1"}},{"type":"olm.gvk","value":{"group":"argoproj.io","kind":"ArgoCD","version":"v1beta1"}},{"type":"olm.gvk","value":{"group":"argoproj.io","kind":"ArgoCDExport","version":"v1alpha1"}},{"type":"olm.gvk","value":{"group":"argoproj.io","kind":"NotificationsConfiguration","version":"v1alpha1"}},{"type":"olm.package","value":{"packageName":"argocd-operator","version":"0.12.0"}}]}'
          operators.operatorframework.io/builder: operator-sdk-v1.35.0
          operators.operatorframework.io/project_layout: go.kubebuilder.io/v4
          repository: https://github.com/argoproj-labs/argocd-operator
          support: Argo CD
        creationTimestamp: null
        labels:
          control-plane: controller-manager
          pod-template-hash: 5bf96c8b47
      spec:
        containers:
        - args:
          - --leader-elect
          command:
          - /manager
          env:
          - name: WATCH_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.annotations['olm.targetNamespaces']
          - name: ENABLE_CONVERSION_WEBHOOK
            value: "true"
          - name: OPERATOR_CONDITION_NAME
            value: argocd-operator.v0.12.0
          image: quay.io/argoprojlabs/argocd-operator@sha256:405e7bde25affb7644c576a7f2d41ba30b88e2ef4f2f11945b920a33517895ce
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8081
              scheme: HTTP
            initialDelaySeconds: 15
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 1
          name: manager
          ports:
          - containerPort: 9443
            name: webhook-server
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: 8081
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /apiserver.local.config/certificates
            name: apiservice-cert
          - mountPath: /tmp/k8s-webhook-server/serving-certs
            name: webhook-cert
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
        serviceAccount: argocd-operator-controller-manager
        serviceAccountName: argocd-operator-controller-manager
        terminationGracePeriodSeconds: 10
        volumes:
        - name: apiservice-cert
          secret:
            defaultMode: 420
            items:
            - key: tls.crt
              path: apiserver.crt
            - key: tls.key
              path: apiserver.key
            secretName: argocd-operator-controller-manager-service-cert
        - name: webhook-cert
          secret:
            defaultMode: 420
            items:
            - key: tls.crt
              path: tls.crt
            - key: tls.key
              path: tls.key
            secretName: argocd-operator-controller-manager-service-cert
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "3"
    creationTimestamp: "2024-09-03T08:40:12Z"
    generation: 1
    labels:
      control-plane: controller-manager
      pod-template-hash: 6989f46474
    name: argocd-operator-controller-manager-6989f46474
    namespace: operators
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: argocd-operator-controller-manager
      uid: 625a990c-bcf8-4496-8c9d-8bc0fa13697c
    resourceVersion: "1508267"
    uid: 87674001-a4e6-4446-b9aa-449886f5457b
  spec:
    replicas: 1
    selector:
      matchLabels:
        control-plane: controller-manager
        pod-template-hash: 6989f46474
    template:
      metadata:
        annotations:
          alm-examples: |-
            [
              {
                "apiVersion": "argoproj.io/v1alpha1",
                "kind": "AppProject",
                "metadata": {
                  "name": "example"
                },
                "spec": null
              },
              {
                "apiVersion": "argoproj.io/v1alpha1",
                "kind": "Application",
                "metadata": {
                  "name": "example"
                },
                "spec": null
              },
              {
                "apiVersion": "argoproj.io/v1alpha1",
                "kind": "ApplicationSet",
                "metadata": {
                  "name": "example"
                },
                "spec": null
              },
              {
                "apiVersion": "argoproj.io/v1alpha1",
                "kind": "ArgoCD",
                "metadata": {
                  "name": "argocd-sample"
                },
                "spec": {
                  "controller": {
                    "resources": {
                      "limits": {
                        "cpu": "2000m",
                        "memory": "2048Mi"
                      },
                      "requests": {
                        "cpu": "250m",
                        "memory": "1024Mi"
                      }
                    }
                  },
                  "ha": {
                    "enabled": false,
                    "resources": {
                      "limits": {
                        "cpu": "500m",
                        "memory": "256Mi"
                      },
                      "requests": {
                        "cpu": "250m",
                        "memory": "128Mi"
                      }
                    }
                  },
                  "redis": {
                    "resources": {
                      "limits": {
                        "cpu": "500m",
                        "memory": "256Mi"
                      },
                      "requests": {
                        "cpu": "250m",
                        "memory": "128Mi"
                      }
                    }
                  },
                  "repo": {
                    "resources": {
                      "limits": {
                        "cpu": "1000m",
                        "memory": "512Mi"
                      },
                      "requests": {
                        "cpu": "250m",
                        "memory": "256Mi"
                      }
                    }
                  },
                  "server": {
                    "resources": {
                      "limits": {
                        "cpu": "500m",
                        "memory": "256Mi"
                      },
                      "requests": {
                        "cpu": "125m",
                        "memory": "128Mi"
                      }
                    },
                    "route": {
                      "enabled": true
                    }
                  },
                  "sso": {
                    "dex": {
                      "resources": {
                        "limits": {
                          "cpu": "500m",
                          "memory": "256Mi"
                        },
                        "requests": {
                          "cpu": "250m",
                          "memory": "128Mi"
                        }
                      }
                    },
                    "provider": "dex"
                  }
                }
              },
              {
                "apiVersion": "argoproj.io/v1alpha1",
                "kind": "ArgoCDExport",
                "metadata": {
                  "name": "argocdexport-sample"
                },
                "spec": {
                  "argocd": "argocd-sample"
                }
              },
              {
                "apiVersion": "argoproj.io/v1alpha1",
                "kind": "NotificationsConfiguration",
                "metadata": {
                  "name": "default-notifications-configuration"
                },
                "spec": {
                  "templates": {
                    "template.app-created": "email:\n  subject: Application {{.app.metadata.name}} has been created.\nmessage: Application {{.app.metadata.name}} has been created.\nteams:\n  title: Application {{.app.metadata.name}} has been created.",
                    "template.app-deleted": "email:\n  subject: Application {{.app.metadata.name}} has been deleted.\nmessage: Application {{.app.metadata.name}} has been deleted.\nteams:\n  title: Application {{.app.metadata.name}} has been deleted.",
                    "template.app-deployed": "email:\n  subject: New version of an application {{.app.metadata.name}} is up and running.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} is now running new version of deployments manifests.\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#18be52\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Revision\",\n        \"value\": \"{{.app.status.sync.revision}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    },\n    {\n      \"name\": \"Revision\",\n      \"value\": \"{{.app.status.sync.revision}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Operation Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#000080'\n  title: New version of an application {{.app.metadata.name}} is up and running.",
                    "template.app-health-degraded": "email:\n  subject: Application {{.app.metadata.name}} has degraded.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}} Application {{.app.metadata.name}} has degraded.\n  Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\": \"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#f4c030\",\n      \"fields\": [\n      {\n        \"title\": \"Health Status\",\n        \"value\": \"{{.app.status.health.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Health Status\",\n      \"value\": \"{{.app.status.health.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#FF0000'\n  title: Application {{.app.metadata.name}} has degraded.",
                    "template.app-sync-failed": "email:\n  subject: Failed to sync application {{.app.metadata.name}}.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}}  The sync operation of application {{.app.metadata.name}} has failed at {{.app.status.operationState.finishedAt}} with the following error: {{.app.status.operationState.message}}\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#E96D76\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Failed at\",\n      \"value\": \"{{.app.status.operationState.finishedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Operation\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#FF0000'\n  title: Failed to sync application {{.app.metadata.name}}.",
                    "template.app-sync-running": "email:\n  subject: Start syncing application {{.app.metadata.name}}.\nmessage: |\n  The sync operation of application {{.app.metadata.name}} has started at {{.app.status.operationState.startedAt}}.\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#0DADEA\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Started at\",\n      \"value\": \"{{.app.status.operationState.startedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Operation\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  title: Start syncing application {{.app.metadata.name}}.",
                    "template.app-sync-status-unknown": "email:\n  subject: Application {{.app.metadata.name}} sync status is 'Unknown'\nmessage: |\n  {{if eq .serviceType \"slack\"}}:exclamation:{{end}} Application {{.app.metadata.name}} sync is 'Unknown'.\n  Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.\n  {{if ne .serviceType \"slack\"}}\n  {{range $c := .app.status.conditions}}\n      * {{$c.message}}\n  {{end}}\n  {{end}}\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#E96D76\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Application\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  title: Application {{.app.metadata.name}} sync status is 'Unknown'",
                    "template.app-sync-succeeded": "email:\n  subject: Application {{.app.metadata.name}} has been successfully synced.\nmessage: |\n  {{if eq .serviceType \"slack\"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} has been successfully synced at {{.app.status.operationState.finishedAt}}.\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\nslack:\n  attachments: |\n    [{\n      \"title\": \"{{ .app.metadata.name}}\",\n      \"title_link\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}\",\n      \"color\": \"#18be52\",\n      \"fields\": [\n      {\n        \"title\": \"Sync Status\",\n        \"value\": \"{{.app.status.sync.status}}\",\n        \"short\": true\n      },\n      {\n        \"title\": \"Repository\",\n        \"value\": \"{{.app.spec.source.repoURL}}\",\n        \"short\": true\n      }\n      {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"title\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\",\n        \"short\": true\n      }\n      {{end}}\n      ]\n    }]\n  deliveryPolicy: Post\n  groupingKey: \"\"\n  notifyBroadcast: false\nteams:\n  facts: |\n    [{\n      \"name\": \"Sync Status\",\n      \"value\": \"{{.app.status.sync.status}}\"\n    },\n    {\n      \"name\": \"Synced at\",\n      \"value\": \"{{.app.status.operationState.finishedAt}}\"\n    },\n    {\n      \"name\": \"Repository\",\n      \"value\": \"{{.app.spec.source.repoURL}}\"\n    }\n    {{range $index, $c := .app.status.conditions}}\n      {{if not $index}},{{end}}\n      {{if $index}},{{end}}\n      {\n        \"name\": \"{{$c.type}}\",\n        \"value\": \"{{$c.message}}\"\n      }\n    {{end}}\n    ]\n  potentialAction: |-\n    [{\n      \"@type\":\"OpenUri\",\n      \"name\":\"Operation Details\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true\"\n      }]\n    },\n    {\n      \"@type\":\"OpenUri\",\n      \"name\":\"Open Repository\",\n      \"targets\":[{\n        \"os\":\"default\",\n        \"uri\":\"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}\"\n      }]\n    }]\n  themeColor: '#000080'\n  title: Application {{.app.metadata.name}} has been successfully synced"
                  },
                  "triggers": {
                    "trigger.on-created": "- description: Application is created.\n  oncePer: app.metadata.name\n  send:\n  - app-created\n  when: \"true\"",
                    "trigger.on-deleted": "- description: Application is deleted.\n  oncePer: app.metadata.name\n  send:\n  - app-deleted\n  when: app.metadata.deletionTimestamp != nil",
                    "trigger.on-deployed": "- description: Application is synced and healthy. Triggered once per commit.\n  oncePer: app.status.operationState.syncResult.revision\n  send:\n  - app-deployed\n  when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status\n      == 'Healthy'",
                    "trigger.on-health-degraded": "- description: Application has degraded\n  send:\n  - app-health-degraded\n  when: app.status.health.status == 'Degraded'",
                    "trigger.on-sync-failed": "- description: Application syncing has failed\n  send:\n  - app-sync-failed\n  when: app.status.operationState.phase in ['Error', 'Failed']",
                    "trigger.on-sync-running": "- description: Application is being synced\n  send:\n  - app-sync-running\n  when: app.status.operationState.phase in ['Running']",
                    "trigger.on-sync-status-unknown": "- description: Application status is 'Unknown'\n  send:\n  - app-sync-status-unknown\n  when: app.status.sync.status == 'Unknown'",
                    "trigger.on-sync-succeeded": "- description: Application syncing has succeeded\n  send:\n  - app-sync-succeeded\n  when: app.status.operationState.phase in ['Succeeded']"
                  }
                }
              },
              {
                "apiVersion": "argoproj.io/v1beta1",
                "kind": "ArgoCD",
                "metadata": {
                  "name": "argocd-sample"
                },
                "spec": {
                  "controller": {
                    "resources": {
                      "limits": {
                        "cpu": "2000m",
                        "memory": "2048Mi"
                      },
                      "requests": {
                        "cpu": "250m",
                        "memory": "1024Mi"
                      }
                    }
                  },
                  "ha": {
                    "enabled": false,
                    "resources": {
                      "limits": {
                        "cpu": "500m",
                        "memory": "256Mi"
                      },
                      "requests": {
                        "cpu": "250m",
                        "memory": "128Mi"
                      }
                    }
                  },
                  "redis": {
                    "resources": {
                      "limits": {
                        "cpu": "500m",
                        "memory": "256Mi"
                      },
                      "requests": {
                        "cpu": "250m",
                        "memory": "128Mi"
                      }
                    }
                  },
                  "repo": {
                    "resources": {
                      "limits": {
                        "cpu": "1000m",
                        "memory": "512Mi"
                      },
                      "requests": {
                        "cpu": "250m",
                        "memory": "256Mi"
                      }
                    }
                  },
                  "server": {
                    "resources": {
                      "limits": {
                        "cpu": "500m",
                        "memory": "256Mi"
                      },
                      "requests": {
                        "cpu": "125m",
                        "memory": "128Mi"
                      }
                    },
                    "route": {
                      "enabled": true
                    }
                  },
                  "sso": {
                    "dex": {
                      "resources": {
                        "limits": {
                          "cpu": "500m",
                          "memory": "256Mi"
                        },
                        "requests": {
                          "cpu": "250m",
                          "memory": "128Mi"
                        }
                      }
                    },
                    "provider": "dex"
                  }
                }
              }
            ]
          capabilities: Deep Insights
          categories: Integration & Delivery
          certified: "false"
          containerImage: quay.io/argoprojlabs/argocd-operator@sha256:405e7bde25affb7644c576a7f2d41ba30b88e2ef4f2f11945b920a33517895ce
          createdAt: "2024-08-28T12:00:21Z"
          description: Argo CD is a declarative, GitOps continuous delivery tool for
            Kubernetes.
          kubectl.kubernetes.io/default-container: manager
          olm.operatorGroup: global-operators
          olm.operatorNamespace: operators
          olm.targetNamespaces: ""
          olmcahash: e065e9681f639701c81098d07f53efe80cffbae5a580f1d5a3424be50984ee21
          operatorframework.io/properties: '{"properties":[{"type":"olm.gvk","value":{"group":"argoproj.io","kind":"AppProject","version":"v1alpha1"}},{"type":"olm.gvk","value":{"group":"argoproj.io","kind":"Application","version":"v1alpha1"}},{"type":"olm.gvk","value":{"group":"argoproj.io","kind":"ApplicationSet","version":"v1alpha1"}},{"type":"olm.gvk","value":{"group":"argoproj.io","kind":"ArgoCD","version":"v1alpha1"}},{"type":"olm.gvk","value":{"group":"argoproj.io","kind":"ArgoCD","version":"v1beta1"}},{"type":"olm.gvk","value":{"group":"argoproj.io","kind":"ArgoCDExport","version":"v1alpha1"}},{"type":"olm.gvk","value":{"group":"argoproj.io","kind":"NotificationsConfiguration","version":"v1alpha1"}},{"type":"olm.package","value":{"packageName":"argocd-operator","version":"0.12.0"}}]}'
          operators.operatorframework.io/builder: operator-sdk-v1.35.0
          operators.operatorframework.io/project_layout: go.kubebuilder.io/v4
          repository: https://github.com/argoproj-labs/argocd-operator
          support: Argo CD
        creationTimestamp: null
        labels:
          control-plane: controller-manager
          pod-template-hash: 6989f46474
      spec:
        containers:
        - args:
          - --leader-elect
          command:
          - /manager
          env:
          - name: WATCH_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.annotations['olm.targetNamespaces']
          - name: ENABLE_CONVERSION_WEBHOOK
            value: "true"
          - name: OPERATOR_CONDITION_NAME
            value: argocd-operator.v0.12.0
          image: quay.io/argoprojlabs/argocd-operator@sha256:405e7bde25affb7644c576a7f2d41ba30b88e2ef4f2f11945b920a33517895ce
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8081
              scheme: HTTP
            initialDelaySeconds: 15
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 1
          name: manager
          ports:
          - containerPort: 9443
            name: webhook-server
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: 8081
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /apiserver.local.config/certificates
            name: apiservice-cert
          - mountPath: /tmp/k8s-webhook-server/serving-certs
            name: webhook-cert
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
        serviceAccount: argocd-operator-controller-manager
        serviceAccountName: argocd-operator-controller-manager
        terminationGracePeriodSeconds: 10
        volumes:
        - name: apiservice-cert
          secret:
            defaultMode: 420
            items:
            - key: tls.crt
              path: apiserver.crt
            - key: tls.key
              path: apiserver.key
            secretName: argocd-operator-controller-manager-service-cert
        - name: webhook-cert
          secret:
            defaultMode: 420
            items:
            - key: tls.crt
              path: tls.crt
            - key: tls.key
              path: tls.key
            secretName: argocd-operator-controller-manager-service-cert
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    creationTimestamp: "2024-08-29T09:24:30Z"
    generation: 2
    labels:
      app.kubernetes.io/component: application-controller
      app.kubernetes.io/managed-by: example-argocd
      app.kubernetes.io/name: example-argocd-application-controller
      app.kubernetes.io/part-of: argocd
    name: example-argocd-application-controller
    namespace: default
    ownerReferences:
    - apiVersion: argoproj.io/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: ArgoCD
      name: example-argocd
      uid: 1b3c36d4-9531-41c8-99cc-1f4be25a49b0
    resourceVersion: "1233142"
    uid: 735acf5e-2855-48f3-ae0a-48bfd385b5bd
  spec:
    persistentVolumeClaimRetentionPolicy:
      whenDeleted: Retain
      whenScaled: Retain
    podManagementPolicy: OrderedReady
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/name: example-argocd-application-controller
    serviceName: example-argocd-application-controller
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: example-argocd-application-controller
          image.upgraded: 09032024-084024-UTC
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: example-argocd-argocd-application-controller
                topologyKey: kubernetes.io/hostname
              weight: 100
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/part-of: argocd
                topologyKey: kubernetes.io/hostname
              weight: 5
        containers:
        - command:
          - argocd-application-controller
          - --operation-processors
          - "10"
          - --redis
          - example-argocd-redis.default.svc.cluster.local:6379
          - --repo-server
          - example-argocd-repo-server.default.svc.cluster.local:8081
          - --status-processors
          - "20"
          - --kubectl-parallelism-limit
          - "10"
          - --loglevel
          - info
          - --logformat
          - text
          env:
          - name: HOME
            value: /home/argocd
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: admin.password
                name: example-argocd-redis-initial-password
          image: quay.io/argoproj/argocd@sha256:a0ebfa7d419a1c78babc80fc77de093751d8a5fabffcaf3f7e81a4d55a23cc0d
          imagePullPolicy: Always
          name: argocd-application-controller
          ports:
          - containerPort: 8082
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8082
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /app/config/controller/tls
            name: argocd-repo-server-tls
          - mountPath: /app/config/controller/tls/redis
            name: argocd-operator-redis-tls
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: example-argocd-argocd-application-controller
        serviceAccountName: example-argocd-argocd-application-controller
        terminationGracePeriodSeconds: 30
        volumes:
        - name: argocd-repo-server-tls
          secret:
            defaultMode: 420
            optional: true
            secretName: argocd-repo-server-tls
        - name: argocd-operator-redis-tls
          secret:
            defaultMode: 420
            optional: true
            secretName: argocd-operator-redis-tls
    updateStrategy:
      rollingUpdate:
        partition: 0
      type: RollingUpdate
  status:
    availableReplicas: 1
    collisionCount: 0
    currentReplicas: 1
    currentRevision: example-argocd-application-controller-7bb76fd49b
    observedGeneration: 2
    readyReplicas: 1
    replicas: 1
    updateRevision: example-argocd-application-controller-7bb76fd49b
    updatedReplicas: 1
- apiVersion: batch/v1
  kind: Job
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"batch/v1","kind":"Job","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"admission-webhook","app.kubernetes.io/instance":"ingress-nginx","app.kubernetes.io/name":"ingress-nginx","app.kubernetes.io/part-of":"ingress-nginx","app.kubernetes.io/version":"1.11.2"},"name":"ingress-nginx-admission-create","namespace":"ingress-nginx"},"spec":{"template":{"metadata":{"labels":{"app.kubernetes.io/component":"admission-webhook","app.kubernetes.io/instance":"ingress-nginx","app.kubernetes.io/name":"ingress-nginx","app.kubernetes.io/part-of":"ingress-nginx","app.kubernetes.io/version":"1.11.2"},"name":"ingress-nginx-admission-create"},"spec":{"containers":[{"args":["create","--host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc","--namespace=$(POD_NAMESPACE)","--secret-name=ingress-nginx-admission"],"env":[{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}}],"image":"registry.k8s.io/ingress-nginx/kube-webhook-certgen:v1.4.3@sha256:a320a50cc91bd15fd2d6fa6de58bd98c1bd64b9a6f926ce23a600d87043455a3","imagePullPolicy":"IfNotPresent","name":"create","securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"readOnlyRootFilesystem":true,"runAsNonRoot":true,"runAsUser":65532,"seccompProfile":{"type":"RuntimeDefault"}}}],"nodeSelector":{"kubernetes.io/os":"linux"},"restartPolicy":"OnFailure","serviceAccountName":"ingress-nginx-admission"}}}}
    creationTimestamp: "2024-08-25T15:02:21Z"
    generation: 1
    labels:
      app.kubernetes.io/component: admission-webhook
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.11.2
    name: ingress-nginx-admission-create
    namespace: ingress-nginx
    resourceVersion: "659122"
    uid: ee65e813-3811-4656-9be3-b065ebd40c24
  spec:
    backoffLimit: 6
    completionMode: NonIndexed
    completions: 1
    manualSelector: false
    parallelism: 1
    podReplacementPolicy: TerminatingOrFailed
    selector:
      matchLabels:
        batch.kubernetes.io/controller-uid: ee65e813-3811-4656-9be3-b065ebd40c24
    suspend: false
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: admission-webhook
          app.kubernetes.io/instance: ingress-nginx
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/part-of: ingress-nginx
          app.kubernetes.io/version: 1.11.2
          batch.kubernetes.io/controller-uid: ee65e813-3811-4656-9be3-b065ebd40c24
          batch.kubernetes.io/job-name: ingress-nginx-admission-create
          controller-uid: ee65e813-3811-4656-9be3-b065ebd40c24
          job-name: ingress-nginx-admission-create
        name: ingress-nginx-admission-create
      spec:
        containers:
        - args:
          - create
          - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
          - --namespace=$(POD_NAMESPACE)
          - --secret-name=ingress-nginx-admission
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: registry.k8s.io/ingress-nginx/kube-webhook-certgen:v1.4.3@sha256:a320a50cc91bd15fd2d6fa6de58bd98c1bd64b9a6f926ce23a600d87043455a3
          imagePullPolicy: IfNotPresent
          name: create
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 65532
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: OnFailure
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: ingress-nginx-admission
        serviceAccountName: ingress-nginx-admission
        terminationGracePeriodSeconds: 30
  status:
    completionTime: "2024-08-25T15:03:00Z"
    conditions:
    - lastProbeTime: "2024-08-25T15:03:00Z"
      lastTransitionTime: "2024-08-25T15:03:00Z"
      status: "True"
      type: Complete
    ready: 0
    startTime: "2024-08-25T15:02:21Z"
    succeeded: 1
    terminating: 0
    uncountedTerminatedPods: {}
- apiVersion: batch/v1
  kind: Job
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"batch/v1","kind":"Job","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"admission-webhook","app.kubernetes.io/instance":"ingress-nginx","app.kubernetes.io/name":"ingress-nginx","app.kubernetes.io/part-of":"ingress-nginx","app.kubernetes.io/version":"1.11.2"},"name":"ingress-nginx-admission-patch","namespace":"ingress-nginx"},"spec":{"template":{"metadata":{"labels":{"app.kubernetes.io/component":"admission-webhook","app.kubernetes.io/instance":"ingress-nginx","app.kubernetes.io/name":"ingress-nginx","app.kubernetes.io/part-of":"ingress-nginx","app.kubernetes.io/version":"1.11.2"},"name":"ingress-nginx-admission-patch"},"spec":{"containers":[{"args":["patch","--webhook-name=ingress-nginx-admission","--namespace=$(POD_NAMESPACE)","--patch-mutating=false","--secret-name=ingress-nginx-admission","--patch-failure-policy=Fail"],"env":[{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}}],"image":"registry.k8s.io/ingress-nginx/kube-webhook-certgen:v1.4.3@sha256:a320a50cc91bd15fd2d6fa6de58bd98c1bd64b9a6f926ce23a600d87043455a3","imagePullPolicy":"IfNotPresent","name":"patch","securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"readOnlyRootFilesystem":true,"runAsNonRoot":true,"runAsUser":65532,"seccompProfile":{"type":"RuntimeDefault"}}}],"nodeSelector":{"kubernetes.io/os":"linux"},"restartPolicy":"OnFailure","serviceAccountName":"ingress-nginx-admission"}}}}
    creationTimestamp: "2024-08-25T15:02:21Z"
    generation: 1
    labels:
      app.kubernetes.io/component: admission-webhook
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
      app.kubernetes.io/version: 1.11.2
    name: ingress-nginx-admission-patch
    namespace: ingress-nginx
    resourceVersion: "659135"
    uid: 604fc6d0-77ca-48d2-9d86-dbbd4cabbb05
  spec:
    backoffLimit: 6
    completionMode: NonIndexed
    completions: 1
    manualSelector: false
    parallelism: 1
    podReplacementPolicy: TerminatingOrFailed
    selector:
      matchLabels:
        batch.kubernetes.io/controller-uid: 604fc6d0-77ca-48d2-9d86-dbbd4cabbb05
    suspend: false
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: admission-webhook
          app.kubernetes.io/instance: ingress-nginx
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/part-of: ingress-nginx
          app.kubernetes.io/version: 1.11.2
          batch.kubernetes.io/controller-uid: 604fc6d0-77ca-48d2-9d86-dbbd4cabbb05
          batch.kubernetes.io/job-name: ingress-nginx-admission-patch
          controller-uid: 604fc6d0-77ca-48d2-9d86-dbbd4cabbb05
          job-name: ingress-nginx-admission-patch
        name: ingress-nginx-admission-patch
      spec:
        containers:
        - args:
          - patch
          - --webhook-name=ingress-nginx-admission
          - --namespace=$(POD_NAMESPACE)
          - --patch-mutating=false
          - --secret-name=ingress-nginx-admission
          - --patch-failure-policy=Fail
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: registry.k8s.io/ingress-nginx/kube-webhook-certgen:v1.4.3@sha256:a320a50cc91bd15fd2d6fa6de58bd98c1bd64b9a6f926ce23a600d87043455a3
          imagePullPolicy: IfNotPresent
          name: patch
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 65532
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: OnFailure
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: ingress-nginx-admission
        serviceAccountName: ingress-nginx-admission
        terminationGracePeriodSeconds: 30
  status:
    completionTime: "2024-08-25T15:03:02Z"
    conditions:
    - lastProbeTime: "2024-08-25T15:03:02Z"
      lastTransitionTime: "2024-08-25T15:03:02Z"
      status: "True"
      type: Complete
    ready: 0
    startTime: "2024-08-25T15:02:21Z"
    succeeded: 1
    terminating: 0
    uncountedTerminatedPods: {}
- apiVersion: batch/v1
  kind: Job
  metadata:
    creationTimestamp: "2024-08-09T10:49:00Z"
    generation: 1
    labels:
      olm.managed: "true"
      operatorframework.io/bundle-unpack-ref: 71db7ad535eb28807870da539e169ce61c5a1991636432ad1de9e06dd60f180
    name: 71db7ad535eb28807870da539e169ce61c5a1991636432ad1de9e06dd60f180
    namespace: olm
    ownerReferences:
    - apiVersion: v1
      blockOwnerDeletion: false
      controller: false
      kind: ConfigMap
      name: 71db7ad535eb28807870da539e169ce61c5a1991636432ad1de9e06dd60f180
      uid: 18b06ffc-fb2d-467a-9ea8-1edf56d66577
    resourceVersion: "1149"
    uid: 0a890721-c5c4-4161-93c7-6ad745079b89
  spec:
    activeDeadlineSeconds: 600
    backoffLimit: 3
    completionMode: NonIndexed
    completions: 1
    manualSelector: false
    parallelism: 1
    podReplacementPolicy: TerminatingOrFailed
    selector:
      matchLabels:
        batch.kubernetes.io/controller-uid: 0a890721-c5c4-4161-93c7-6ad745079b89
    suspend: false
    template:
      metadata:
        creationTimestamp: null
        labels:
          batch.kubernetes.io/controller-uid: 0a890721-c5c4-4161-93c7-6ad745079b89
          batch.kubernetes.io/job-name: 71db7ad535eb28807870da539e169ce61c5a1991636432ad1de9e06dd60f180
          controller-uid: 0a890721-c5c4-4161-93c7-6ad745079b89
          job-name: 71db7ad535eb28807870da539e169ce61c5a1991636432ad1de9e06dd60f180
          olm.managed: "true"
        name: 71db7ad535eb28807870da539e169ce61c5a1991636432ad1de9e06dd60f180
      spec:
        containers:
        - command:
          - opm
          - alpha
          - bundle
          - extract
          - -m
          - /bundle/
          - -n
          - olm
          - -c
          - 71db7ad535eb28807870da539e169ce61c5a1991636432ad1de9e06dd60f180
          - -z
          env:
          - name: CONTAINER_IMAGE
            value: quay.io/operatorhubio/argocd-operator@sha256:ae27580347c6917f46a19d94cb6e740e828deebd4ab06ae5a62cf5588ed38827
          image: quay.io/operator-framework/opm:latest
          imagePullPolicy: Always
          name: extract
          resources:
            requests:
              cpu: 10m
              memory: 50Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /bundle
            name: bundle
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - /bin/cp
          - -Rv
          - /bin/cpb
          - /util/cpb
          image: quay.io/operator-framework/olm@sha256:40d0363f4aa684319cd721c2fcf3321785380fdc74de8ef821317cd25a10782a
          imagePullPolicy: IfNotPresent
          name: util
          resources:
            requests:
              cpu: 10m
              memory: 50Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /util
            name: util
        - command:
          - /util/cpb
          - /bundle
          image: quay.io/operatorhubio/argocd-operator@sha256:ae27580347c6917f46a19d94cb6e740e828deebd4ab06ae5a62cf5588ed38827
          imagePullPolicy: IfNotPresent
          name: pull
          resources:
            requests:
              cpu: 10m
              memory: 50Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /bundle
            name: bundle
          - mountPath: /util
            name: util
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Never
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          seccompProfile:
            type: RuntimeDefault
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: kubernetes.io/arch
          operator: Equal
          value: amd64
        - key: kubernetes.io/arch
          operator: Equal
          value: arm64
        - key: kubernetes.io/arch
          operator: Equal
          value: ppc64le
        - key: kubernetes.io/arch
          operator: Equal
          value: s390x
        volumes:
        - emptyDir: {}
          name: bundle
        - emptyDir: {}
          name: util
  status:
    completionTime: "2024-08-09T10:49:17Z"
    conditions:
    - lastProbeTime: "2024-08-09T10:49:17Z"
      lastTransitionTime: "2024-08-09T10:49:17Z"
      status: "True"
      type: Complete
    ready: 0
    startTime: "2024-08-09T10:49:00Z"
    succeeded: 1
    terminating: 0
    uncountedTerminatedPods: {}
- apiVersion: batch/v1
  kind: Job
  metadata:
    creationTimestamp: "2024-09-03T08:39:24Z"
    generation: 1
    labels:
      olm.managed: "true"
      operatorframework.io/bundle-unpack-ref: c9039891e6c004ade96467174209875620b5d1c5ff74a762737f8b1a38e8905
    name: c9039891e6c004ade96467174209875620b5d1c5ff74a762737f8b1a38e8905
    namespace: olm
    ownerReferences:
    - apiVersion: v1
      blockOwnerDeletion: false
      controller: false
      kind: ConfigMap
      name: c9039891e6c004ade96467174209875620b5d1c5ff74a762737f8b1a38e8905
      uid: 3d0d5370-4110-4057-827a-b16268bd1176
    resourceVersion: "1232172"
    uid: 36902f21-c3f0-4531-8a2c-e4c3b7039baa
  spec:
    activeDeadlineSeconds: 600
    backoffLimit: 3
    completionMode: NonIndexed
    completions: 1
    manualSelector: false
    parallelism: 1
    podReplacementPolicy: TerminatingOrFailed
    selector:
      matchLabels:
        batch.kubernetes.io/controller-uid: 36902f21-c3f0-4531-8a2c-e4c3b7039baa
    suspend: false
    template:
      metadata:
        creationTimestamp: null
        labels:
          batch.kubernetes.io/controller-uid: 36902f21-c3f0-4531-8a2c-e4c3b7039baa
          batch.kubernetes.io/job-name: c9039891e6c004ade96467174209875620b5d1c5ff74a762737f8b1a38e8905
          controller-uid: 36902f21-c3f0-4531-8a2c-e4c3b7039baa
          job-name: c9039891e6c004ade96467174209875620b5d1c5ff74a762737f8b1a38e8905
          olm.managed: "true"
        name: c9039891e6c004ade96467174209875620b5d1c5ff74a762737f8b1a38e8905
      spec:
        containers:
        - command:
          - opm
          - alpha
          - bundle
          - extract
          - -m
          - /bundle/
          - -n
          - olm
          - -c
          - c9039891e6c004ade96467174209875620b5d1c5ff74a762737f8b1a38e8905
          - -z
          env:
          - name: CONTAINER_IMAGE
            value: quay.io/operatorhubio/argocd-operator@sha256:4673fbc6d93f21139ae1b7a42b75e0ed717bd981572245ca0ee59ef64d6d473d
          image: quay.io/operator-framework/opm:latest
          imagePullPolicy: Always
          name: extract
          resources:
            requests:
              cpu: 10m
              memory: 50Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /bundle
            name: bundle
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - /bin/cp
          - -Rv
          - /bin/cpb
          - /util/cpb
          image: quay.io/operator-framework/olm@sha256:40d0363f4aa684319cd721c2fcf3321785380fdc74de8ef821317cd25a10782a
          imagePullPolicy: IfNotPresent
          name: util
          resources:
            requests:
              cpu: 10m
              memory: 50Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /util
            name: util
        - command:
          - /util/cpb
          - /bundle
          image: quay.io/operatorhubio/argocd-operator@sha256:4673fbc6d93f21139ae1b7a42b75e0ed717bd981572245ca0ee59ef64d6d473d
          imagePullPolicy: IfNotPresent
          name: pull
          resources:
            requests:
              cpu: 10m
              memory: 50Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
          - mountPath: /bundle
            name: bundle
          - mountPath: /util
            name: util
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Never
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          seccompProfile:
            type: RuntimeDefault
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: kubernetes.io/arch
          operator: Equal
          value: amd64
        - key: kubernetes.io/arch
          operator: Equal
          value: arm64
        - key: kubernetes.io/arch
          operator: Equal
          value: ppc64le
        - key: kubernetes.io/arch
          operator: Equal
          value: s390x
        volumes:
        - emptyDir: {}
          name: bundle
        - emptyDir: {}
          name: util
  status:
    completionTime: "2024-09-03T08:39:39Z"
    conditions:
    - lastProbeTime: "2024-09-03T08:39:39Z"
      lastTransitionTime: "2024-09-03T08:39:39Z"
      status: "True"
      type: Complete
    ready: 0
    startTime: "2024-09-03T08:39:24Z"
    succeeded: 1
    terminating: 0
    uncountedTerminatedPods: {}
kind: List
metadata:
  resourceVersion: ""
